   1:     -	000D          	CR              .EQU     0DH
   2:     -	000A          	LF              .EQU     0AH
   3:				
   4:     -	89F0          	oldStackPointer	.EQU	89F0H		;Old Stack Location 	
   5:     -	89F2          	originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
   6:				
   7:     -	9000          		.ORG 9000H
   8:    0+20	9000  ED73F089				ld		(oldStackPointer), SP
   9:   20+10	9004  31FFFF  				ld		sp,0FFFFH
  10:   30+17	9007  CD8090  				CALL	initPacman
  11:   47+17	900A  CDA691  				CALL	initGhost
  12:   64+17	900D  CD9B97  				CALL	initMap
  13:   81+10	9010  21309A  				LD		HL, cls			;Clear screen
  14:   91+17	9013  CDF099  				CALL	print
  15:  108+10	9016  21389A  				LD		HL, hideCursor	;Hide Cursor
  16:  118+17	9019  CDF099  				CALL	print
  17:  135+17	901C  CDEE97  				call 	printMap
  18:     -	901F          	gameLoop:		
  19:  152+17	901F  CD6690  				call	input
  20:  169+17	9022  CDF690  				call 	getMove
  21:  186+17	9025  CDA390  				call 	clearPM
  22:  203+17	9028  CD3A91  				call	movePM
  23:  220+17	902B  CDAF90  				call 	printPM
  24:  237+17	902E  CDD690  				call	eatPellet
  25:							
  26:  254+17	9031  CD4698  				call	initPathFind
  27:  271+17	9034  CD5E98  				call	calculatePathMap
  28:				
  29:  288+17	9037  CD7291  				call	ghostNextMove
  30:  305+17	903A  CD7F91  				call	clearGhost
  31:  322+17	903D  CD9991  				call	colideGhost
  32:  339+17	9040  CDB391  				call	moveGhost
  33:  356+17	9043  CD8C91  				call	printGhost
  34:				
  35:  373+17	9046  CD9991  				call	colideGhost
  36:				
  37:				
  38:							;call 	printPFMap
  39:							
  40:  390+17	9049  CD2199  				call 	printHUD
  41:  407+7	904C  060F    				LD 		B,0FH   ;delay
  42:  414+7	904E  0EFF    				LD		C,0FFH
  43:  421+17	9050  CDFB99  				CALL 	DELAY
  44:  438+10	9053  C31F90  				JP		gameLoop
  45:  448+20	9056  ED7BF089				LD		SP,(oldStackPointer)
  46:  468+10	905A  C9      				ret
  47:				
  48:  478+10	905B  213F9A  	endGame:        LD		HL, showCursor	;Hide Cursor
  49:  488+17	905E  CDF099  				    CALL	print
  50:  505+20	9061  ED7BF089	                LD		SP,(oldStackPointer)
  51:  525+10	9065  C9      					RET	
  52:						
  53:				;-------------- Input --------------------------					
  54:				include input.asm	
**** input.asm ****
   1:     -	9066          	input:
   2:  535+11	9066  DF      					RST		18H
   3:  546+5+6	9067  C8      					RET		Z
   4:  551+11	9068  D7      					RST		10H
   5:  562+7	9069  E6DF    					AND     11011111b       ; lower to uppercase
   6:  569+7	906B  FE57    					CP		'W'
   7:  576+7+5	906D  280D    					JR		Z,validInput
   8:  583+7	906F  FE41    					CP		'A'
   9:  590+7+5	9071  2809    					JR		Z,validInput
  10:  597+7	9073  FE53    					CP		'S'
  11:  604+7+5	9075  2805    					JR		Z,validInput
  12:  611+7	9077  FE44    					CP		'D'
  13:  618+7+5	9079  2801    					JR		Z,validInput
  14:  625+10	907B  C9      					RET
  15:     -	907C          	validInput:		
  16:  635+13	907C  320381  					LD		(pacNDir), A
**** main.asm ****
  55:  648+10	907F  C9      					RET
  56:				;----------Pacman------;
  57:				include	pacman.asm
**** pacman.asm ****
   1:				;Packman
   2:     -	8100          	pacx			.EQU	8100H
   3:     -	8101          	pacy			.EQU	8101H
   4:     -	8102          	pacCDir			.EQU	8102H		;Pacmans current direction
   5:     -	8103          	pacNDir			.EQU	8103H		;Pacman next direction (from key press)
   6:     -	8105          	pacLives		.EQU	8105H		;Pacman next direction (from key press)
   7:				
   8:     -	000E          	initPacx		.EQU	14
   9:     -	000E          	initPacy		.EQU	14
  10:     -	0004          	initLives		.EQU	4
  11:				
  12:     -	0020          	pPelletTics     .EQU    20H         ;Power Pellet last time
  13:				
  14:     -	8104          	pPActive        .EQU    8104H       ;Power Pellet Timer
  15:				
  16:     -	9080          	initPacman:
  17:  658+7	9080  3E04    					LD		a,initLives
  18:  665+13	9082  320581  					LD		(pacLives),a
  19:  678+7	9085  3E0E    	resetPacMan:	LD		a, initPacx		;set Pacman Pos
  20:  685+13	9087  320081  					LD		(pacx),a
  21:  698+7	908A  3E0E    					LD		a, initPacy
  22:  705+13	908C  320181  					LD		(pacy),a
  23:  718+7	908F  3E44    					LD		a, 'D'			;Set start direction
  24:  725+13	9091  320281  					LD		(pacCDir),A
  25:  738+13	9094  320381  					LD		(pacNDir),A
  26:  751+10	9097  210000  					LD		HL, 0H
  27:  761+16	909A  220089  					LD		(score), HL
  28:  777+7	909D  3E00    					LD		a,0
  29:  784+13	909F  320481  					LD		(pPActive),A
  30:  797+10	90A2  C9      					RET
  31:				
  32:     -	90A3          	clearPM:
  33:  807+13	90A3  3A0081  					LD		A, (pacx)		;Push X to stack
  34:  820+4	90A6  4F      					LD		C,A
  35:  824+13	90A7  3A0181  					LD		A, (pacy)		;Push Y to stack
  36:  837+4	90AA  47      					LD		B,A
  37:  841+17	90AB  CDD797  					CALL 	printMapAt
  38:  858+10	90AE  C9      					RET
  39:								
  40:     -	90AF          	printPM:
  41:  868+13	90AF  3A0081  					LD		A, (pacx)		;Push X to stack
  42:  881+4	90B2  3C      					INC		A
  43:  885+4	90B3  6F      					LD		L,A
  44:  889+7	90B4  2600    					LD		H, $00			;We dont care about msb
  45:  896+11	90B6  E5      					PUSH	HL
  46:  907+13	90B7  3A0181  					LD		A, (pacy)		;Push Y to stack
  47:  920+4	90BA  3C      					INC		A
  48:  924+4	90BB  6F      					LD		L,A
  49:  928+7	90BC  2600    					LD		H, $00			;Again we dont care
  50:  935+11	90BE  E5      					PUSH	HL
  51:  946+17	90BF  CD7E99  					CALL	moveCursor
  52:  963+10	90C2  216791  					LD		HL, pacman
  53:  973+17	90C5  CDF099  					CALL 	print
  54:  990+10	90C8  C9      					RET
  55:     -	90C9          	getPMMapData:	
  56: 1000+13	90C9  3A0081  					LD		A, (pacx)
  57: 1013+4	90CC  4F      					LD		C,A
  58: 1017+13	90CD  3A0181  					LD		A, (pacy)
  59: 1030+4	90D0  47      					LD		B,A
  60: 1034+17	90D1  CDA797  					CALL	getMapAddress
  61: 1051+7	90D4  7E      	                LD      A,(HL)
  62: 1058+10	90D5  C9      					ret
  63:     -	90D6          	eatPellet:		;Eat pellet at packman location
  64: 1068+17	90D6  CDC990  					CALL 	getPMMapData
  65: 1085+8	90D9  CB6F    					BIT		pelletBit,A
  66: 1093+7+5	90DB  2005    					JR		NZ,eatSPellet
  67: 1100+8	90DD  CB67    	                BIT		powerPBit,A
  68: 1108+7+5	90DF  200D    					JR		NZ,eatPPellet
  69: 1115+10	90E1  C9      					RET
  70:								
  71:     -	90E2          	eatSPellet:		
  72: 1125+11	90E2  E5      					PUSH	HL		
  73: 1136+16	90E3  2A0089  					LD		HL,(score)
  74: 1152+6	90E6  23      					INC		HL
  75: 1158+16	90E7  220089  					LD		(score),HL
  76: 1174+10	90EA  E1      					POP		HL
  77: 1184+15	90EB  CBAE    					RES		pelletBit,(HL)
  78: 1199+10	90ED  C9      					RET
  79:				
  80:     -	90EE          	eatPPellet:		
  81: 1209+7	90EE  3E20    					LD      A,pPelletTics
  82: 1216+13	90F0  320481  	                LD      (pPActive),A
  83: 1229+15	90F3  CBA6    	                RES		powerPBit,(HL)
  84: 1244+10	90F5  C9      					RET
  85:								
  86:     -	90F6          	getMove:		;Sets the current move var
  87: 1254+17	90F6  CDC990  					CALL	getPMMapData
  88: 1271+4	90F9  57      					LD		D,A
  89: 1275+13	90FA  3A0381  					LD		A,(pacNDir)			;Is the next move valid
  90: 1288+17	90FD  CD8197  					CALL	isMoveValid
  91: 1305+7+5	9100  2009    					JR		NZ,nextMoveValid
  92: 1312+13	9102  3A0281  					LD		A,(pacCDir)			;Is the current move valid
  93: 1325+17	9105  CD8197  					CALL	isMoveValid
  94: 1342+5+6	9108  C0      					RET		NZ
  95: 1347+12	9109  1807    					JR		calcNextMove
  96:								
  97:     -	910B          	nextMoveValid:
  98: 1359+13	910B  320281  					LD		(pacCDir),A
  99: 1372+13	910E  320381  					LD		(pacNDir),A
 100: 1385+10	9111  C9      					RET
 101:								
 102:     -	9112          	calcNextMove:	
 103: 1395+7	9112  FE41    					CP		'A'
 104: 1402+7+5	9114  2814    					JR		Z,checkV
 105: 1409+7	9116  FE44    					CP		'D'
 106: 1416+7+5	9118  2810    					JR		Z,checkV
 107: 1423+12	911A  1800    					JR		checkH
 108:     -	911C          	checkH:
 109: 1435+7	911C  3E41    					LD		A,'A'
 110: 1442+17	911E  CD8197  					CALL	isMoveValid
 111: 1459+7+5	9121  20E8    					JR		NZ,nextMoveValid
 112: 1466+7	9123  3E44    					LD		A,'D'
 113: 1473+17	9125  CD8197  					CALL	isMoveValid
 114: 1490+7+5	9128  20E1    					JR		NZ,nextMoveValid
 115:     -	912A          	checkV:
 116: 1497+7	912A  3E57    					LD		A,'W'
 117: 1504+17	912C  CD8197  					CALL	isMoveValid
 118: 1521+7+5	912F  20DA    					JR		NZ,nextMoveValid
 119: 1528+7	9131  3E53    					LD		A,'S'
 120: 1535+17	9133  CD8197  					CALL	isMoveValid
 121: 1552+7+5	9136  20D3    					JR		NZ,nextMoveValid
 122: 1559+12	9138  18E2    					JR		checkH
 123:				;Move
 124:     -	913A          	movePM:
 125: 1571+13	913A  3A0481  					LD      A,(pPActive)
 126: 1584+4	913D  B7      	                OR      A
 127: 1588+10	913E  CA4591  	                JP      Z,movePMA
 128: 1598+4	9141  3D      	                DEC     A
 129: 1602+13	9142  320481  	                LD      (pPActive),A
 130: 1615+13	9145  3A0281  	movePMA:        LD		A,(pacCDir)
 131: 1628+10	9148  110081  					LD		DE,pacx
 132: 1638+10	914B  010181  					LD		BC,pacy
 133: 1648+10	914E  C35B97  					JP		move
 134:				
 135:     -	9151          	killPacman:
 136: 1658+10	9151  E1      					POP		HL
 137: 1668+10	9152  E1      					POP		HL
 138: 1678+13	9153  3A0581  					LD		A,(pacLives)
 139: 1691+4	9156  3D      					DEC		A
 140: 1695+4	9157  B7      					OR		A
 141: 1699+10	9158  CA5B90  					JP		Z,endGame
 142: 1709+13	915B  320581  					LD		(pacLives),A
 143: 1722+17	915E  CD8590  					CALL	resetPacMan
 144: 1739+17	9161  CDA691  					CALL	initGhost
 145: 1756+10	9164  C31F90  					JP		gameLoop
 146:				
**** main.asm ****
  58:     -	9167  1B5B3933	pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
	              6D431B5B
	              306D00
  59:				;------------Ghost
  60:				include ghosts.asm
**** ghosts.asm ****
   1:     -	8113          	ghostDis		.EQU	8113H		;ghost move distance from pacman
   2:     -	0020          	caughtJaleTime  .EQU    20H
   3:				
   4:     -	9172          	ghostNextMove:
   5: 1766+17	9172  CDA992  	                CALL    rGhostNextMove
   6: 1783+17	9175  CDED93  	                CALL    oGhostNextMove
   7: 1800+17	9178  CD3195  	                CALL    pGhostNextMove
   8: 1817+17	917B  CD7596  	                CALL    tGhostNextMove
   9: 1834+10	917E  C9      	                RET
  10:     -	917F          	clearGhost:
  11: 1844+17	917F  CD3592  	                CALL    rGhostClear
  12: 1861+17	9182  CD7993  	                CALL    oGhostClear
  13: 1878+17	9185  CDBD94  	                CALL    pGhostClear
  14: 1895+17	9188  CD0196  	                CALL    tGhostClear
  15: 1912+10	918B  C9      	                RET
  16:     -	918C          	printGhost:
  17: 1922+17	918C  CD4192  	                CALL    rGhostPrint
  18: 1939+17	918F  CD8593  	                CALL    oGhostPrint
  19: 1956+17	9192  CDC994  	                CALL    pGhostPrint
  20: 1973+17	9195  CD0D96  	                CALL    tGhostPrint
  21: 1990+10	9198  C9      	                RET
  22:     -	9199          	colideGhost:
  23: 2000+17	9199  CD3793  	                CALL    rGhostColide
  24: 2017+17	919C  CD7B94  	                CALL    oGhostColide
  25: 2034+17	919F  CDBF95  	                CALL    pGhostColide
  26: 2051+17	91A2  CD0397  	                CALL    tGhostColide
  27: 2068+10	91A5  C9      	                RET
  28:     -	91A6          	initGhost:
  29: 2078+17	91A6  CD6F92  	                CALL    rGhostInit
  30: 2095+17	91A9  CDB393  	                CALL    oGhostInit
  31: 2112+17	91AC  CDF794  	                CALL    pGhostInit
  32: 2129+17	91AF  CD3B96  	                CALL    tGhostInit
  33: 2146+10	91B2  C9      	                RET
  34:     -	91B3          	moveGhost:
  35: 2156+17	91B3  CD7F92  	                CALL    rGhostMove
  36: 2173+17	91B6  CDC393  	                CALL    oGhostMove
  37: 2190+17	91B9  CD0795  	                CALL    pGhostMove
  38: 2207+17	91BC  CD4B96  	                CALL    tGhostMove
  39: 2224+10	91BF  C9      	                RET
  40:				
  41:     -	91C0          	printSGhost:
  42: 2234+8	91C0  CB47    	                BIT     0,A
  43: 2242+10	91C2  CACC91  	                JP      Z,sGhost1Print
  44: 2252+10	91C5  214597  	                LD		HL, sGhost0
  45: 2262+17	91C8  CDF099  					CALL 	print
  46: 2279+10	91CB  C9      					RET
  47:     -	91CC          	sGhost1Print:
  48: 2289+10	91CC  215097  	                LD		HL, sGhost1
  49: 2299+17	91CF  CDF099  					CALL 	print
  50: 2316+10	91D2  C9      					RET
  51:				
  52:     -	91D3          	ghostMove:
  53: 2326+7	91D3  FE57    					CP		'W'
  54: 2333+7+5	91D5  280A    					JR		Z,ghostMoveU
  55: 2340+7	91D7  FE41    					CP		'A'
  56: 2347+7+5	91D9  281E    					JR		Z,ghostMoveL
  57: 2354+7	91DB  FE53    					CP		'S'
  58: 2361+7+5	91DD  280E    					JR		Z,ghostMoveD
  59: 2368+12	91DF  1824    					JR		ghostMoveR
  60:				
  61:     -	91E1          	ghostMoveU:			
  62: 2380+7	91E1  1A      					LD      A, (DE)
  63: 2387+4	91E2  6F      	                LD      L,A         ;ld x
  64: 2391+7	91E3  0A      	                LD		A, (BC)
  65: 2398+4	91E4  3D      					DEC		A
  66: 2402+7	91E5  E61F    					AND		00011111B
  67: 2409+4	91E7  67      	                LD      H,A         ;ld y
  68: 2413+17	91E8  CD1192  	                CALL    ghostCheckStack
  69: 2430+7	91EB  02      					LD		(BC),A
  70: 2437+10	91EC  C9      					RET
  71:     -	91ED          	ghostMoveD:		
  72: 2447+7	91ED  1A      		            LD      A, (DE)
  73: 2454+4	91EE  6F      	                LD      L,A         ;ld x
  74: 2458+7	91EF  0A      					LD		A, (BC)
  75: 2465+4	91F0  3C      					INC		A
  76: 2469+7	91F1  E61F    					AND		00011111B
  77: 2476+4	91F3  67      	                LD      H,A         ;ld y
  78: 2480+17	91F4  CD1192  	                CALL    ghostCheckStack
  79: 2497+7	91F7  02      					LD		(BC),A
  80: 2504+10	91F8  C9      					RET
  81:     -	91F9          	ghostMoveL:		
  82: 2514+7	91F9  0A      	                LD      A, (BC)
  83: 2521+4	91FA  67      	                LD      H,A         ;ld y
  84: 2525+7	91FB  1A      					LD		A, (DE)
  85: 2532+4	91FC  3D      					DEC		A
  86: 2536+7	91FD  E61F    					AND		00011111B
  87: 2543+4	91FF  6F      	                LD      L,A         ;ld x
  88: 2547+17	9200  CD1192  	                CALL    ghostCheckStack
  89: 2564+7	9203  12      					LD		(DE),A
  90: 2571+10	9204  C9      					RET
  91:     -	9205          	ghostMoveR:		
  92: 2581+7	9205  0A      	                LD      A, (BC)
  93: 2588+4	9206  67      	                LD      H,A         ;ld y
  94: 2592+7	9207  1A      					LD		A, (DE)
  95: 2599+4	9208  3C      					INC		A
  96: 2603+7	9209  E61F    					AND		00011111B
  97: 2610+4	920B  6F      	                LD      L,A         ;ld x
  98: 2614+17	920C  CD1192  	                CALL    ghostCheckStack
  99: 2631+7	920F  12      					LD		(DE),A
 100: 2638+10	9210  C9      					RET
 101:     -	9211          	ghostCheckStack:
 102: 2648+11	9211  F5      	                PUSH   AF
 103: 2659+11	9212  C5      	                PUSH   BC
 104: 2670+11	9213  D5      	                PUSH   DE
 105: 2681+17	9214  CD6093  	                CALL   rGhostStack
 106: 2698+10	9217  CA3092  	                JP     Z,ghostDoStack
 107: 2708+17	921A  CDA494  	                CALL   oGhostStack
 108: 2725+10	921D  CA3092  	                JP     Z,ghostDoStack
 109: 2735+17	9220  CDE895  	                CALL   pGhostStack
 110: 2752+10	9223  CA3092  	                JP     Z,ghostDoStack
 111: 2762+17	9226  CD2C97  	                CALL   tGhostStack
 112: 2779+10	9229  CA3092  	                JP     Z,ghostDoStack
 113: 2789+10	922C  D1      	                POP    DE
 114: 2799+10	922D  C1      	                POP    BC
 115: 2809+10	922E  F1      	                POP    AF
 116: 2819+10	922F  C9      	                RET
 117:     -	9230          	ghostDoStack:   
 118: 2829+10	9230  D1      	                POP    DE
 119: 2839+10	9231  C1      	                POP    BC
 120: 2849+10	9232  F1      	                POP    AF
 121: 2859+10	9233  F1      	                POP    AF
 122: 2869+10	9234  C9      	                RET
 123:				                
 124:				include ghosts/red.asm
**** ghosts/red.asm ****
   1:     -	000F          	rGhostInitX	    .EQU	15
   2:     -	0008          	rGhostInitY	    .EQU	8
   3:     -	0010          	rGhostInitTimer .EQU    10H
   4:     -	000E          	rGhostStoreX	.EQU	14
   5:     -	000B          	rGhostStoreY	.EQU	11
   6:				
   7:     -	8110          	rGhostX		    .EQU	8110H		
   8:     -	8111          	rGhostY		    .EQU	8111H
   9:     -	8112          	rGhostDir		.EQU	8112H
  10:     -	8115          	rGhostTimer     .EQU    8115H
  11:				
  12:     -	9235          	rGhostClear:
  13: 2879+13	9235  3A1081  					LD		A, (rGhostX)		;Push X to stack
  14: 2892+4	9238  4F      					LD		C,A
  15: 2896+13	9239  3A1181  					LD		A, (rGhostY)		;Push Y to stack
  16: 2909+4	923C  47      					LD		B,A
  17: 2913+17	923D  CDD797  					CALL 	printMapAt
  18: 2930+10	9240  C9      					RET
  19:								
  20:     -	9241          	rGhostPrint:
  21: 2940+13	9241  3A1081  					LD		A, (rGhostX)		;Push X to stack
  22: 2953+4	9244  3C      					INC		A
  23: 2957+4	9245  6F      					LD		L,A
  24: 2961+7	9246  2600    					LD		H, $00			;We dont care about msb
  25: 2968+11	9248  E5      					PUSH	HL
  26: 2979+13	9249  3A1181  					LD		A, (rGhostY)		;Push Y to stack
  27: 2992+4	924C  3C      					INC		A
  28: 2996+4	924D  6F      					LD		L,A
  29: 3000+7	924E  2600    					LD		H, $00			;Again we dont care
  30: 3007+11	9250  E5      					PUSH	HL
  31: 3018+17	9251  CD7E99  					CALL	moveCursor
  32: 3035+13	9254  3A0481  	                LD      A,(pPActive)
  33: 3048+4	9257  B7      	                OR      A
  34: 3052+10	9258  C2C091  	                JP      NZ, printSGhost
  35: 3062+10	925B  216E93  					LD		HL, rGhost
  36: 3072+17	925E  CDF099  					CALL 	print
  37: 3089+10	9261  C9      					RET
  38:     -	9262          	rGhostMapData:	
  39: 3099+13	9262  3A1081  					LD		A, (rGhostX)
  40: 3112+4	9265  4F      					LD		C,A
  41: 3116+13	9266  3A1181  					LD		A, (rGhostY)
  42: 3129+4	9269  47      					LD		B,A
  43: 3133+17	926A  CDA797  					CALL	getMapAddress
  44: 3150+7	926D  7E      	                LD      A,(HL)
  45: 3157+10	926E  C9      					ret
  46:				
  47:				
  48:     -	926F          	rGhostInit:   
  49: 3167+7	926F  3E0E    	                LD		a, rGhostStoreX	;set rGhost Pos
  50: 3174+13	9271  321081  				    LD		(rGhostX),a
  51: 3187+7	9274  3E0B    				    LD		a, rGhostStoreY
  52: 3194+13	9276  321181  				    LD		(rGhostY),a
  53: 3207+7	9279  3E10    	                LD		a, rGhostInitTimer
  54: 3214+13	927B  321581  				    LD		(rGhostTimer),a
  55: 3227+10	927E  C9      	                RET
  56:				
  57:     -	927F          	rGhostMove:
  58: 3237+13	927F  3A1581  	                LD      A,(rGhostTimer)     ;Dont move if the ghost is in jale
  59: 3250+4	9282  B7      	                OR      A                
  60: 3254+10	9283  C29892  	                JP      NZ,rGhostDecTimer   ;Decrement the timer if its x
  61: 3264+13	9286  3A0481  	                LD      A,(pPActive)
  62: 3277+8	9289  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 3285+5+6	928B  C0      	                RET     NZ
  64: 3290+13	928C  3A1281  					LD		A,(rGhostDir)
  65: 3303+10	928F  111081  					LD		DE,rGhostX
  66: 3313+10	9292  011181  					LD		BC,rGhostY
  67: 3323+10	9295  C3D391  					JP		ghostMove
  68:				
  69:				
  70:     -	9298          	rGhostDecTimer:
  71: 3333+4	9298  3D      	                DEC     A
  72: 3337+13	9299  321581  	                LD      (rGhostTimer),A
  73: 3350+4	929C  B7      	                OR      A
  74: 3354+5+6	929D  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  75: 3359+7	929E  3E0F    	                LD		a, rGhostInitX	;set rGhost Pos
  76: 3366+13	92A0  321081  				    LD		(rGhostX),a
  77: 3379+7	92A3  3E08    				    LD		a, rGhostInitY
  78: 3386+13	92A5  321181  				    LD		(rGhostY),a
  79: 3399+10	92A8  C9      	                RET
  80:				
  81:     -	92A9          	rGhostNextMove:
  82: 3409+7	92A9  3EFF    					LD		A, 0FFH
  83: 3416+13	92AB  321381  					LD		(ghostDis),A
  84: 3429+17	92AE  CD6292  					CALL	rGhostMapData
  85: 3446+4	92B1  57      					LD		D,A
  86: 3450+7	92B2  3E57    					LD		A,	'W'			;check up
  87: 3457+17	92B4  CD8197  					CALL	isMoveValid
  88: 3474+10+7	92B7  C4D392  					CALL	NZ,rGhostCheckU
  89: 3484+7	92BA  3E53    					LD		A,	'S'			;down
  90: 3491+17	92BC  CD8197  					CALL	isMoveValid
  91: 3508+10+7	92BF  C4E192  					CALL	NZ,rGhostCheckD
  92: 3518+7	92C2  3E41    					LD		A,	'A'			;left
  93: 3525+17	92C4  CD8197  					CALL	isMoveValid
  94: 3542+10+7	92C7  C4EF92  					CALL	NZ,rGhostCheckL
  95: 3552+7	92CA  3E44    					LD		A,	'D'			;right
  96: 3559+17	92CC  CD8197  					CALL	isMoveValid
  97: 3576+10+7	92CF  C4FD92  					CALL	NZ,rGhostCheckR
  98: 3586+10	92D2  C9      					RET
  99:								
 100:     -	92D3          	rGhostCheckU:	
 101: 3596+11	92D3  F5      					PUSH	AF
 102: 3607+13	92D4  3A1181  					LD		A, (rGhostY)
 103: 3620+4	92D7  3D      					DEC		A
 104: 3624+7	92D8  E61F    					AND		00011111B
 105: 3631+4	92DA  47      					LD		B,A
 106: 3635+13	92DB  3A1081  					LD		A,(rGhostX)
 107: 3648+4	92DE  4F      					LD		C,A
 108: 3652+12	92DF  182A    					JR		rGhostPathFind
 109:     -	92E1          	rGhostCheckD:			
 110: 3664+11	92E1  F5      					PUSH	AF
 111: 3675+13	92E2  3A1181  					LD		A, (rGhostY)
 112: 3688+4	92E5  3C      					INC		A
 113: 3692+7	92E6  E61F    					AND		00011111B
 114: 3699+4	92E8  47      					LD		B,A
 115: 3703+13	92E9  3A1081  					LD		A,(rGhostX)
 116: 3716+4	92EC  4F      					LD		C,A
 117: 3720+12	92ED  181C    					JR		rGhostPathFind
 118:     -	92EF          	rGhostCheckL:		
 119: 3732+11	92EF  F5      					PUSH	AF	
 120: 3743+13	92F0  3A1081  					LD		A, (rGhostX)
 121: 3756+4	92F3  3D      					DEC		A
 122: 3760+7	92F4  E61F    					AND		00011111B
 123: 3767+4	92F6  4F      					LD		C,A
 124: 3771+13	92F7  3A1181  					LD		A,(rGhostY)
 125: 3784+4	92FA  47      					LD		B,A
 126: 3788+12	92FB  180E    					JR		rGhostPathFind
 127:     -	92FD          	rGhostCheckR:
 128: 3800+11	92FD  F5      					PUSH	AF	
 129: 3811+13	92FE  3A1081  					LD		A, (rGhostX)
 130: 3824+4	9301  3C      					INC		A
 131: 3828+7	9302  E61F    					AND		00011111B
 132: 3835+4	9304  4F      					LD		C,A
 133: 3839+13	9305  3A1181  					LD		A,(rGhostY)
 134: 3852+4	9308  47      					LD		B,A
 135: 3856+12	9309  1800    					JR		rGhostPathFind
 136:				
 137:     -	930B          	rGhostPathFind:
 138: 3868+17	930B  CDBF97  					CALL	getAddressPF
 139: 3885+13	930E  3A1381  					LD		A,(ghostDis)
 140: 3898+7	9311  5E      					LD		E,(HL)
 141: 3905+4	9312  BB      					CP		E
 142: 3909+11	9313  F5      	                PUSH    AF
 143: 3920+13	9314  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 144: 3933+4	9317  B7      	                OR      A
 145: 3937+10	9318  C22293  	                JP      NZ,rGhostPFPP
 146: 3947+10	931B  F1      	                POP     AF
 147: 3957+10	931C  D22E93  					JP		NC,rGhostSetNewDir
 148: 3967+10	931F  F1      	                POP     AF
 149: 3977+10	9320  F1      					POP		AF
 150: 3987+10	9321  C9      					RET
 151:     -	9322          	rGhostPFPP:
 152: 3997+10	9322  F1      	                POP     AF
 153: 4007+10	9323  DA2E93  	                JP		C,rGhostSetNewDir
 154: 4017+7	9326  FEFF    	                CP      0FFH
 155: 4024+10	9328  CA2E93  	                JP      Z,rGhostSetNewDir
 156: 4034+10	932B  F1      	                POP     AF
 157: 4044+10	932C  F1      					POP		AF
 158: 4054+10	932D  C9      	                RET
 159:				
 160:     -	932E          	rGhostSetNewDir:
 161: 4064+4	932E  7B      					LD		A,E
 162: 4068+13	932F  321381  					LD		(ghostDis),A
 163: 4081+10	9332  F1      					POP		AF
 164: 4091+13	9333  321281  					LD		(rGhostDir),A
 165: 4104+10	9336  C9      					RET
 166:				
 167:     -	9337          	rGhostColide:   
 168: 4114+13	9337  3A0081  	                LD      A,(pacx)                ;Compair X
 169: 4127+4	933A  47      	                LD      B,A
 170: 4131+13	933B  3A1081  	                LD      A,(rGhostX)
 171: 4144+4	933E  B8      	                CP      B
 172: 4148+5+6	933F  C0      	                RET     NZ
 173: 4153+13	9340  3A0181  	                LD      A,(pacy)                ;Compair Y
 174: 4166+4	9343  47      	                LD      B,A
 175: 4170+13	9344  3A1181  	                LD      A,(rGhostY)
 176: 4183+4	9347  B8      	                CP      B
 177: 4187+5+6	9348  C0      	                RET     NZ
 178: 4192+13	9349  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 179: 4205+4	934C  B7      	                OR      A
 180: 4209+10	934D  CA5191  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 181: 4219+7	9350  3E0E    	                LD		a, rGhostStoreX	           ;set rGhost Pos
 182: 4226+13	9352  321081  				    LD		(rGhostX),a
 183: 4239+7	9355  3E0B    				    LD		a, rGhostStoreY
 184: 4246+13	9357  321181  				    LD		(rGhostY),a
 185: 4259+7	935A  3E10    	                LD		a, rGhostInitTimer
 186: 4266+13	935C  321581  				    LD		(rGhostTimer),a
 187: 4279+10	935F  C9      	                RET
 188:				;x = l
 189:				;y = h
 190:     -	9360          	rGhostStack:
 191: 4289+4	9360  7D      					LD      A,L               		;Compair X
 192: 4293+4	9361  47      	                LD      B,A
 193: 4297+13	9362  3A1081  	                LD      A,(rGhostX)
 194: 4310+4	9365  B8      	                CP      B
 195: 4314+5+6	9366  C0      	                RET     NZ
 196: 4319+4	9367  7C      	                LD      A,h                		;Compair Y
 197: 4323+4	9368  47      	                LD      B,A
 198: 4327+13	9369  3A1181  	                LD      A,(rGhostY)
 199: 4340+4	936C  B8      	                CP      B
 200: 4344+10	936D  C9      	                RET
 201:				
**** ghosts.asm ****
 125:     -	936E  1B5B3931	rGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 126:				include ghosts/orange.asm
**** ghosts/orange.asm ****
   1:     -	000F          	oGhostInitX	    .EQU	15
   2:     -	0008          	oGhostInitY	    .EQU	8
   3:     -	0020          	oGhostInitTimer .EQU    20H
   4:     -	000F          	oGhostStoreX	.EQU	15
   5:     -	000B          	oGhostStoreY	.EQU	11
   6:				
   7:     -	8120          	oGhostX		    .EQU	8120H		
   8:     -	8121          	oGhostY		    .EQU	8121H
   9:     -	8122          	oGhostDir		.EQU	8122H
  10:     -	8125          	oGhostTimer     .EQU    8125H
  11:				
  12:     -	9379          	oGhostClear:
  13: 4354+13	9379  3A2081  					LD		A, (oGhostX)		;Push X to stack
  14: 4367+4	937C  4F      					LD		C,A
  15: 4371+13	937D  3A2181  					LD		A, (oGhostY)		;Push Y to stack
  16: 4384+4	9380  47      					LD		B,A
  17: 4388+17	9381  CDD797  					CALL 	printMapAt
  18: 4405+10	9384  C9      					RET
  19:								
  20:     -	9385          	oGhostPrint:
  21: 4415+13	9385  3A2081  					LD		A, (oGhostX)		;Push X to stack
  22: 4428+4	9388  3C      					INC		A
  23: 4432+4	9389  6F      					LD		L,A
  24: 4436+7	938A  2600    					LD		H, $00			;We dont care about msb
  25: 4443+11	938C  E5      					PUSH	HL
  26: 4454+13	938D  3A2181  					LD		A, (oGhostY)		;Push Y to stack
  27: 4467+4	9390  3C      					INC		A
  28: 4471+4	9391  6F      					LD		L,A
  29: 4475+7	9392  2600    					LD		H, $00			;Again we dont care
  30: 4482+11	9394  E5      					PUSH	HL
  31: 4493+17	9395  CD7E99  					CALL	moveCursor
  32: 4510+13	9398  3A0481  	                LD      A,(pPActive)
  33: 4523+4	939B  B7      	                OR      A
  34: 4527+10	939C  C2C091  	                JP      NZ, printSGhost
  35: 4537+10	939F  21B294  					LD		HL, oGhost
  36: 4547+17	93A2  CDF099  					CALL 	print
  37: 4564+10	93A5  C9      					RET
  38:     -	93A6          	oGhostMapData:	
  39: 4574+13	93A6  3A2081  					LD		A, (oGhostX)
  40: 4587+4	93A9  4F      					LD		C,A
  41: 4591+13	93AA  3A2181  					LD		A, (oGhostY)
  42: 4604+4	93AD  47      					LD		B,A
  43: 4608+17	93AE  CDA797  					CALL	getMapAddress
  44: 4625+7	93B1  7E      	                LD      A,(HL)
  45: 4632+10	93B2  C9      					ret
  46:				
  47:				
  48:     -	93B3          	oGhostInit:   
  49: 4642+7	93B3  3E0F    	                LD		a, oGhostStoreX	;set oGhost Pos
  50: 4649+13	93B5  322081  				    LD		(oGhostX),a
  51: 4662+7	93B8  3E0B    				    LD		a, oGhostStoreY
  52: 4669+13	93BA  322181  				    LD		(oGhostY),a
  53: 4682+7	93BD  3E20    	                LD		a, oGhostInitTimer
  54: 4689+13	93BF  322581  				    LD		(oGhostTimer),a
  55: 4702+10	93C2  C9      	                RET
  56:				
  57:     -	93C3          	oGhostMove:
  58: 4712+13	93C3  3A2581  	                LD      A,(oGhostTimer)     ;Dont move if the ghost is in jale
  59: 4725+4	93C6  B7      	                OR      A                
  60: 4729+10	93C7  C2DC93  	                JP      NZ,oGhostDecTimer   ;Decrement the timer if its x
  61: 4739+13	93CA  3A0481  	                LD      A,(pPActive)
  62: 4752+8	93CD  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 4760+5+6	93CF  C0      	                RET     NZ
  64: 4765+13	93D0  3A2281  					LD		A,(oGhostDir)
  65: 4778+10	93D3  112081  					LD		DE,oGhostX
  66: 4788+10	93D6  012181  					LD		BC,oGhostY
  67: 4798+10	93D9  C3D391  					JP		ghostMove
  68:				
  69:     -	93DC          	oGhostDecTimer:
  70: 4808+4	93DC  3D      	                DEC     A
  71: 4812+13	93DD  322581  	                LD      (oGhostTimer),A
  72: 4825+4	93E0  B7      	                OR      A
  73: 4829+5+6	93E1  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  74: 4834+7	93E2  3E0F    	                LD		a, oGhostInitX	;set oGhost Pos
  75: 4841+13	93E4  322081  				    LD		(oGhostX),a
  76: 4854+7	93E7  3E08    				    LD		a, oGhostInitY
  77: 4861+13	93E9  322181  				    LD		(oGhostY),a
  78: 4874+10	93EC  C9      	                RET
  79:				
  80:     -	93ED          	oGhostNextMove:
  81: 4884+7	93ED  3EFF    					LD		A, 0FFH
  82: 4891+13	93EF  321381  					LD		(ghostDis),A
  83: 4904+17	93F2  CDA693  					CALL	oGhostMapData
  84: 4921+4	93F5  57      					LD		D,A
  85: 4925+7	93F6  3E57    					LD		A,	'W'			;check up
  86: 4932+17	93F8  CD8197  					CALL	isMoveValid
  87: 4949+10+7	93FB  C41794  					CALL	NZ,oGhostCheckU
  88: 4959+7	93FE  3E53    					LD		A,	'S'			;down
  89: 4966+17	9400  CD8197  					CALL	isMoveValid
  90: 4983+10+7	9403  C42594  					CALL	NZ,oGhostCheckD
  91: 4993+7	9406  3E41    					LD		A,	'A'			;left
  92: 5000+17	9408  CD8197  					CALL	isMoveValid
  93: 5017+10+7	940B  C43394  					CALL	NZ,oGhostCheckL
  94: 5027+7	940E  3E44    					LD		A,	'D'			;right
  95: 5034+17	9410  CD8197  					CALL	isMoveValid
  96: 5051+10+7	9413  C44194  					CALL	NZ,oGhostCheckR
  97: 5061+10	9416  C9      					RET
  98:								
  99:     -	9417          	oGhostCheckU:	
 100: 5071+11	9417  F5      					PUSH	AF
 101: 5082+13	9418  3A2181  					LD		A, (oGhostY)
 102: 5095+4	941B  3D      					DEC		A
 103: 5099+7	941C  E61F    					AND		00011111B
 104: 5106+4	941E  47      					LD		B,A
 105: 5110+13	941F  3A2081  					LD		A,(oGhostX)
 106: 5123+4	9422  4F      					LD		C,A
 107: 5127+12	9423  182A    					JR		oGhostPathFind
 108:     -	9425          	oGhostCheckD:			
 109: 5139+11	9425  F5      					PUSH	AF
 110: 5150+13	9426  3A2181  					LD		A, (oGhostY)
 111: 5163+4	9429  3C      					INC		A
 112: 5167+7	942A  E61F    					AND		00011111B
 113: 5174+4	942C  47      					LD		B,A
 114: 5178+13	942D  3A2081  					LD		A,(oGhostX)
 115: 5191+4	9430  4F      					LD		C,A
 116: 5195+12	9431  181C    					JR		oGhostPathFind
 117:     -	9433          	oGhostCheckL:		
 118: 5207+11	9433  F5      					PUSH	AF	
 119: 5218+13	9434  3A2081  					LD		A, (oGhostX)
 120: 5231+4	9437  3D      					DEC		A
 121: 5235+7	9438  E61F    					AND		00011111B
 122: 5242+4	943A  4F      					LD		C,A
 123: 5246+13	943B  3A2181  					LD		A,(oGhostY)
 124: 5259+4	943E  47      					LD		B,A
 125: 5263+12	943F  180E    					JR		oGhostPathFind
 126:     -	9441          	oGhostCheckR:
 127: 5275+11	9441  F5      					PUSH	AF	
 128: 5286+13	9442  3A2081  					LD		A, (oGhostX)
 129: 5299+4	9445  3C      					INC		A
 130: 5303+7	9446  E61F    					AND		00011111B
 131: 5310+4	9448  4F      					LD		C,A
 132: 5314+13	9449  3A2181  					LD		A,(oGhostY)
 133: 5327+4	944C  47      					LD		B,A
 134: 5331+12	944D  1800    					JR		oGhostPathFind
 135:				
 136:     -	944F          	oGhostPathFind:
 137: 5343+17	944F  CDBF97  					CALL	getAddressPF
 138: 5360+13	9452  3A1381  					LD		A,(ghostDis)
 139: 5373+7	9455  5E      					LD		E,(HL)
 140: 5380+4	9456  BB      					CP		E
 141: 5384+11	9457  F5      	                PUSH    AF
 142: 5395+13	9458  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 143: 5408+4	945B  B7      	                OR      A
 144: 5412+10	945C  C26694  	                JP      NZ,oGhostPFPP
 145: 5422+10	945F  F1      	                POP     AF
 146: 5432+10	9460  D27294  					JP		NC,oGhostSetNewDir
 147: 5442+10	9463  F1      	                POP     AF
 148: 5452+10	9464  F1      					POP		AF
 149: 5462+10	9465  C9      					RET
 150:     -	9466          	oGhostPFPP:
 151: 5472+10	9466  F1      	                POP     AF
 152: 5482+10	9467  DA7294  	                JP		C,oGhostSetNewDir
 153: 5492+7	946A  FEFF    	                CP      0FFH
 154: 5499+10	946C  CA7294  	                JP      Z,oGhostSetNewDir
 155: 5509+10	946F  F1      	                POP     AF
 156: 5519+10	9470  F1      					POP		AF
 157: 5529+10	9471  C9      	                RET
 158:				
 159:     -	9472          	oGhostSetNewDir:
 160: 5539+4	9472  7B      					LD		A,E
 161: 5543+13	9473  321381  					LD		(ghostDis),A
 162: 5556+10	9476  F1      					POP		AF
 163: 5566+13	9477  322281  					LD		(oGhostDir),A
 164: 5579+10	947A  C9      					RET
 165:				
 166:     -	947B          	oGhostColide:   
 167: 5589+13	947B  3A0081  	                LD      A,(pacx)                ;Compair X
 168:								;CALL	NumToHex
 169: 5602+4	947E  47      	                LD      B,A
 170: 5606+13	947F  3A2081  	                LD      A,(oGhostX)
 171:								;CALL	NumToHex
 172: 5619+4	9482  B8      	                CP      B
 173: 5623+5+6	9483  C0      	                RET     NZ
 174: 5628+13	9484  3A0181  	                LD      A,(pacy)                ;Compair Y
 175:								;CALL	NumToHex
 176: 5641+4	9487  47      	                LD      B,A
 177: 5645+13	9488  3A2181  	                LD      A,(oGhostY)
 178:								;CALL	NumToHex
 179: 5658+4	948B  B8      	                CP      B
 180: 5662+5+6	948C  C0      	                RET     NZ
 181: 5667+13	948D  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 182: 5680+4	9490  B7      	                OR      A
 183: 5684+10	9491  CA5191  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 184: 5694+7	9494  3E0F    	                LD		a, oGhostStoreX	           ;set oGhost Pos
 185: 5701+13	9496  322081  				    LD		(oGhostX),a
 186: 5714+7	9499  3E0B    				    LD		a, oGhostStoreY
 187: 5721+13	949B  322181  				    LD		(oGhostY),a
 188: 5734+7	949E  3E20    	                LD		a, oGhostInitTimer
 189: 5741+13	94A0  322581  				    LD		(oGhostTimer),a
 190: 5754+10	94A3  C9      	                RET
 191:				;x = l
 192:				;y = h
 193:     -	94A4          	oGhostStack:
 194: 5764+4	94A4  7D      					LD      A,L               		;Compair X
 195: 5768+4	94A5  47      	                LD      B,A
 196: 5772+13	94A6  3A2081  	                LD      A,(oGhostX)
 197: 5785+4	94A9  B8      	                CP      B
 198: 5789+5+6	94AA  C0      	                RET     NZ
 199: 5794+4	94AB  7C      	                LD      A,h                		;Compair Y
 200: 5798+4	94AC  47      	                LD      B,A
 201: 5802+13	94AD  3A2181  	                LD      A,(oGhostY)
 202: 5815+4	94B0  B8      	                CP      B
 203: 5819+10	94B1  C9      	                RET
 204:				
**** ghosts.asm ****
 127:     -	94B2  1B5B3333	oGhost:		.BYTE	1BH,"[33mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 128:				include ghosts/pink.asm
**** ghosts/pink.asm ****
   1:     -	000F          	pGhostInitX	    .EQU	15
   2:     -	0008          	pGhostInitY	    .EQU	8
   3:     -	0030          	pGhostInitTimer .EQU    30H
   4:     -	0010          	pGhostStoreX	.EQU	16
   5:     -	000B          	pGhostStoreY	.EQU	11
   6:				
   7:     -	8130          	pGhostX		    .EQU	8130H		
   8:     -	8131          	pGhostY		    .EQU	8131H
   9:     -	8132          	pGhostDir		.EQU	8132H
  10:     -	8135          	pGhostTimer     .EQU    8135H
  11:				
  12:     -	94BD          	pGhostClear:
  13: 5829+13	94BD  3A3081  					LD		A, (pGhostX)		;Push X to stack
  14: 5842+4	94C0  4F      					LD		C,A
  15: 5846+13	94C1  3A3181  					LD		A, (pGhostY)		;Push Y to stack
  16: 5859+4	94C4  47      					LD		B,A
  17: 5863+17	94C5  CDD797  					CALL 	printMapAt
  18: 5880+10	94C8  C9      					RET
  19:								
  20:     -	94C9          	pGhostPrint:
  21: 5890+13	94C9  3A3081  					LD		A, (pGhostX)		;Push X to stack
  22: 5903+4	94CC  3C      					INC		A
  23: 5907+4	94CD  6F      					LD		L,A
  24: 5911+7	94CE  2600    					LD		H, $00			;We dont care about msb
  25: 5918+11	94D0  E5      					PUSH	HL
  26: 5929+13	94D1  3A3181  					LD		A, (pGhostY)		;Push Y to stack
  27: 5942+4	94D4  3C      					INC		A
  28: 5946+4	94D5  6F      					LD		L,A
  29: 5950+7	94D6  2600    					LD		H, $00			;Again we dont care
  30: 5957+11	94D8  E5      					PUSH	HL
  31: 5968+17	94D9  CD7E99  					CALL	moveCursor
  32: 5985+13	94DC  3A0481  	                LD      A,(pPActive)
  33: 5998+4	94DF  B7      	                OR      A
  34: 6002+10	94E0  C2C091  	                JP      NZ, printSGhost
  35: 6012+10	94E3  21F695  					LD		HL, pGhost
  36: 6022+17	94E6  CDF099  					CALL 	print
  37: 6039+10	94E9  C9      					RET
  38:     -	94EA          	pGhostMapData:	
  39: 6049+13	94EA  3A3081  					LD		A, (pGhostX)
  40: 6062+4	94ED  4F      					LD		C,A
  41: 6066+13	94EE  3A3181  					LD		A, (pGhostY)
  42: 6079+4	94F1  47      					LD		B,A
  43: 6083+17	94F2  CDA797  					CALL	getMapAddress
  44: 6100+7	94F5  7E      	                LD      A,(HL)
  45: 6107+10	94F6  C9      					ret
  46:				
  47:				
  48:     -	94F7          	pGhostInit:   
  49: 6117+7	94F7  3E10    	                LD		a, pGhostStoreX	;set pGhost Pos
  50: 6124+13	94F9  323081  				    LD		(pGhostX),a
  51: 6137+7	94FC  3E0B    				    LD		a, pGhostStoreY
  52: 6144+13	94FE  323181  				    LD		(pGhostY),a
  53: 6157+7	9501  3E30    	                LD		a, pGhostInitTimer
  54: 6164+13	9503  323581  				    LD		(pGhostTimer),a
  55: 6177+10	9506  C9      	                RET
  56:				
  57:     -	9507          	pGhostMove:
  58: 6187+13	9507  3A3581  	                LD      A,(pGhostTimer)     ;Dont move if the ghost is in jale
  59: 6200+4	950A  B7      	                OR      A                
  60: 6204+10	950B  C22095  	                JP      NZ,pGhostDecTimer   ;Decrement the timer if its x
  61: 6214+13	950E  3A0481  	                LD      A,(pPActive)
  62: 6227+8	9511  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 6235+5+6	9513  C0      	                RET     NZ
  64: 6240+13	9514  3A3281  					LD		A,(pGhostDir)
  65: 6253+10	9517  113081  					LD		DE,pGhostX
  66: 6263+10	951A  013181  					LD		BC,pGhostY
  67: 6273+10	951D  C3D391  					JP		ghostMove
  68:				
  69:				
  70:     -	9520          	pGhostDecTimer:
  71: 6283+4	9520  3D      	                DEC     A
  72: 6287+13	9521  323581  	                LD      (pGhostTimer),A
  73: 6300+4	9524  B7      	                OR      A
  74: 6304+5+6	9525  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  75: 6309+7	9526  3E0F    	                LD		a, pGhostInitX	;set pGhost Pos
  76: 6316+13	9528  323081  				    LD		(pGhostX),a
  77: 6329+7	952B  3E08    				    LD		a, pGhostInitY
  78: 6336+13	952D  323181  				    LD		(pGhostY),a
  79: 6349+10	9530  C9      	                RET
  80:				
  81:     -	9531          	pGhostNextMove:
  82: 6359+7	9531  3EFF    					LD		A, 0FFH
  83: 6366+13	9533  321381  					LD		(ghostDis),A
  84: 6379+17	9536  CDEA94  					CALL	pGhostMapData
  85: 6396+4	9539  57      					LD		D,A
  86: 6400+7	953A  3E57    					LD		A,	'W'			;check up
  87: 6407+17	953C  CD8197  					CALL	isMoveValid
  88: 6424+10+7	953F  C45B95  					CALL	NZ,pGhostCheckU
  89: 6434+7	9542  3E53    					LD		A,	'S'			;down
  90: 6441+17	9544  CD8197  					CALL	isMoveValid
  91: 6458+10+7	9547  C46995  					CALL	NZ,pGhostCheckD
  92: 6468+7	954A  3E41    					LD		A,	'A'			;left
  93: 6475+17	954C  CD8197  					CALL	isMoveValid
  94: 6492+10+7	954F  C47795  					CALL	NZ,pGhostCheckL
  95: 6502+7	9552  3E44    					LD		A,	'D'			;right
  96: 6509+17	9554  CD8197  					CALL	isMoveValid
  97: 6526+10+7	9557  C48595  					CALL	NZ,pGhostCheckR
  98: 6536+10	955A  C9      					RET
  99:								
 100:     -	955B          	pGhostCheckU:	
 101: 6546+11	955B  F5      					PUSH	AF
 102: 6557+13	955C  3A3181  					LD		A, (pGhostY)
 103: 6570+4	955F  3D      					DEC		A
 104: 6574+7	9560  E61F    					AND		00011111B
 105: 6581+4	9562  47      					LD		B,A
 106: 6585+13	9563  3A3081  					LD		A,(pGhostX)
 107: 6598+4	9566  4F      					LD		C,A
 108: 6602+12	9567  182A    					JR		pGhostPathFind
 109:     -	9569          	pGhostCheckD:			
 110: 6614+11	9569  F5      					PUSH	AF
 111: 6625+13	956A  3A3181  					LD		A, (pGhostY)
 112: 6638+4	956D  3C      					INC		A
 113: 6642+7	956E  E61F    					AND		00011111B
 114: 6649+4	9570  47      					LD		B,A
 115: 6653+13	9571  3A3081  					LD		A,(pGhostX)
 116: 6666+4	9574  4F      					LD		C,A
 117: 6670+12	9575  181C    					JR		pGhostPathFind
 118:     -	9577          	pGhostCheckL:		
 119: 6682+11	9577  F5      					PUSH	AF	
 120: 6693+13	9578  3A3081  					LD		A, (pGhostX)
 121: 6706+4	957B  3D      					DEC		A
 122: 6710+7	957C  E61F    					AND		00011111B
 123: 6717+4	957E  4F      					LD		C,A
 124: 6721+13	957F  3A3181  					LD		A,(pGhostY)
 125: 6734+4	9582  47      					LD		B,A
 126: 6738+12	9583  180E    					JR		pGhostPathFind
 127:     -	9585          	pGhostCheckR:
 128: 6750+11	9585  F5      					PUSH	AF	
 129: 6761+13	9586  3A3081  					LD		A, (pGhostX)
 130: 6774+4	9589  3C      					INC		A
 131: 6778+7	958A  E61F    					AND		00011111B
 132: 6785+4	958C  4F      					LD		C,A
 133: 6789+13	958D  3A3181  					LD		A,(pGhostY)
 134: 6802+4	9590  47      					LD		B,A
 135: 6806+12	9591  1800    					JR		pGhostPathFind
 136:				
 137:     -	9593          	pGhostPathFind:
 138: 6818+17	9593  CDBF97  					CALL	getAddressPF
 139: 6835+13	9596  3A1381  					LD		A,(ghostDis)
 140: 6848+7	9599  5E      					LD		E,(HL)
 141: 6855+4	959A  BB      					CP		E
 142: 6859+11	959B  F5      	                PUSH    AF
 143: 6870+13	959C  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 144: 6883+4	959F  B7      	                OR      A
 145: 6887+10	95A0  C2AA95  	                JP      NZ,pGhostPFPP
 146: 6897+10	95A3  F1      	                POP     AF
 147: 6907+10	95A4  D2B695  					JP		NC,pGhostSetNewDir
 148: 6917+10	95A7  F1      	                POP     AF
 149: 6927+10	95A8  F1      					POP		AF
 150: 6937+10	95A9  C9      					RET
 151:     -	95AA          	pGhostPFPP:
 152: 6947+10	95AA  F1      	                POP     AF
 153: 6957+10	95AB  DAB695  	                JP		C,pGhostSetNewDir
 154: 6967+7	95AE  FEFF    	                CP      0FFH
 155: 6974+10	95B0  CAB695  	                JP      Z,pGhostSetNewDir
 156: 6984+10	95B3  F1      	                POP     AF
 157: 6994+10	95B4  F1      					POP		AF
 158: 7004+10	95B5  C9      	                RET
 159:				
 160:     -	95B6          	pGhostSetNewDir:
 161: 7014+4	95B6  7B      					LD		A,E
 162: 7018+13	95B7  321381  					LD		(ghostDis),A
 163: 7031+10	95BA  F1      					POP		AF
 164: 7041+13	95BB  323281  					LD		(pGhostDir),A
 165: 7054+10	95BE  C9      					RET
 166:				
 167:     -	95BF          	pGhostColide:   
 168: 7064+13	95BF  3A0081  	                LD      A,(pacx)                ;Compair X
 169:								;CALL	NumToHex
 170: 7077+4	95C2  47      	                LD      B,A
 171: 7081+13	95C3  3A3081  	                LD      A,(pGhostX)
 172:								;CALL	NumToHex
 173: 7094+4	95C6  B8      	                CP      B
 174: 7098+5+6	95C7  C0      	                RET     NZ
 175: 7103+13	95C8  3A0181  	                LD      A,(pacy)                ;Compair Y
 176:								;CALL	NumToHex
 177: 7116+4	95CB  47      	                LD      B,A
 178: 7120+13	95CC  3A3181  	                LD      A,(pGhostY)
 179:								;CALL	NumToHex
 180: 7133+4	95CF  B8      	                CP      B
 181: 7137+5+6	95D0  C0      	                RET     NZ
 182: 7142+13	95D1  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 183: 7155+4	95D4  B7      	                OR      A
 184: 7159+10	95D5  CA5191  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 185: 7169+7	95D8  3E10    	                LD		a, pGhostStoreX	           ;set pGhost Pos
 186: 7176+13	95DA  323081  				    LD		(pGhostX),a
 187: 7189+7	95DD  3E0B    				    LD		a, pGhostStoreY
 188: 7196+13	95DF  323181  				    LD		(pGhostY),a
 189: 7209+7	95E2  3E30    	                LD		a, pGhostInitTimer
 190: 7216+13	95E4  323581  				    LD		(pGhostTimer),a
 191: 7229+10	95E7  C9      	                RET
 192:				
 193:				;x = l
 194:				;y = h
 195:     -	95E8          	pGhostStack:
 196: 7239+4	95E8  7D      					LD      A,L               		;Compair X
 197: 7243+4	95E9  47      	                LD      B,A
 198: 7247+13	95EA  3A3081  	                LD      A,(pGhostX)
 199: 7260+4	95ED  B8      	                CP      B
 200: 7264+5+6	95EE  C0      	                RET     NZ
 201: 7269+4	95EF  7C      	                LD      A,h                		;Compair Y
 202: 7273+4	95F0  47      	                LD      B,A
 203: 7277+13	95F1  3A3181  	                LD      A,(pGhostY)
 204: 7290+4	95F4  B8      	                CP      B
 205: 7294+10	95F5  C9      	                RET
 206:				
**** ghosts.asm ****
 129:     -	95F6  1B5B3935	pGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 130:				include ghosts/teal.asm
**** ghosts/teal.asm ****
   1:     -	000F          	tGhostInitX	    .EQU	15
   2:     -	0008          	tGhostInitY	    .EQU	8
   3:     -	0040          	tGhostInitTimer .EQU    40H
   4:     -	0011          	tGhostStoreX	.EQU	17 
   5:     -	000B          	tGhostStoreY	.EQU	11
   6:				
   7:     -	8140          	tGhostX		    .EQU	8140H		
   8:     -	8141          	tGhostY		    .EQU	8141H
   9:     -	8142          	tGhostDir		.EQU	8142H
  10:     -	8145          	tGhostTimer     .EQU    8145H
  11:				
  12:     -	9601          	tGhostClear:
  13: 7304+13	9601  3A4081  					LD		A, (tGhostX)		;Push X to stack
  14: 7317+4	9604  4F      					LD		C,A
  15: 7321+13	9605  3A4181  					LD		A, (tGhostY)		;Push Y to stack
  16: 7334+4	9608  47      					LD		B,A
  17: 7338+17	9609  CDD797  					CALL 	printMapAt
  18: 7355+10	960C  C9      					RET
  19:								
  20:     -	960D          	tGhostPrint:
  21: 7365+13	960D  3A4081  					LD		A, (tGhostX)		;Push X to stack
  22: 7378+4	9610  3C      					INC		A
  23: 7382+4	9611  6F      					LD		L,A
  24: 7386+7	9612  2600    					LD		H, $00			;We dont care about msb
  25: 7393+11	9614  E5      					PUSH	HL
  26: 7404+13	9615  3A4181  					LD		A, (tGhostY)		;Push Y to stack
  27: 7417+4	9618  3C      					INC		A
  28: 7421+4	9619  6F      					LD		L,A
  29: 7425+7	961A  2600    					LD		H, $00			;Again we dont care
  30: 7432+11	961C  E5      					PUSH	HL
  31: 7443+17	961D  CD7E99  					CALL	moveCursor
  32: 7460+13	9620  3A0481  	                LD      A,(pPActive)
  33: 7473+4	9623  B7      	                OR      A
  34: 7477+10	9624  C2C091  	                JP      NZ, printSGhost
  35: 7487+10	9627  213A97  					LD		HL, tGhost
  36: 7497+17	962A  CDF099  					CALL 	print
  37: 7514+10	962D  C9      					RET
  38:     -	962E          	tGhostMapData:	
  39: 7524+13	962E  3A4081  					LD		A, (tGhostX)
  40: 7537+4	9631  4F      					LD		C,A
  41: 7541+13	9632  3A4181  					LD		A, (tGhostY)
  42: 7554+4	9635  47      					LD		B,A
  43: 7558+17	9636  CDA797  					CALL	getMapAddress
  44: 7575+7	9639  7E      	                LD      A,(HL)
  45: 7582+10	963A  C9      					ret
  46:				
  47:     -	963B          	tGhostInit:   
  48: 7592+7	963B  3E11    	                LD		a, tGhostStoreX	;set tGhost Pos
  49: 7599+13	963D  324081  				    LD		(tGhostX),a
  50: 7612+7	9640  3E0B    				    LD		a, tGhostStoreY
  51: 7619+13	9642  324181  				    LD		(tGhostY),a
  52: 7632+7	9645  3E40    	                LD		a, tGhostInitTimer
  53: 7639+13	9647  324581  				    LD		(tGhostTimer),a
  54: 7652+10	964A  C9      	                RET
  55:				
  56:     -	964B          	tGhostMove:
  57: 7662+13	964B  3A4581  	                LD      A,(tGhostTimer)     ;Dont move if the ghost is in jale
  58: 7675+4	964E  B7      	                OR      A                
  59: 7679+10	964F  C26496  	                JP      NZ,tGhostDecTimer   ;Decrement the timer if its x
  60: 7689+13	9652  3A0481  	                LD      A,(pPActive)
  61: 7702+8	9655  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  62: 7710+5+6	9657  C0      	                RET     NZ
  63: 7715+13	9658  3A4281  					LD		A,(tGhostDir)
  64: 7728+10	965B  114081  					LD		DE,tGhostX
  65: 7738+10	965E  014181  					LD		BC,tGhostY
  66: 7748+10	9661  C3D391  					JP		ghostMove
  67:				
  68:     -	9664          	tGhostDecTimer:
  69: 7758+4	9664  3D      	                DEC     A
  70: 7762+13	9665  324581  	                LD      (tGhostTimer),A
  71: 7775+4	9668  B7      	                OR      A
  72: 7779+5+6	9669  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  73: 7784+7	966A  3E0F    	                LD		a, tGhostInitX	;set tGhost Pos
  74: 7791+13	966C  324081  				    LD		(tGhostX),a
  75: 7804+7	966F  3E08    				    LD		a, tGhostInitY
  76: 7811+13	9671  324181  				    LD		(tGhostY),a
  77: 7824+10	9674  C9      	                RET
  78:				
  79:     -	9675          	tGhostNextMove:
  80: 7834+7	9675  3EFF    					LD		A, 0FFH
  81: 7841+13	9677  321381  					LD		(ghostDis),A
  82: 7854+17	967A  CD2E96  					CALL	tGhostMapData
  83: 7871+4	967D  57      					LD		D,A
  84: 7875+7	967E  3E57    					LD		A,	'W'			;check up
  85: 7882+17	9680  CD8197  					CALL	isMoveValid
  86: 7899+10+7	9683  C49F96  					CALL	NZ,tGhostCheckU
  87: 7909+7	9686  3E53    					LD		A,	'S'			;down
  88: 7916+17	9688  CD8197  					CALL	isMoveValid
  89: 7933+10+7	968B  C4AD96  					CALL	NZ,tGhostCheckD
  90: 7943+7	968E  3E41    					LD		A,	'A'			;left
  91: 7950+17	9690  CD8197  					CALL	isMoveValid
  92: 7967+10+7	9693  C4BB96  					CALL	NZ,tGhostCheckL
  93: 7977+7	9696  3E44    					LD		A,	'D'			;right
  94: 7984+17	9698  CD8197  					CALL	isMoveValid
  95: 8001+10+7	969B  C4C996  					CALL	NZ,tGhostCheckR
  96: 8011+10	969E  C9      					RET
  97:								
  98:     -	969F          	tGhostCheckU:	
  99: 8021+11	969F  F5      					PUSH	AF
 100: 8032+13	96A0  3A4181  					LD		A, (tGhostY)
 101: 8045+4	96A3  3D      					DEC		A
 102: 8049+7	96A4  E61F    					AND		00011111B
 103: 8056+4	96A6  47      					LD		B,A
 104: 8060+13	96A7  3A4081  					LD		A,(tGhostX)
 105: 8073+4	96AA  4F      					LD		C,A
 106: 8077+12	96AB  182A    					JR		tGhostPathFind
 107:     -	96AD          	tGhostCheckD:			
 108: 8089+11	96AD  F5      					PUSH	AF
 109: 8100+13	96AE  3A4181  					LD		A, (tGhostY)
 110: 8113+4	96B1  3C      					INC		A
 111: 8117+7	96B2  E61F    					AND		00011111B
 112: 8124+4	96B4  47      					LD		B,A
 113: 8128+13	96B5  3A4081  					LD		A,(tGhostX)
 114: 8141+4	96B8  4F      					LD		C,A
 115: 8145+12	96B9  181C    					JR		tGhostPathFind
 116:     -	96BB          	tGhostCheckL:		
 117: 8157+11	96BB  F5      					PUSH	AF	
 118: 8168+13	96BC  3A4081  					LD		A, (tGhostX)
 119: 8181+4	96BF  3D      					DEC		A
 120: 8185+7	96C0  E61F    					AND		00011111B
 121: 8192+4	96C2  4F      					LD		C,A
 122: 8196+13	96C3  3A4181  					LD		A,(tGhostY)
 123: 8209+4	96C6  47      					LD		B,A
 124: 8213+12	96C7  180E    					JR		tGhostPathFind
 125:     -	96C9          	tGhostCheckR:
 126: 8225+11	96C9  F5      					PUSH	AF	
 127: 8236+13	96CA  3A4081  					LD		A, (tGhostX)
 128: 8249+4	96CD  3C      					INC		A
 129: 8253+7	96CE  E61F    					AND		00011111B
 130: 8260+4	96D0  4F      					LD		C,A
 131: 8264+13	96D1  3A4181  					LD		A,(tGhostY)
 132: 8277+4	96D4  47      					LD		B,A
 133: 8281+12	96D5  1800    					JR		tGhostPathFind
 134:				
 135:     -	96D7          	tGhostPathFind:
 136: 8293+17	96D7  CDBF97  					CALL	getAddressPF
 137: 8310+13	96DA  3A1381  					LD		A,(ghostDis)
 138: 8323+7	96DD  5E      					LD		E,(HL)
 139: 8330+4	96DE  BB      					CP		E
 140: 8334+11	96DF  F5      	                PUSH    AF
 141: 8345+13	96E0  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 142: 8358+4	96E3  B7      	                OR      A
 143: 8362+10	96E4  C2EE96  	                JP      NZ,tGhostPFPP
 144: 8372+10	96E7  F1      	                POP     AF
 145: 8382+10	96E8  D2FA96  					JP		NC,tGhostSetNewDir
 146: 8392+10	96EB  F1      	                POP     AF
 147: 8402+10	96EC  F1      					POP		AF
 148: 8412+10	96ED  C9      					RET
 149:     -	96EE          	tGhostPFPP:
 150: 8422+10	96EE  F1      	                POP     AF
 151: 8432+10	96EF  DAFA96  	                JP		C,tGhostSetNewDir
 152: 8442+7	96F2  FEFF    	                CP      0FFH
 153: 8449+10	96F4  CAFA96  	                JP      Z,tGhostSetNewDir
 154: 8459+10	96F7  F1      	                POP     AF
 155: 8469+10	96F8  F1      					POP		AF
 156: 8479+10	96F9  C9      	                RET
 157:				
 158:     -	96FA          	tGhostSetNewDir:
 159: 8489+4	96FA  7B      					LD		A,E
 160: 8493+13	96FB  321381  					LD		(ghostDis),A
 161: 8506+10	96FE  F1      					POP		AF
 162: 8516+13	96FF  324281  					LD		(tGhostDir),A
 163: 8529+10	9702  C9      					RET
 164:				
 165:     -	9703          	tGhostColide:   
 166: 8539+13	9703  3A0081  	                LD      A,(pacx)                ;Compair X
 167:								;CALL	NumToHex
 168: 8552+4	9706  47      	                LD      B,A
 169: 8556+13	9707  3A4081  	                LD      A,(tGhostX)
 170:								;CALL	NumToHex
 171: 8569+4	970A  B8      	                CP      B
 172: 8573+5+6	970B  C0      	                RET     NZ
 173: 8578+13	970C  3A0181  	                LD      A,(pacy)                ;Compair Y
 174:								;CALL	NumToHex
 175: 8591+4	970F  47      	                LD      B,A
 176: 8595+13	9710  3A4181  	                LD      A,(tGhostY)
 177:								;CALL	NumToHex
 178: 8608+4	9713  B8      	                CP      B
 179: 8612+5+6	9714  C0      	                RET     NZ
 180: 8617+13	9715  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 181: 8630+4	9718  B7      	                OR      A
 182: 8634+10	9719  CA5191  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 183: 8644+7	971C  3E11    	                LD		a, tGhostStoreX	           ;set tGhost Pos
 184: 8651+13	971E  324081  				    LD		(tGhostX),a
 185: 8664+7	9721  3E0B    				    LD		a, tGhostStoreY
 186: 8671+13	9723  324181  				    LD		(tGhostY),a
 187: 8684+7	9726  3E40    	                LD		a, tGhostInitTimer
 188: 8691+13	9728  324581  				    LD		(tGhostTimer),a
 189: 8704+10	972B  C9      	                RET
 190:				
 191:				;x = l
 192:				;y = h
 193:     -	972C          	tGhostStack:
 194: 8714+4	972C  7D      					LD      A,L               		;Compair X
 195: 8718+4	972D  47      	                LD      B,A
 196: 8722+13	972E  3A4081  	                LD      A,(tGhostX)
 197: 8735+4	9731  B8      	                CP      B
 198: 8739+5+6	9732  C0      	                RET     NZ
 199: 8744+4	9733  7C      	                LD      A,h                		;Compair Y
 200: 8748+4	9734  47      	                LD      B,A
 201: 8752+13	9735  3A4181  	                LD      A,(tGhostY)
 202: 8765+4	9738  B8      	                CP      B
 203: 8769+10	9739  C9      	                RET
 204:				
**** ghosts.asm ****
 131:     -	973A  1B5B3936	tGhost:		.BYTE	1BH,"[96mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 132:				
 133:				
 134:     -	9745  1B5B3334	sGhost0:	.BYTE	1BH,"[34mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
**** main.asm ****
  61:     -	9750  1B5B3937	sGhost1:	.BYTE	1BH,"[97mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
  62:				;-----------Spesific Libs -----;
  63:				include movelibs.asm	
**** movelibs.asm ****
   1:     -	975B          	move:
   2: 8779+7	975B  FE57    					CP		'W'
   3: 8786+7+5	975D  280A    					JR		Z,moveU
   4: 8793+7	975F  FE41    					CP		'A'
   5: 8800+7+5	9761  2812    					JR		Z,moveL
   6: 8807+7	9763  FE53    					CP		'S'
   7: 8814+7+5	9765  2808    					JR		Z,moveD
   8: 8821+12	9767  1812    					JR		moveR
   9:				
  10:     -	9769          	moveU:			
  11: 8833+7	9769  0A      					LD		A, (BC)
  12: 8840+4	976A  3D      					DEC		A
  13: 8844+7	976B  E61F    					AND		00011111B
  14: 8851+7	976D  02      					LD		(BC),A
  15: 8858+10	976E  C9      					RET
  16:     -	976F          	moveD:			
  17: 8868+7	976F  0A      					LD		A, (BC)
  18: 8875+4	9770  3C      					INC		A
  19: 8879+7	9771  E61F    					AND		00011111B
  20: 8886+7	9773  02      					LD		(BC),A
  21: 8893+10	9774  C9      					RET
  22:     -	9775          	moveL:			
  23: 8903+7	9775  1A      					LD		A, (DE)
  24: 8910+4	9776  3D      					DEC		A
  25: 8914+7	9777  E61F    					AND		00011111B
  26: 8921+7	9779  12      					LD		(DE),A
  27: 8928+10	977A  C9      					RET
  28:     -	977B          	moveR:			
  29: 8938+7	977B  1A      					LD		A, (DE)
  30: 8945+4	977C  3C      					INC		A
  31: 8949+7	977D  E61F    					AND		00011111B
  32: 8956+7	977F  12      					LD		(DE),A
  33: 8963+10	9780  C9      					RET
  34:     -	9781          	isMoveValid:
  35: 8973+7	9781  FE57    					CP		'W'
  36: 8980+7+5	9783  280A    					JR		Z,moveUValid
  37: 8987+7	9785  FE41    					CP		'A'
  38: 8994+7+5	9787  280C    					JR		Z,moveLValid
  39: 9001+7	9789  FE53    					CP		'S'
  40: 9008+7+5	978B  2805    					JR		Z,moveDValid
  41: 9015+12	978D  1809    					JR		moveRValid
  42:     -	978F          	moveUValid:			
  43: 9027+8	978F  CB42    					BIT		upBit,D
  44: 9035+10	9791  C9      					RET
  45:     -	9792          	moveDValid:			
  46: 9045+8	9792  CB4A    					BIT		downBit,D
  47: 9053+10	9794  C9      					RET
  48:     -	9795          	moveLValid:			
  49: 9063+8	9795  CB52    					BIT		leftBit,D
  50: 9071+10	9797  C9      					RET
  51:     -	9798          	moveRValid:			
  52: 9081+8	9798  CB5A    					BIT		rightBit,D
**** main.asm ****
  64: 9089+10	979A  C9      					RET
  65:				include	mapLibs.asm	
**** mapLibs.asm ****
   1:     -	0030          	pathFindDepth   .EQU	30H
   2:				
   3:				;-------- Map -------;
   4:				;InitiMap
   5:     -	979B          	initMap:
   6: 9099+10	979B  010004  					LD		BC,400H
   7: 9109+10	979E  2100C0  					LD		HL,map
   8: 9119+10	97A1  1100E0  					LD		DE,liveMap
   9: 9129+16+5	97A4  EDB0    					LDIR
  10: 9145+10	97A6  C9      					RET
  11:				
  12:				;------- Get Map Data ----;
  13:				; C - X
  14:				; B	- Y
  15:     -	97A7          	getMapAddress:
  16: 9155+11	97A7  C5      					push	bc
  17: 9166+8	97A8  CB00    					rlc		b			;Shift b left 5
  18: 9174+8	97AA  CB00    					rlc		b			;Shift b left 5
  19: 9182+8	97AC  CB00    					rlc		b			;Shift b left 5
  20: 9190+8	97AE  CB00    					rlc		b			;Shift b left 5
  21: 9198+8	97B0  CB00    					rlc		b			;Shift b left 5
  22: 9206+4	97B2  78      					ld		a,b
  23: 9210+7	97B3  E6E0    					and		11100000b	;Mask lower adress
  24: 9217+4	97B5  B1      					or		c			;Combine with C
  25: 9221+4	97B6  6F      					ld		l,a			;A is now low byte of adress
  26: 9225+4	97B7  78      					ld		a,b
  27: 9229+7	97B8  E603    					and		00000011b	;Mask upper adress
  28: 9236+7	97BA  F6E0    					or		0E0H		;Start of map
  29: 9243+4	97BC  67      					ld		h,a
  30: 9247+10	97BD  C1      					pop		bc
  31: 9257+10	97BE  C9      					ret
  32:				
  33:				;------- Get Path Find Map Address----;
  34:				; C - X
  35:				; B	- Y
  36:     -	97BF          	getAddressPF:
  37: 9267+11	97BF  C5      					push	bc
  38: 9278+8	97C0  CB00    					rlc		b			;Shift b left 5
  39: 9286+8	97C2  CB00    					rlc		b			;Shift b left 5
  40: 9294+8	97C4  CB00    					rlc		b			;Shift b left 5
  41: 9302+8	97C6  CB00    					rlc		b			;Shift b left 5
  42: 9310+8	97C8  CB00    					rlc		b			;Shift b left 5
  43: 9318+4	97CA  78      					ld		a,b
  44: 9322+7	97CB  E6E0    					and		11100000b	;Mask lower adress
  45: 9329+4	97CD  B1      					or		c			;Combine with C
  46: 9333+4	97CE  6F      					ld		l,a			;A is now low byte of adress
  47: 9337+4	97CF  78      					ld		a,b
  48: 9341+7	97D0  E603    					and		00000011b	;Mask upper adress
  49: 9348+7	97D2  F6D0    					or		0D0H		;Start of map
  50: 9355+4	97D4  67      					ld		h,a
  51: 9359+10	97D5  C1      					pop		bc
  52: 9369+10	97D6  C9      					ret
  53:				
  54:				
  55:				;--------- Map print -------- ;
  56:				; C - X
  57:				; B	- Y
  58:     -	97D7          	printMapAt:	
  59: 9379+11	97D7  C5      				PUSH	BC
  60: 9390+4	97D8  0C      				INC		C
  61: 9394+4	97D9  69      				LD		L,C
  62: 9398+7	97DA  2600    				LD		H, $00			;We dont care about msb
  63: 9405+11	97DC  E5      				PUSH	HL
  64: 9416+4	97DD  04      				INC		B
  65: 9420+4	97DE  68      				LD		L,B
  66: 9424+7	97DF  2600    				LD		H, $00			;Again we dont care
  67: 9431+11	97E1  E5      				PUSH	HL
  68: 9442+17	97E2  CD7E99  				CALL	moveCursor
  69: 9459+10	97E5  C1      				POP 	BC
  70: 9469+17	97E6  CDA797  				CALL	getMapAddress
  71: 9486+7	97E9  7E      				LD		A,(HL)
  72: 9493+17	97EA  CD0998  				CALL	pmChar
  73: 9510+10	97ED  C9      				RET
  74:				
  75:     -	97EE          	printMap:
  76: 9520+7	97EE  3E20    					ld		a,32
  77: 9527+4	97F0  47      					ld		b,a			; 32 chars per line
  78: 9531+4	97F1  4F      					ld		c,a			; 32 lines per map
  79: 9535+10	97F2  2100E0  					ld		hl,liveMap
  80: 9545+7	97F5  7E      	pmLoop:			ld		a,(hl)		; get char
  81: 9552+17	97F6  CD0998  					call	pmChar		; decode what to print
  82: 9569+6	97F9  23      					inc		hl			; next char
  83: 9575+8+5	97FA  10F9    					djnz	pmLoop		; if were not at the end of a line, print next char
  84: 9583+17	97FC  CD7599  					call	newline		; if we are, print a new line
  85: 9600+4	97FF  41      					ld		b,c			;are we at the end of a block
  86: 9604+8+5	9800  1001    					djnz	pmNextLine
  87: 9612+10	9802  C9      					ret
  88:     -	9803          	pmNextLine:	
  89: 9622+4	9803  48      					ld		c,b			;copy decremented b back to c
  90: 9626+7	9804  3E20    					ld 		a,32		;refill b withj 32
  91: 9633+4	9806  47      					ld		b,a
  92: 9637+12	9807  18EC    					jr		pmLoop		;draw next char
  93:				
  94:				
  95:     -	9809          	pmChar:		;-- Print map char a
  96: 9649+11	9809  E5      					push	hl
  97: 9660+8	980A  CB67    					bit		powerpBit,a
  98: 9668+7+5	980C  200E    					jr		nz,printPP
  99: 9675+8	980E  CB6F    					bit		pelletBit,a
 100: 9683+7+5	9810  2012    					jr		nz,printP
 101: 9690+8	9812  CB77    					bit		wallBit,a
 102: 9698+7+5	9814  2016    					jr		nz,printWall
 103: 9705+8	9816  CB7F    					bit		sfBit,a
 104: 9713+7+5	9818  201A    					jr		nz,printSF
 105: 9720+12	981A  1820    					jr	 	printVoid
 106:							
 107:     -	981C          	printPP:
 108: 9732+10	981C  210D9A  					ld		hl,powerPellet
 109: 9742+17	981F  CDF099  					call	print
 110: 9759+12	9822  1820    					jr		pmCharRet
 111:     -	9824          	printP:
 112: 9771+10	9824  21189A  					ld		hl,pellet
 113: 9781+17	9827  CDF099  					call	print
 114: 9798+12	982A  1818    					jr		pmCharRet
 115:     -	982C          	printWall:
 116: 9810+10	982C  21029A  					ld		hl,wall
 117: 9820+17	982F  CDF099  					call	print
 118: 9837+12	9832  1810    					jr		pmCharRet
 119:     -	9834          	printSF:
 120: 9849+10	9834  21239A  					ld		hl,superFruit
 121: 9859+17	9837  CDF099  					call	print
 122: 9876+12	983A  1808    					jr		pmCharRet
 123:     -	983C          	printVoid:
 124: 9888+10	983C  212E9A  					ld		hl,void
 125: 9898+17	983F  CDF099  					call	print
 126: 9915+12	9842  1800    					jr		pmCharRet
 127:     -	9844          	pmCharRet:	
 128: 9927+10	9844  E1      					pop 	hl
 129: 9937+10	9845  C9      					ret
 130:								
 131:				;-------- Path Find Map -------;
 132:				;Initi Path Find Map
 133:     -	9846          	initPathFind:
 134: 9947+7	9846  3E20    					ld		a,32
 135: 9954+4	9848  47      					ld		b,a			; 32 chars per line
 136: 9958+4	9849  4F      					ld		c,a			; 32 lines per map
 137: 9962+10	984A  2100D0  					ld		hl,pathFindMap
 138: 9972+7	984D  16FF    	initpPFLoop:	ld		D,0FFH		; set char
 139: 9979+7	984F  72      					LD		(HL),D
 140: 9986+6	9850  23      					inc		hl			; next char
 141: 9992+8+5	9851  10FA    					djnz	initpPFLoop		; if were not at the end of a line, print next char
 142:10000+4	9853  41      					ld		b,c			;are we at the end of a block
 143:10004+8+5	9854  1001    					djnz	pfNextRow
 144:10012+10	9856  C9      					ret
 145:     -	9857          	pfNextRow:	
 146:10022+4	9857  48      					ld		c,b			;copy decremented b back to c
 147:10026+7	9858  3E20    					ld 		a,32		;refill b withj 32
 148:10033+4	985A  47      					ld		b,a
 149:10037+10	985B  C34D98  					jp		initpPFLoop		;draw next char
 150:				
 151:				;Calculate Map
 152:     -	985E          	calculatePathMap:
 153:10047+10	985E  01FFFF  					ld		BC,0FFFFH		;Push Stack terminator		
 154:10057+11	9861  C5      					PUSH	BC
 155:10068+13	9862  3A0081  					LD		A, (pacx)		;Push X to stack
 156:10081+4	9865  4F      					LD		C,A
 157:10085+13	9866  3A0181  					LD		A, (pacy)		;Push Y to stack
 158:10098+4	9869  47      					LD		B,A
 159:10102+17	986A  CDBF97  					CALL	getAddressPF
 160:10119+10	986D  3600    					LD		(HL),00H
 161:10129+11	986F  C5      					PUSH	BC
 162:     -	9870          	calculatePathMapLoop:
 163:10140+10	9870  C1      					POP		BC			;Get node to visit
 164:10150+4	9871  78      					LD		A,B			;Check Its not FFFF
 165:10154+4	9872  B7      					OR		A
 166:10158+7	9873  FEFF    					CP		0FFH
 167:10165+5+6	9875  C8      					RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
 168:10170+20	9876  ED43F289					LD		(originalBC),BC
 169:10190+17	987A  CDBF97  					CALL	getAddressPF
 170:10207+7	987D  7E      					LD		A,(HL)
 171:10214+4	987E  3C      					INC		A
 172:10218+7	987F  FE30    	                CP      pathFindDepth
 173:10225+10	9881  CA7098  					JP 		Z,calculatePathMapLoop	;Skip if wer getting too long
 174:10235+4	9884  5F      					LD		E,A			;Keep the distance were working with safe
 175:10239+17	9885  CDA797  					CALL	getMapAddress
 176:10256+7	9888  56      					LD		D,(HL)
 177:10263+7	9889  3E57    					LD		A,	'W'			;check up
 178:10270+17	988B  CD8197  					CALL	isMoveValid
 179:10287+10+7	988E  C4AC98  					CALL	NZ,calculateMapU
 180:10297+7	9891  3E53    					LD		A,	'S'			;down
 181:10304+17	9893  CD8197  					CALL	isMoveValid
 182:10321+10+7	9896  C4B898  					CALL	NZ,calculateMapD
 183:10331+7	9899  3E41    					LD		A,	'A'			;left
 184:10338+17	989B  CD8197  					CALL	isMoveValid
 185:10355+10+7	989E  C4C498  					CALL	NZ,calculateMapL
 186:10365+7	98A1  3E44    					LD		A,	'D'			;right
 187:10372+17	98A3  CD8197  					CALL	isMoveValid
 188:10389+10+7	98A6  C4D098  					CALL	NZ,calculateMapR
 189:10399+10	98A9  C37098  					JP		calculatePathMapLoop
 190:								
 191:     -	98AC          	calculateMapU:	
 192:10409+20	98AC  ED4BF289					LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
 193:10429+4	98B0  78      					LD		A, B				;Make modifications to corod
 194:10433+4	98B1  3D      					DEC		A
 195:10437+7	98B2  E61F    					AND		00011111B			;Mask for looping
 196:10444+4	98B4  47      					LD		B,A
 197:10448+10	98B5  C3DC98  					JP		calculateMapCell
 198:     -	98B8          	calculateMapD:	
 199:10458+20	98B8  ED4BF289					LD		BC,(originalBC)	
 200:10478+4	98BC  78      					LD		A, B
 201:10482+4	98BD  3C      					INC		A
 202:10486+7	98BE  E61F    					AND		00011111B
 203:10493+4	98C0  47      					LD		B,A
 204:10497+10	98C1  C3DC98  					JP		calculateMapCell
 205:     -	98C4          	calculateMapL:	
 206:10507+20	98C4  ED4BF289					LD		BC,(originalBC)
 207:10527+4	98C8  79      					LD		A, C
 208:10531+4	98C9  3D      					DEC		A
 209:10535+7	98CA  E61F    					AND		00011111B
 210:10542+4	98CC  4F      					LD		C,A
 211:10546+10	98CD  C3DC98  					JP		calculateMapCell
 212:     -	98D0          	calculateMapR:
 213:10556+20	98D0  ED4BF289					LD		BC,(originalBC)
 214:10576+4	98D4  79      					LD		A, C
 215:10580+4	98D5  3C      					INC		A
 216:10584+7	98D6  E61F    					AND		00011111B
 217:10591+4	98D8  4F      					LD		C,A
 218:10595+10	98D9  C3DC98  					JP		calculateMapCell
 219:				
 220:     -	98DC          	calculateMapCell:
 221:10605+17	98DC  CDBF97  					CALL	getAddressPF
 222:10622+7	98DF  7E      					LD		A,(HL)
 223:				
 224:10629+4	98E0  BB      					CP		E			;Compare current data (A) with E (the path were looking at)
 225:10633+5+6	98E1  D8      					RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
 226:10638+5+6	98E2  C8      					RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
 227:10643+7	98E3  73      					LD		(HL),E
 228:10650+10	98E4  E1      					POP		HL			;We need the return adress on the top of the stack
 229:10660+11	98E5  C5      					PUSH	BC			;Push Cell so it can be visited
 230:10671+11	98E6  E5      					PUSH	HL
 231:10682+10	98E7  C9      					RET
 232:				
 233:     -	98E8          	printPFMap:
 234:10692+10	98E8  210100  	                LD		HL, $01
 235:10702+11	98EB  E5      					PUSH	HL
 236:10713+10	98EC  211A00  					LD		HL, $1A
 237:10723+11	98EF  E5      					PUSH	HL
 238:10734+17	98F0  CD7E99  					CALL	moveCursor
 239:10751+7	98F3  3E20    					ld		a,32
 240:10758+4	98F5  47      					ld		b,a			; 32 chars per line
 241:10762+7	98F6  3E1A    	                ld		a,$1A
 242:10769+4	98F8  4F      					ld		c,a			; 32 lines per map
 243:10773+10	98F9  2100D0  					ld		hl,pathFindMap
 244:10783+7	98FC  7E      	pmPFLoop:		ld		a,(hl)		; get char
 245:10790+7	98FD  FEFF    	                cp      0FFH
 246:10797+10	98FF  CA1899  	                JP      Z,pmPFSkip
 247:10807+17	9902  CDC099  					call	NumToHex	; decode what to print
 248:10824+7	9905  3E20    	pmPFAfterSkip:  ld      a,' '
 249:10831+11	9907  CF      	                rst     08H
 250:10842+6	9908  23      					inc		hl			; next char
 251:10848+8+5	9909  10F1    					djnz	pmPFLoop		; if were not at the end of a line, print next char
 252:10856+17	990B  CD7599  					call	newline		; if we are, print a new line
 253:10873+4	990E  41      					ld		b,c			;are we at the end of a block
 254:10877+8+5	990F  1001    					djnz	pmPFNextLine
 255:10885+10	9911  C9      					ret
 256:     -	9912          	pmPFNextLine:	
 257:10895+4	9912  48      					ld		c,b			;copy decremented b back to c
 258:10899+7	9913  3E20    					ld 		a,32		;refill b withj 32
 259:10906+4	9915  47      					ld		b,a
 260:10910+12	9916  18E4    					jr		pmPFLoop	;draw next char
 261:     -	9918          	pmPFSkip:       
 262:10922+7	9918  3E20    	                ld      a,' '
 263:10929+11	991A  CF      	                rst     08H
 264:10940+7	991B  3E20    	                ld      a,' '
 265:10947+11	991D  CF      	                rst     08H
**** main.asm ****
  66:10958+10	991E  C30599  	                JP      pmPFAfterSkip
  67:				
  68:				;------HUD;
  69:				include hud.asm
**** hud.asm ****
   1:     -	8900          	score			.EQU	8900H		;Score
   2:				
   3:     -	9921          	printHud:
   4:10968+17	9921  CD2899  					CALL	printScore
   5:10985+17	9924  CD4699  					CALL	printLives
   6:11002+10	9927  C9      					RET
   7:     -	9928          	printScore:					
   8:11012+10	9928  210200  					LD		HL, $02
   9:11022+11	992B  E5      					PUSH	HL
  10:11033+10	992C  212300  					LD		HL, $23
  11:11043+11	992F  E5      					PUSH	HL
  12:11054+17	9930  CD7E99  					CALL	moveCursor
  13:11071+10	9933  216999  					LD		HL, scoreHUD
  14:11081+17	9936  CDF099  					CALL 	print
  15:11098+16	9939  2A0089  					LD		HL, (score)
  16:11114+17	993C  CD9599  					CALL	HLToDec
  17:11131+7	993F  3E0A    					LD		A,LF
  18:11138+11	9941  CF      					RST     08H
  19:11149+7	9942  3E0D    					LD		A,CR
  20:11156+11	9944  CF      					RST     08H
  21:11167+10	9945  C9      					RET
  22:				
  23:     -	9946          	printLives:					
  24:11177+10	9946  210200  					LD		HL, $02
  25:11187+11	9949  E5      					PUSH	HL
  26:11198+10	994A  212400  					LD		HL, $24
  27:11208+11	994D  E5      					PUSH	HL
  28:11219+17	994E  CD7E99  					CALL	moveCursor
  29:11236+13	9951  3A0581  					LD 		A,(pacLives)
  30:11249+4	9954  3D      					DEC		A
  31:11253+4	9955  B7      					OR		A
  32:11257+10	9956  CA6299  					JP		Z,removeOldLives
  33:11267+4	9959  47      					LD		B,A
  34:11271+10	995A  216791  	printLivesLoop:	LD		HL, pacman
  35:11281+17	995D  CDF099  					CALL 	print
  36:11298+8+5	9960  10F8    					DJNZ	printLivesLoop
  37:11306+10	9962  217199  	removeOldLives:	LD		HL, liveBlanking
  38:11316+17	9965  CDF099  					CALL 	print
  39:11333+10	9968  C9      					RET
  40:				
  41:     -	9969  53636F72	scoreHUD:     	.BYTE "Score: ",0
	              653A2000
**** main.asm ****
  70:     -	9971  20202000	liveBlanking	.BYTE "   ",0
  71:							
  72:				;------- Libs ------------;
  73:				include libs.asm
**** libs.asm ****
   1:     -	8888          	seed			.EQU	8888H		;Random seed
   2:				
   3:     -	9975          	newline:			
   4:11343+11	9975  F5      					push 	af
   5:11354+7	9976  3E0D    					ld		a, CR
   6:11361+11	9978  CF      					rst 	08H
   7:11372+7	9979  3E0A    					ld		a, LF
   8:11379+11	997B  CF      					rst 	08H
   9:11390+10	997C  F1      					pop 	af
  10:11400+10	997D  C9      					ret
  11:							
  12:				;move cursor to (sp,sp-2)				
  13:     -	997E          	moveCursor:		
  14:11410+10	997E  D1      					POP		DE
  15:11420+7	997F  3E1B    					LD		A,$1B
  16:11427+11	9981  CF      					RST     08H
  17:11438+7	9982  3E5B    					LD		A,'['
  18:11445+11	9984  CF      					RST     08H
  19:11456+10	9985  E1      					POP		HL
  20:11466+17	9986  CD9599  					CALL	HLToDec
  21:11483+7	9989  3E3B    					LD		A,$3B
  22:11490+11	998B  CF      					RST     08H
  23:11501+10	998C  E1      					POP		HL
  24:11511+17	998D  CD9599  					CALL	HLToDec
  25:11528+7	9990  3E66    					LD		A,'f'
  26:11535+11	9992  CF      					RST     08H
  27:11546+11	9993  D5      					PUSH	DE
  28:11557+10	9994  C9      					RET
  29:				
  30:				;Prints	hl as decimal			
  31:     -	9995          	HLToDec:
  32:11567+11	9995  F5      					PUSH	AF
  33:11578+11	9996  C5      					PUSH	BC
  34:11589+17	9997  CD9D99  					CALL	DispHL
  35:11606+10	999A  C1      					POP		BC
  36:11616+10	999B  F1      					POP		AF
  37:11626+10	999C  C9      					RET
  38:     -	999D          	DispHL:
  39:11636+10	999D  01F0D8  					ld		bc,-10000
  40:11646+17	99A0  CDB699  					call	Num1
  41:11663+10	99A3  0118FC  					ld		bc,-1000
  42:11673+17	99A6  CDB699  					call	Num1
  43:11690+10	99A9  019CFF  					ld		bc,-100
  44:11700+17	99AC  CDB699  					call	Num1
  45:11717+7	99AF  0EF6    					ld		c,-10
  46:11724+17	99B1  CDB699  					call	Num1
  47:11741+7	99B4  0EFF    					ld		c,-1
  48:11748+7	99B6  3E2F    	Num1:			ld		a,'0'-1
  49:11755+4	99B8  3C      	Num2:			inc		a
  50:11759+11	99B9  09      					add		hl,bc
  51:11770+7+5	99BA  38FC    					jr		c,Num2
  52:11777+15	99BC  ED42    					sbc		hl,bc
  53:11792+11	99BE  CF      					RST     08H
  54:11803+10	99BF  C9      					ret
  55:				;Print A as HEX				
  56:     -	99C0          	NumToHex:    	
  57:11813+11	99C0  C5      					push	bc
  58:11824+11	99C1  F5      	                push    af
  59:11835+4	99C2  4F      					ld 		c, a   		; a = number to convert
  60:11839+17	99C3  CDCF99  	            	call 	Num1H
  61:11856+11	99C6  CF      	            	RST     08H
  62:11867+4	99C7  79      	            	ld 		a, c
  63:11871+17	99C8  CDD399  	            	call 	Num2H
  64:11888+11	99CB  CF      	            	RST     08H
  65:11899+10	99CC  F1      	                pop     af
  66:11909+10	99CD  C1      					pop		bc
  67:11919+10	99CE  C9      	            	ret
  68:				
  69:11929+4	99CF  1F      	Num1H:        	rra
  70:11933+4	99D0  1F      	            	rra
  71:11937+4	99D1  1F      	            	rra
  72:11941+4	99D2  1F      	           		rra
  73:11945+7	99D3  F6F0    	Num2H:        	or 		$F0
  74:11952+4	99D5  27      	            	daa
  75:11956+7	99D6  C6A0    	            	add 	a, $A0
  76:11963+7	99D8  CE40    	            	adc 	a, $40 		; Ascii hex at this point (0 to F)   
  77:11970+10	99DA  C9      	            	ret
  78:				
  79:				;Get ABS of A
  80:     -	99DB          	absA:
  81:11980+4	99DB  B7      	     or a
  82:11984+5+6	99DC  F0      	     ret p
  83:11989+8	99DD  ED44    	     neg
  84:11997+10	99DF  C9      	     ret
  85:				
  86:				;getArAndomA	 
  87:     -	99E0          	randomA:				
  88:12007+13	99E0  3A8888  					ld a, 	(seed)
  89:12020+4	99E3  47      					ld b, 	a 
  90:				
  91:12024+4	99E4  0F      					rrca ; multiply by 32
  92:12028+4	99E5  0F      					rrca
  93:12032+4	99E6  0F      					rrca
  94:12036+7	99E7  EE1F    					xor $1f
  95:				
  96:12043+4	99E9  80      					add 	a, b
  97:12047+7	99EA  DEFF    					sbc a, 255 ; carry
  98:				
  99:12054+13	99EC  328888  					ld (seed), a
 100:12067+10	99EF  C9      					ret
 101:				
 102:				;------- Print string
 103:12077+11	99F0  F5      	print:			PUSH 	AF				; Preserve AF				
 104:12088+7	99F1  7E      	printLoop:      LD      A,(HL)          ; Get character
 105:12095+4	99F2  B7      	                OR      A               ; Is it $00 ?
 106:12099+7+5	99F3  2804    	                JR     	Z,printRet      ; Then RETurn on terminator
 107:12106+11	99F5  CF      	                RST     08H             ; Print it
 108:12117+6	99F6  23      	                INC     HL              ; Next Character
 109:12123+12	99F7  18F8    	                JR      printLoop       ; Continue until $00
 110:								
 111:				;delay loop
 112:     -	99F9          	printRet:		
 113:12135+10	99F9  F1      					POP		AF
 114:12145+10	99FA  C9      					RET
 115:     -	99FB          	delay:
 116:12155+4	99FB  00      					NOP
 117:12159+6	99FC  0B      					DEC 	BC
 118:12165+4	99FD  78      					LD 		A,B
 119:12169+4	99FE  B1      					OR 		C
 120:12173+5+6	99FF  C8      					RET 	Z
**** main.asm ****
  74:12178+12	9A00  18F9    					JR 		delay
  75:				
  76:				;Strings
  77:     -	9A02  1B5B3334	wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
	              6D231B5B
	              306D00
  78:     -	9A0D  1B5B3937	powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
	              6D6F1B5B
	              306D00
  79:     -	9A18  1B5B3337	pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
	              6D2A1B5B
	              306D00
  80:     -	9A23  1B5B3331	superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
	              6D401B5B
	              306D00
  81:     -	9A2E  2000    	void:			.BYTE	" ",0
  82:				
  83:     -	9A30  1B5B481B	cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
	              5B324A00
  84:     -	9A38  1B5B3F32	hideCursor:	  	.BYTE	1BH,"[?25l",0
	              356C00
  85:     -	9A3F  1B5B3F32	showCursor:	  	.BYTE	1BH,"[?25h",0
	              356800
  86:				
  87:				;----- Map ------		
  88:     -	C000          		.ORG 0C000H
  89:				include map.asm
**** map.asm ****
   1:				;----- Map data bit positions
   2:     -	0000          	upBit			.EQU	0
   3:     -	0001          	downBit			.EQU	1
   4:     -	0002          	leftBit			.EQU	2
   5:     -	0003          	rightBit		.EQU	3
   6:     -	0004          	powerpBit		.EQU	4
   7:     -	0005          	pelletBit		.EQU	5
   8:     -	0006          	wallBit			.EQU	6
   9:     -	0007          	sfBit			.EQU	7
  10:				
  11:				;----Pellet
  12:     -	0040          	ww 		.EQU	40H
  13:				
  14:     -	002C          	hp 		.EQU	2CH		;left 	right	pellet
  15:     -	0023          	gp		.EQU	23H		;up		down	pellet
  16:				
  17:     -	0026          	lp		.EQU	26H		;down 	left 	pellet
  18:     -	002A          	rp		.EQU	2AH		;down 	right	pellet
  19:     -	0025          	up		.EQU	25H		;up 	left	pellet
  20:     -	0029          	dp		.EQU	29H		;up 	right	pellet
  21:				
  22:     -	002B          	bp		.EQU	2BH		;up		down	right	pellet
  23:     -	0027          	cp		.EQU	27H		;up		down	left	pellet
  24:     -	002E          	vp		.EQU	2EH		;down	left	right	pellet
  25:     -	002D          	kp		.EQU	2DH		;up		left	right	pellet
  26:				
  27:     -	002F          	xp		.EQU	2FH		;all	pellet
  28:				;------- No pellet
  29:     -	000C          	hn 		.EQU	0CH		;left 	right	pellet
  30:     -	0003          	gn		.EQU	03H		;up		down	pellet
  31:				
  32:     -	0006          	ln		.EQU	06H		;down 	left 	pellet
  33:     -	000A          	rn		.EQU	0AH		;down 	right	pellet
  34:     -	0005          	un		.EQU	05H		;up 	left	pellet
  35:     -	0009          	dn		.EQU	09H		;up 	right	pellet
  36:				
  37:     -	000B          	bn		.EQU	0BH		;up		down	right	pellet
  38:     -	0007          	cn		.EQU	07H		;up		down	left	pellet
  39:     -	000E          	vn		.EQU	0EH		;down	left	right	pellet
  40:     -	000D          	kn		.EQU	0DH		;up		left	right	pellet
  41:				
  42:     -	000F          	xn		.EQU	0FH		;all	pellet
  43:				;--------Power Pellet
  44:     -	001C          	hs 		.EQU	1CH		;left 	right	pellet
  45:     -	0013          	gs		.EQU	13H		;up		down	pellet
  46:				
  47:     -	0016          	ls		.EQU	16H		;down 	left 	pellet
  48:     -	001A          	rs		.EQU	1AH		;down 	right	pellet
  49:     -	0015          	us		.EQU	15H		;up 	left	pellet
  50:     -	0019          	ds		.EQU	19H		;up 	right	pellet
  51:				
  52:     -	001B          	bs		.EQU	1BH		;up		down	right	pellet
  53:     -	0017          	cs		.EQU	17H		;up		down	left	pellet
  54:     -	001E          	vs		.EQU	1EH		;down	left	right	pellet
  55:     -	001D          	ks		.EQU	1DH		;up		left	right	pellet
  56:				
  57:     -	001F          	xs		.EQU	1FH		;all	pellet
  58:				
  59:				
  60:     -	C000  00004040	map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  61:     -	C020  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2E2C2C2C
	              2C2C2640
	              402A2C2C
	              2C2C2C2E
	              2C2C2C2C
	              26400000
  62:     -	C040  00004013			.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              13400000
  63:     -	C060  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  64:     -	C080  0000402B			.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
	              2C2C2C2C
	              2F2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C2F
	              2C2C2C2C
	              27400000
  65:     -	C0A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404023
	              40404040
	              40404040
	              23404023
	              40404040
	              23400000
  66:     -	C0C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              27404029
	              2C2C2640
	              402A2C2C
	              2540402B
	              2C2C2C2C
	              25400000
  67:     -	C0E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404040
	              40400340
	              40034040
	              40404023
	              40404040
	              40400000
  68:     -	C100  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404023
	              40000000
	              00000000
  69:     -	C120  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404000
	              00404040
	              03404023
	              40000000
	              00000000
  70:     -	C140  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  71:     -	C160  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              2F0C0C07
	              40000000
	              00000040
	              0B0C0C2F
	              0C0C0C0C
	              0C0C0C0C
  72:     -	C180  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  73:     -	C1A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404040
	              40404040
	              03404023
	              40000000
	              00000000
  74:     -	C1C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404023
	              40000000
	              00000000
  75:     -	C1E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404003
	              40404040
	              40404040
	              03404023
	              40404040
	              40400000
  76:     -	C200  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2F2C2C2D
	              2C2C2640
	              402A2C2C
	              2D2C2C2F
	              2C2C2C2C
	              26400000
  77:     -	C220  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  78:     -	C240  00004019			.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
	              2C264040
	              2B2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C27
	              40402A2C
	              15400000
  79:     -	C260  00004040			.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
	              40234040
	              23404023
	              40404040
	              40404040
	              23404023
	              40402340
	              40400000
  80:     -	C280  0000402A			.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
	              2C2D2C2C
	              25404029
	              2C2C2640
	              402A2C2C
	              25404029
	              2C2C2D2C
	              26400000
  81:     -	C2A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              40404040
	              40402340
	              40234040
	              40404040
	              40404040
	              23400000
  82:     -	C2C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              2C2C2C2C
	              2C2C2D2C
	              2C2D2C2C
	              2C2C2C2C
	              2C2C2C2C
	              25400000
  83:     -	C2E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  84:     -	C300  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  85:     -	C320  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  86:     -	C340  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  87:     -	C360  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  88:     -	C380  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  89:     -	C3A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  90:     -	C3C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
**** main.asm ****
  90:     -	C3E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  91:				
  92:				;-----Path find map
  93:     -	D000          	pathFindMap	.EQU	0D000H
  94:				
**** main.asm ****
  95:     -	E000          	liveMap		.EQU	0E000H



Statistics:

     4	passes
     0	jr promotions
   275	symbols
  3654	bytes



Symbol Table:

absa            99db     
bn             =   b     
bp             =  2b     
bs             =  1b     
calcnextmove    9112     
calculatemapcell 98dc     
calculatemapd   98b8     
calculatemapl   98c4     
calculatemapr   98d0     
calculatemapu   98ac     
calculatepathmap 985e     
calculatepathmaploop 9870     
caughtjaletime =  20     
checkh          911c     
checkv          912a     
clearghost      917f     
clearpm         90a3     
cls             9a30     
cn             =   7     
colideghost     9199     
cp             =  27     
cr             =   d     
cs             =  17     
delay           99fb     
disphl          999d     
dn             =   9     
downbit        =   1     
dp             =  29     
ds             =  19     
eatpellet       90d6     
eatppellet      90ee     
eatspellet      90e2     
endgame         905b     
gameloop        901f     
getaddresspf    97bf     
getmapaddress   97a7     
getmove         90f6     
getpmmapdata    90c9     
ghostcheckstack 9211     
ghostdis       =8113     
ghostdostack    9230     
ghostmove       91d3     
ghostmoved      91ed     
ghostmovel      91f9     
ghostmover      9205     
ghostmoveu      91e1     
ghostnextmove   9172     
gn             =   3     
gp             =  23     
gs             =  13     
hidecursor      9a38     
hltodec         9995     
hn             =   c     
hp             =  2c     
hs             =  1c     
initghost       91a6     
initlives      =   4     
initmap         979b     
initpacman      9080     
initpacx       =   e     
initpacy       =   e     
initpathfind    9846     
initppfloop     984d     
input           9066     
ismovevalid     9781     
killpacman      9151     
kn             =   d     
kp             =  2d     
ks             =  1d     
leftbit        =   2     
lf             =   a     
liveblanking    9971     
livemap        =e000     
ln             =   6     
lp             =  26     
ls             =  16     
map             c000     
move            975b     
movecursor      997e     
moved           976f     
movedvalid      9792     
moveghost       91b3     
movel           9775     
movelvalid      9795     
movepm          913a     
movepma         9145     
mover           977b     
movervalid      9798     
moveu           9769     
moveuvalid      978f     
newline         9975     
nextmovevalid   910b     
num1            99b6     
num1h           99cf     
num2            99b8     
num2h           99d3     
numtohex        99c0     
oghost          94b2     
oghostcheckd    9425     
oghostcheckl    9433     
oghostcheckr    9441     
oghostchecku    9417     
oghostclear     9379     
oghostcolide    947b     
oghostdectimer  93dc     
oghostdir      =8122     
oghostinit      93b3     
oghostinittimer=  20     
oghostinitx    =   f     
oghostinity    =   8     
oghostmapdata   93a6     
oghostmove      93c3     
oghostnextmove  93ed     
oghostpathfind  944f     
oghostpfpp      9466     
oghostprint     9385     
oghostsetnewdir 9472     
oghoststack     94a4     
oghoststorex   =   f     
oghoststorey   =   b     
oghosttimer    =8125     
oghostx        =8120     
oghosty        =8121     
oldstackpointer=89f0     
originalbc     =89f2     
paccdir        =8102     
paclives       =8105     
pacman          9167     
pacndir        =8103     
pacx           =8100     
pacy           =8101     
pathfinddepth  =  30     
pathfindmap    =d000     
pellet          9a18     
pelletbit      =   5     
pfnextrow       9857     
pghost          95f6     
pghostcheckd    9569     
pghostcheckl    9577     
pghostcheckr    9585     
pghostchecku    955b     
pghostclear     94bd     
pghostcolide    95bf     
pghostdectimer  9520     
pghostdir      =8132     
pghostinit      94f7     
pghostinittimer=  30     
pghostinitx    =   f     
pghostinity    =   8     
pghostmapdata   94ea     
pghostmove      9507     
pghostnextmove  9531     
pghostpathfind  9593     
pghostpfpp      95aa     
pghostprint     94c9     
pghostsetnewdir 95b6     
pghoststack     95e8     
pghoststorex   =  10     
pghoststorey   =   b     
pghosttimer    =8135     
pghostx        =8130     
pghosty        =8131     
pmchar          9809     
pmcharret       9844     
pmloop          97f5     
pmnextline      9803     
pmpfafterskip   9905     
pmpfloop        98fc     
pmpfnextline    9912     
pmpfskip        9918     
powerpbit      =   4     
powerpellet     9a0d     
ppactive       =8104     
ppellettics    =  20     
print           99f0     
printghost      918c     
printhud        9921     
printlives      9946     
printlivesloop  995a     
printloop       99f1     
printmap        97ee     
printmapat      97d7     
printp          9824     
printpfmap      98e8     
printpm         90af     
printpp         981c     
printret        99f9     
printscore      9928     
printsf         9834     
printsghost     91c0     
printvoid       983c     
printwall       982c     
randoma         99e0     
removeoldlives  9962     
resetpacman     9085     
rghost          936e     
rghostcheckd    92e1     
rghostcheckl    92ef     
rghostcheckr    92fd     
rghostchecku    92d3     
rghostclear     9235     
rghostcolide    9337     
rghostdectimer  9298     
rghostdir      =8112     
rghostinit      926f     
rghostinittimer=  10     
rghostinitx    =   f     
rghostinity    =   8     
rghostmapdata   9262     
rghostmove      927f     
rghostnextmove  92a9     
rghostpathfind  930b     
rghostpfpp      9322     
rghostprint     9241     
rghostsetnewdir 932e     
rghoststack     9360     
rghoststorex   =   e     
rghoststorey   =   b     
rghosttimer    =8115     
rghostx        =8110     
rghosty        =8111     
rightbit       =   3     
rn             =   a     
rp             =  2a     
rs             =  1a     
score          =8900     
scorehud        9969     
seed           =8888     
sfbit          =   7     
sghost0         9745     
sghost1         9750     
sghost1print    91cc     
showcursor      9a3f     
superfruit      9a23     
tghost          973a     
tghostcheckd    96ad     
tghostcheckl    96bb     
tghostcheckr    96c9     
tghostchecku    969f     
tghostclear     9601     
tghostcolide    9703     
tghostdectimer  9664     
tghostdir      =8142     
tghostinit      963b     
tghostinittimer=  40     
tghostinitx    =   f     
tghostinity    =   8     
tghostmapdata   962e     
tghostmove      964b     
tghostnextmove  9675     
tghostpathfind  96d7     
tghostpfpp      96ee     
tghostprint     960d     
tghostsetnewdir 96fa     
tghoststack     972c     
tghoststorex   =  11     
tghoststorey   =   b     
tghosttimer    =8145     
tghostx        =8140     
tghosty        =8141     
un             =   5     
up             =  25     
upbit          =   0     
us             =  15     
validinput      907c     
vn             =   e     
void            9a2e     
vp             =  2e     
vs             =  1e     
wall            9a02     
wallbit        =   6     
ww             =  40     
xn             =   f     
xp             =  2f     
xs             =  1f     
