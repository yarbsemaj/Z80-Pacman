   1:     -	000D          	CR              .EQU     0DH
   2:     -	000A          	LF              .EQU     0AH
   3:				
   4:     -	89F0          	oldStackPointer	.EQU	89F0H		;Old Stack Location 	
   5:     -	89F2          	originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
   6:				
   7:     -	9000          		.ORG 9000H
   8:    0+20	9000  ED73F089				ld		(oldStackPointer), SP
   9:   20+10	9004  31FFFF  				ld		sp,0FFFFH
  10:   30+17	9007  CD8690  				CALL	initPacman
  11:   47+17	900A  CDAF91  				CALL	initGhost
  12:   64+17	900D  CDA497  				CALL	initMap
  13:   81+10	9010  217A9A  				LD		HL, cls			;Clear screen
  14:   91+17	9013  CD3A9A  				CALL	print
  15:  108+10	9016  21829A  				LD		HL, hideCursor	;Hide Cursor
  16:  118+17	9019  CD3A9A  				CALL	print
  17:  135+17	901C  CD3898  				call 	printMap
  18:     -	901F          	gameLoop:		
  19:  152+17	901F  CD6C90  				call	input
  20:  169+17	9022  CDFC90  				call 	getMove
  21:  186+17	9025  CDA990  				call 	clearPM
  22:  203+17	9028  CD4091  				call	movePM
  23:  220+17	902B  CDB590  				call 	printPM
  24:  237+17	902E  CDDC90  				call	eatPellet
  25:							
  26:  254+17	9031  CD9098  				call	initPathFind
  27:  271+17	9034  CDA898  				call	calculatePathMap
  28:				
  29:  288+17	9037  CD7B91  				call	ghostNextMove
  30:  305+17	903A  CD8891  				call	clearGhost
  31:  322+17	903D  CDA291  				call	colideGhost
  32:  339+17	9040  CDBC91  				call	moveGhost
  33:  356+17	9043  CD9591  				call	printGhost
  34:				
  35:  373+17	9046  CDA291  				call	colideGhost
  36:				
  37:				
  38:							;call 	printPFMap
  39:							
  40:  390+17	9049  CD6B99  				call 	printHUD
  41:  407+17	904C  CDBF99  				call	newline
  42:  424+17	904F  CDC897  				call	checkNextLevel
  43:  441+7	9052  060F    				LD 		B,0FH   ;delay
  44:  448+7	9054  0EFF    				LD		C,0FFH
  45:  455+17	9056  CD459A  				CALL 	DELAY
  46:  472+10	9059  C31F90  				JP		gameLoop
  47:  482+20	905C  ED7BF089				LD		SP,(oldStackPointer)
  48:  502+10	9060  C9      				ret
  49:				
  50:  512+10	9061  21899A  	endGame:        LD		HL, showCursor	;Hide Cursor
  51:  522+17	9064  CD3A9A  				    CALL	print
  52:  539+20	9067  ED7BF089	                LD		SP,(oldStackPointer)
  53:  559+10	906B  C9      					RET	
  54:						
  55:				;-------------- Input --------------------------					
  56:				include input.asm	
**** input.asm ****
   1:     -	906C          	input:
   2:  569+11	906C  DF      					RST		18H
   3:  580+5+6	906D  C8      					RET		Z
   4:  585+11	906E  D7      					RST		10H
   5:  596+7	906F  E6DF    					AND     11011111b       ; lower to uppercase
   6:  603+7	9071  FE57    					CP		'W'
   7:  610+7+5	9073  280D    					JR		Z,validInput
   8:  617+7	9075  FE41    					CP		'A'
   9:  624+7+5	9077  2809    					JR		Z,validInput
  10:  631+7	9079  FE53    					CP		'S'
  11:  638+7+5	907B  2805    					JR		Z,validInput
  12:  645+7	907D  FE44    					CP		'D'
  13:  652+7+5	907F  2801    					JR		Z,validInput
  14:  659+10	9081  C9      					RET
  15:     -	9082          	validInput:		
  16:  669+13	9082  320381  					LD		(pacNDir), A
**** main.asm ****
  57:  682+10	9085  C9      					RET
  58:				;----------Pacman------;
  59:				include	pacman.asm
**** pacman.asm ****
   1:				;Packman
   2:     -	8100          	pacx			.EQU	8100H
   3:     -	8101          	pacy			.EQU	8101H
   4:     -	8102          	pacCDir			.EQU	8102H		;Pacmans current direction
   5:     -	8103          	pacNDir			.EQU	8103H		;Pacman next direction (from key press)
   6:     -	8105          	pacLives		.EQU	8105H		;Pacman next direction (from key press)
   7:				
   8:     -	000E          	initPacx		.EQU	14
   9:     -	000E          	initPacy		.EQU	14
  10:     -	0004          	initLives		.EQU	4
  11:				
  12:     -	0020          	pPelletTics     .EQU    20H         ;Power Pellet last time
  13:				
  14:     -	8104          	pPActive        .EQU    8104H       ;Power Pellet Timer
  15:				
  16:     -	9086          	initPacman:
  17:  692+10	9086  210000  					LD		HL, 0H
  18:  702+16	9089  220089  					LD		(score), HL
  19:  718+7	908C  3E04    					LD		a,initLives
  20:  725+13	908E  320581  					LD		(pacLives),a
  21:  738+7	9091  3E0E    	resetPacMan:	LD		a, initPacx		;set Pacman Pos
  22:  745+13	9093  320081  					LD		(pacx),a
  23:  758+7	9096  3E0E    					LD		a, initPacy
  24:  765+13	9098  320181  					LD		(pacy),a
  25:  778+7	909B  3E44    					LD		a, 'D'			;Set start direction
  26:  785+13	909D  320281  					LD		(pacCDir),A
  27:  798+13	90A0  320381  					LD		(pacNDir),A
  28:  811+7	90A3  3E00    					LD		a,0
  29:  818+13	90A5  320481  					LD		(pPActive),A
  30:  831+10	90A8  C9      					RET
  31:				
  32:     -	90A9          	clearPM:
  33:  841+13	90A9  3A0081  					LD		A, (pacx)		;Push X to stack
  34:  854+4	90AC  4F      					LD		C,A
  35:  858+13	90AD  3A0181  					LD		A, (pacy)		;Push Y to stack
  36:  871+4	90B0  47      					LD		B,A
  37:  875+17	90B1  CD2198  					CALL 	printMapAt
  38:  892+10	90B4  C9      					RET
  39:								
  40:     -	90B5          	printPM:
  41:  902+13	90B5  3A0081  					LD		A, (pacx)		;Push X to stack
  42:  915+4	90B8  3C      					INC		A
  43:  919+4	90B9  6F      					LD		L,A
  44:  923+7	90BA  2600    					LD		H, $00			;We dont care about msb
  45:  930+11	90BC  E5      					PUSH	HL
  46:  941+13	90BD  3A0181  					LD		A, (pacy)		;Push Y to stack
  47:  954+4	90C0  3C      					INC		A
  48:  958+4	90C1  6F      					LD		L,A
  49:  962+7	90C2  2600    					LD		H, $00			;Again we dont care
  50:  969+11	90C4  E5      					PUSH	HL
  51:  980+17	90C5  CDC899  					CALL	moveCursor
  52:  997+10	90C8  217091  					LD		HL, pacman
  53: 1007+17	90CB  CD3A9A  					CALL 	print
  54: 1024+10	90CE  C9      					RET
  55:     -	90CF          	getPMMapData:	
  56: 1034+13	90CF  3A0081  					LD		A, (pacx)
  57: 1047+4	90D2  4F      					LD		C,A
  58: 1051+13	90D3  3A0181  					LD		A, (pacy)
  59: 1064+4	90D6  47      					LD		B,A
  60: 1068+17	90D7  CDB097  					CALL	getMapAddress
  61: 1085+7	90DA  7E      	                LD      A,(HL)
  62: 1092+10	90DB  C9      					ret
  63:     -	90DC          	eatPellet:		;Eat pellet at packman location
  64: 1102+17	90DC  CDCF90  					CALL 	getPMMapData
  65: 1119+8	90DF  CB6F    					BIT		pelletBit,A
  66: 1127+7+5	90E1  2005    					JR		NZ,eatSPellet
  67: 1134+8	90E3  CB67    	                BIT		powerPBit,A
  68: 1142+7+5	90E5  200D    					JR		NZ,eatPPellet
  69: 1149+10	90E7  C9      					RET
  70:								
  71:     -	90E8          	eatSPellet:		
  72: 1159+11	90E8  E5      					PUSH	HL		
  73: 1170+16	90E9  2A0089  					LD		HL,(score)
  74: 1186+6	90EC  23      					INC		HL
  75: 1192+16	90ED  220089  					LD		(score),HL
  76: 1208+10	90F0  E1      					POP		HL
  77: 1218+15	90F1  CBAE    					RES		pelletBit,(HL)
  78: 1233+10	90F3  C9      					RET
  79:				
  80:     -	90F4          	eatPPellet:		
  81: 1243+7	90F4  3E20    					LD      A,pPelletTics
  82: 1250+13	90F6  320481  	                LD      (pPActive),A
  83: 1263+15	90F9  CBA6    	                RES		powerPBit,(HL)
  84: 1278+10	90FB  C9      					RET
  85:								
  86:     -	90FC          	getMove:		;Sets the current move var
  87: 1288+17	90FC  CDCF90  					CALL	getPMMapData
  88: 1305+4	90FF  57      					LD		D,A
  89: 1309+13	9100  3A0381  					LD		A,(pacNDir)			;Is the next move valid
  90: 1322+17	9103  CD8A97  					CALL	isMoveValid
  91: 1339+7+5	9106  2009    					JR		NZ,nextMoveValid
  92: 1346+13	9108  3A0281  					LD		A,(pacCDir)			;Is the current move valid
  93: 1359+17	910B  CD8A97  					CALL	isMoveValid
  94: 1376+5+6	910E  C0      					RET		NZ
  95: 1381+12	910F  1807    					JR		calcNextMove
  96:								
  97:     -	9111          	nextMoveValid:
  98: 1393+13	9111  320281  					LD		(pacCDir),A
  99: 1406+13	9114  320381  					LD		(pacNDir),A
 100: 1419+10	9117  C9      					RET
 101:								
 102:     -	9118          	calcNextMove:	
 103: 1429+7	9118  FE41    					CP		'A'
 104: 1436+7+5	911A  2814    					JR		Z,checkV
 105: 1443+7	911C  FE44    					CP		'D'
 106: 1450+7+5	911E  2810    					JR		Z,checkV
 107: 1457+12	9120  1800    					JR		checkH
 108:     -	9122          	checkH:
 109: 1469+7	9122  3E41    					LD		A,'A'
 110: 1476+17	9124  CD8A97  					CALL	isMoveValid
 111: 1493+7+5	9127  20E8    					JR		NZ,nextMoveValid
 112: 1500+7	9129  3E44    					LD		A,'D'
 113: 1507+17	912B  CD8A97  					CALL	isMoveValid
 114: 1524+7+5	912E  20E1    					JR		NZ,nextMoveValid
 115:     -	9130          	checkV:
 116: 1531+7	9130  3E57    					LD		A,'W'
 117: 1538+17	9132  CD8A97  					CALL	isMoveValid
 118: 1555+7+5	9135  20DA    					JR		NZ,nextMoveValid
 119: 1562+7	9137  3E53    					LD		A,'S'
 120: 1569+17	9139  CD8A97  					CALL	isMoveValid
 121: 1586+7+5	913C  20D3    					JR		NZ,nextMoveValid
 122: 1593+12	913E  18E2    					JR		checkH
 123:				;Move
 124:     -	9140          	movePM:
 125: 1605+13	9140  3A0481  					LD      A,(pPActive)
 126: 1618+4	9143  B7      	                OR      A
 127: 1622+10	9144  CA4B91  	                JP      Z,movePMA
 128: 1632+4	9147  3D      	                DEC     A
 129: 1636+13	9148  320481  	                LD      (pPActive),A
 130: 1649+13	914B  3A0281  	movePMA:        LD		A,(pacCDir)
 131: 1662+10	914E  110081  					LD		DE,pacx
 132: 1672+10	9151  010181  					LD		BC,pacy
 133: 1682+10	9154  C36497  					JP		move
 134:				
 135:     -	9157          	killPacman:
 136: 1692+10	9157  E1      					POP		HL
 137: 1702+10	9158  E1      					POP		HL
 138: 1712+13	9159  3A0581  					LD		A,(pacLives)
 139: 1725+4	915C  3D      					DEC		A
 140: 1729+4	915D  B7      					OR		A
 141: 1733+10	915E  CA6190  					JP		Z,endGame
 142: 1743+13	9161  320581  					LD		(pacLives),A
 143: 1756+17	9164  CD8891  					CALL	clearGhost
 144: 1773+17	9167  CD9190  					CALL	resetPacMan
 145: 1790+17	916A  CDAF91  					CALL	initGhost
 146: 1807+10	916D  C31F90  					JP		gameLoop
 147:				
**** main.asm ****
  60:     -	9170  1B5B3933	pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
	              6D431B5B
	              306D00
  61:				;------------Ghost
  62:				include ghosts.asm
**** ghosts.asm ****
   1:     -	8113          	ghostDis		.EQU	8113H		;ghost move distance from pacman
   2:     -	0020          	caughtJaleTime  .EQU    20H
   3:				
   4:     -	917B          	ghostNextMove:
   5: 1817+17	917B  CDB292  	                CALL    rGhostNextMove
   6: 1834+17	917E  CDF693  	                CALL    oGhostNextMove
   7: 1851+17	9181  CD3A95  	                CALL    pGhostNextMove
   8: 1868+17	9184  CD7E96  	                CALL    tGhostNextMove
   9: 1885+10	9187  C9      	                RET
  10:     -	9188          	clearGhost:
  11: 1895+17	9188  CD3E92  	                CALL    rGhostClear
  12: 1912+17	918B  CD8293  	                CALL    oGhostClear
  13: 1929+17	918E  CDC694  	                CALL    pGhostClear
  14: 1946+17	9191  CD0A96  	                CALL    tGhostClear
  15: 1963+10	9194  C9      	                RET
  16:     -	9195          	printGhost:
  17: 1973+17	9195  CD4A92  	                CALL    rGhostPrint
  18: 1990+17	9198  CD8E93  	                CALL    oGhostPrint
  19: 2007+17	919B  CDD294  	                CALL    pGhostPrint
  20: 2024+17	919E  CD1696  	                CALL    tGhostPrint
  21: 2041+10	91A1  C9      	                RET
  22:     -	91A2          	colideGhost:
  23: 2051+17	91A2  CD4093  	                CALL    rGhostColide
  24: 2068+17	91A5  CD8494  	                CALL    oGhostColide
  25: 2085+17	91A8  CDC895  	                CALL    pGhostColide
  26: 2102+17	91AB  CD0C97  	                CALL    tGhostColide
  27: 2119+10	91AE  C9      	                RET
  28:     -	91AF          	initGhost:
  29: 2129+17	91AF  CD7892  	                CALL    rGhostInit
  30: 2146+17	91B2  CDBC93  	                CALL    oGhostInit
  31: 2163+17	91B5  CD0095  	                CALL    pGhostInit
  32: 2180+17	91B8  CD4496  	                CALL    tGhostInit
  33: 2197+10	91BB  C9      	                RET
  34:     -	91BC          	moveGhost:
  35: 2207+17	91BC  CD8892  	                CALL    rGhostMove
  36: 2224+17	91BF  CDCC93  	                CALL    oGhostMove
  37: 2241+17	91C2  CD1095  	                CALL    pGhostMove
  38: 2258+17	91C5  CD5496  	                CALL    tGhostMove
  39: 2275+10	91C8  C9      	                RET
  40:				
  41:     -	91C9          	printSGhost:
  42: 2285+8	91C9  CB47    	                BIT     0,A
  43: 2293+10	91CB  CAD591  	                JP      Z,sGhost1Print
  44: 2303+10	91CE  214E97  	                LD		HL, sGhost0
  45: 2313+17	91D1  CD3A9A  					CALL 	print
  46: 2330+10	91D4  C9      					RET
  47:     -	91D5          	sGhost1Print:
  48: 2340+10	91D5  215997  	                LD		HL, sGhost1
  49: 2350+17	91D8  CD3A9A  					CALL 	print
  50: 2367+10	91DB  C9      					RET
  51:				
  52:     -	91DC          	ghostMove:
  53: 2377+7	91DC  FE57    					CP		'W'
  54: 2384+7+5	91DE  280A    					JR		Z,ghostMoveU
  55: 2391+7	91E0  FE41    					CP		'A'
  56: 2398+7+5	91E2  281E    					JR		Z,ghostMoveL
  57: 2405+7	91E4  FE53    					CP		'S'
  58: 2412+7+5	91E6  280E    					JR		Z,ghostMoveD
  59: 2419+12	91E8  1824    					JR		ghostMoveR
  60:				
  61:     -	91EA          	ghostMoveU:			
  62: 2431+7	91EA  1A      					LD      A, (DE)
  63: 2438+4	91EB  6F      	                LD      L,A         ;ld x
  64: 2442+7	91EC  0A      	                LD		A, (BC)
  65: 2449+4	91ED  3D      					DEC		A
  66: 2453+7	91EE  E61F    					AND		00011111B
  67: 2460+4	91F0  67      	                LD      H,A         ;ld y
  68: 2464+17	91F1  CD1A92  	                CALL    ghostCheckStack
  69: 2481+7	91F4  02      					LD		(BC),A
  70: 2488+10	91F5  C9      					RET
  71:     -	91F6          	ghostMoveD:		
  72: 2498+7	91F6  1A      		            LD      A, (DE)
  73: 2505+4	91F7  6F      	                LD      L,A         ;ld x
  74: 2509+7	91F8  0A      					LD		A, (BC)
  75: 2516+4	91F9  3C      					INC		A
  76: 2520+7	91FA  E61F    					AND		00011111B
  77: 2527+4	91FC  67      	                LD      H,A         ;ld y
  78: 2531+17	91FD  CD1A92  	                CALL    ghostCheckStack
  79: 2548+7	9200  02      					LD		(BC),A
  80: 2555+10	9201  C9      					RET
  81:     -	9202          	ghostMoveL:		
  82: 2565+7	9202  0A      	                LD      A, (BC)
  83: 2572+4	9203  67      	                LD      H,A         ;ld y
  84: 2576+7	9204  1A      					LD		A, (DE)
  85: 2583+4	9205  3D      					DEC		A
  86: 2587+7	9206  E61F    					AND		00011111B
  87: 2594+4	9208  6F      	                LD      L,A         ;ld x
  88: 2598+17	9209  CD1A92  	                CALL    ghostCheckStack
  89: 2615+7	920C  12      					LD		(DE),A
  90: 2622+10	920D  C9      					RET
  91:     -	920E          	ghostMoveR:		
  92: 2632+7	920E  0A      	                LD      A, (BC)
  93: 2639+4	920F  67      	                LD      H,A         ;ld y
  94: 2643+7	9210  1A      					LD		A, (DE)
  95: 2650+4	9211  3C      					INC		A
  96: 2654+7	9212  E61F    					AND		00011111B
  97: 2661+4	9214  6F      	                LD      L,A         ;ld x
  98: 2665+17	9215  CD1A92  	                CALL    ghostCheckStack
  99: 2682+7	9218  12      					LD		(DE),A
 100: 2689+10	9219  C9      					RET
 101:     -	921A          	ghostCheckStack:
 102: 2699+11	921A  F5      	                PUSH   AF
 103: 2710+11	921B  C5      	                PUSH   BC
 104: 2721+11	921C  D5      	                PUSH   DE
 105: 2732+17	921D  CD6993  	                CALL   rGhostStack
 106: 2749+10	9220  CA3992  	                JP     Z,ghostDoStack
 107: 2759+17	9223  CDAD94  	                CALL   oGhostStack
 108: 2776+10	9226  CA3992  	                JP     Z,ghostDoStack
 109: 2786+17	9229  CDF195  	                CALL   pGhostStack
 110: 2803+10	922C  CA3992  	                JP     Z,ghostDoStack
 111: 2813+17	922F  CD3597  	                CALL   tGhostStack
 112: 2830+10	9232  CA3992  	                JP     Z,ghostDoStack
 113: 2840+10	9235  D1      	                POP    DE
 114: 2850+10	9236  C1      	                POP    BC
 115: 2860+10	9237  F1      	                POP    AF
 116: 2870+10	9238  C9      	                RET
 117:     -	9239          	ghostDoStack:   
 118: 2880+10	9239  D1      	                POP    DE
 119: 2890+10	923A  C1      	                POP    BC
 120: 2900+10	923B  F1      	                POP    AF
 121: 2910+10	923C  F1      	                POP    AF
 122: 2920+10	923D  C9      	                RET
 123:				                
 124:				include ghosts/red.asm
**** ghosts/red.asm ****
   1:     -	000F          	rGhostInitX	    .EQU	15
   2:     -	0008          	rGhostInitY	    .EQU	8
   3:     -	0010          	rGhostInitTimer .EQU    10H
   4:     -	000E          	rGhostStoreX	.EQU	14
   5:     -	000B          	rGhostStoreY	.EQU	11
   6:				
   7:     -	8110          	rGhostX		    .EQU	8110H		
   8:     -	8111          	rGhostY		    .EQU	8111H
   9:     -	8112          	rGhostDir		.EQU	8112H
  10:     -	8115          	rGhostTimer     .EQU    8115H
  11:				
  12:     -	923E          	rGhostClear:
  13: 2930+13	923E  3A1081  					LD		A, (rGhostX)		;Push X to stack
  14: 2943+4	9241  4F      					LD		C,A
  15: 2947+13	9242  3A1181  					LD		A, (rGhostY)		;Push Y to stack
  16: 2960+4	9245  47      					LD		B,A
  17: 2964+17	9246  CD2198  					CALL 	printMapAt
  18: 2981+10	9249  C9      					RET
  19:								
  20:     -	924A          	rGhostPrint:
  21: 2991+13	924A  3A1081  					LD		A, (rGhostX)		;Push X to stack
  22: 3004+4	924D  3C      					INC		A
  23: 3008+4	924E  6F      					LD		L,A
  24: 3012+7	924F  2600    					LD		H, $00			;We dont care about msb
  25: 3019+11	9251  E5      					PUSH	HL
  26: 3030+13	9252  3A1181  					LD		A, (rGhostY)		;Push Y to stack
  27: 3043+4	9255  3C      					INC		A
  28: 3047+4	9256  6F      					LD		L,A
  29: 3051+7	9257  2600    					LD		H, $00			;Again we dont care
  30: 3058+11	9259  E5      					PUSH	HL
  31: 3069+17	925A  CDC899  					CALL	moveCursor
  32: 3086+13	925D  3A0481  	                LD      A,(pPActive)
  33: 3099+4	9260  B7      	                OR      A
  34: 3103+10	9261  C2C991  	                JP      NZ, printSGhost
  35: 3113+10	9264  217793  					LD		HL, rGhost
  36: 3123+17	9267  CD3A9A  					CALL 	print
  37: 3140+10	926A  C9      					RET
  38:     -	926B          	rGhostMapData:	
  39: 3150+13	926B  3A1081  					LD		A, (rGhostX)
  40: 3163+4	926E  4F      					LD		C,A
  41: 3167+13	926F  3A1181  					LD		A, (rGhostY)
  42: 3180+4	9272  47      					LD		B,A
  43: 3184+17	9273  CDB097  					CALL	getMapAddress
  44: 3201+7	9276  7E      	                LD      A,(HL)
  45: 3208+10	9277  C9      					ret
  46:				
  47:				
  48:     -	9278          	rGhostInit:   
  49: 3218+7	9278  3E0E    	                LD		a, rGhostStoreX	;set rGhost Pos
  50: 3225+13	927A  321081  				    LD		(rGhostX),a
  51: 3238+7	927D  3E0B    				    LD		a, rGhostStoreY
  52: 3245+13	927F  321181  				    LD		(rGhostY),a
  53: 3258+7	9282  3E10    	                LD		a, rGhostInitTimer
  54: 3265+13	9284  321581  				    LD		(rGhostTimer),a
  55: 3278+10	9287  C9      	                RET
  56:				
  57:     -	9288          	rGhostMove:
  58: 3288+13	9288  3A1581  	                LD      A,(rGhostTimer)     ;Dont move if the ghost is in jale
  59: 3301+4	928B  B7      	                OR      A                
  60: 3305+10	928C  C2A192  	                JP      NZ,rGhostDecTimer   ;Decrement the timer if its x
  61: 3315+13	928F  3A0481  	                LD      A,(pPActive)
  62: 3328+8	9292  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 3336+5+6	9294  C0      	                RET     NZ
  64: 3341+13	9295  3A1281  					LD		A,(rGhostDir)
  65: 3354+10	9298  111081  					LD		DE,rGhostX
  66: 3364+10	929B  011181  					LD		BC,rGhostY
  67: 3374+10	929E  C3DC91  					JP		ghostMove
  68:				
  69:				
  70:     -	92A1          	rGhostDecTimer:
  71: 3384+4	92A1  3D      	                DEC     A
  72: 3388+13	92A2  321581  	                LD      (rGhostTimer),A
  73: 3401+4	92A5  B7      	                OR      A
  74: 3405+5+6	92A6  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  75: 3410+7	92A7  3E0F    	                LD		a, rGhostInitX	;set rGhost Pos
  76: 3417+13	92A9  321081  				    LD		(rGhostX),a
  77: 3430+7	92AC  3E08    				    LD		a, rGhostInitY
  78: 3437+13	92AE  321181  				    LD		(rGhostY),a
  79: 3450+10	92B1  C9      	                RET
  80:				
  81:     -	92B2          	rGhostNextMove:
  82: 3460+7	92B2  3EFF    					LD		A, 0FFH
  83: 3467+13	92B4  321381  					LD		(ghostDis),A
  84: 3480+17	92B7  CD6B92  					CALL	rGhostMapData
  85: 3497+4	92BA  57      					LD		D,A
  86: 3501+7	92BB  3E57    					LD		A,	'W'			;check up
  87: 3508+17	92BD  CD8A97  					CALL	isMoveValid
  88: 3525+10+7	92C0  C4DC92  					CALL	NZ,rGhostCheckU
  89: 3535+7	92C3  3E53    					LD		A,	'S'			;down
  90: 3542+17	92C5  CD8A97  					CALL	isMoveValid
  91: 3559+10+7	92C8  C4EA92  					CALL	NZ,rGhostCheckD
  92: 3569+7	92CB  3E41    					LD		A,	'A'			;left
  93: 3576+17	92CD  CD8A97  					CALL	isMoveValid
  94: 3593+10+7	92D0  C4F892  					CALL	NZ,rGhostCheckL
  95: 3603+7	92D3  3E44    					LD		A,	'D'			;right
  96: 3610+17	92D5  CD8A97  					CALL	isMoveValid
  97: 3627+10+7	92D8  C40693  					CALL	NZ,rGhostCheckR
  98: 3637+10	92DB  C9      					RET
  99:								
 100:     -	92DC          	rGhostCheckU:	
 101: 3647+11	92DC  F5      					PUSH	AF
 102: 3658+13	92DD  3A1181  					LD		A, (rGhostY)
 103: 3671+4	92E0  3D      					DEC		A
 104: 3675+7	92E1  E61F    					AND		00011111B
 105: 3682+4	92E3  47      					LD		B,A
 106: 3686+13	92E4  3A1081  					LD		A,(rGhostX)
 107: 3699+4	92E7  4F      					LD		C,A
 108: 3703+12	92E8  182A    					JR		rGhostPathFind
 109:     -	92EA          	rGhostCheckD:			
 110: 3715+11	92EA  F5      					PUSH	AF
 111: 3726+13	92EB  3A1181  					LD		A, (rGhostY)
 112: 3739+4	92EE  3C      					INC		A
 113: 3743+7	92EF  E61F    					AND		00011111B
 114: 3750+4	92F1  47      					LD		B,A
 115: 3754+13	92F2  3A1081  					LD		A,(rGhostX)
 116: 3767+4	92F5  4F      					LD		C,A
 117: 3771+12	92F6  181C    					JR		rGhostPathFind
 118:     -	92F8          	rGhostCheckL:		
 119: 3783+11	92F8  F5      					PUSH	AF	
 120: 3794+13	92F9  3A1081  					LD		A, (rGhostX)
 121: 3807+4	92FC  3D      					DEC		A
 122: 3811+7	92FD  E61F    					AND		00011111B
 123: 3818+4	92FF  4F      					LD		C,A
 124: 3822+13	9300  3A1181  					LD		A,(rGhostY)
 125: 3835+4	9303  47      					LD		B,A
 126: 3839+12	9304  180E    					JR		rGhostPathFind
 127:     -	9306          	rGhostCheckR:
 128: 3851+11	9306  F5      					PUSH	AF	
 129: 3862+13	9307  3A1081  					LD		A, (rGhostX)
 130: 3875+4	930A  3C      					INC		A
 131: 3879+7	930B  E61F    					AND		00011111B
 132: 3886+4	930D  4F      					LD		C,A
 133: 3890+13	930E  3A1181  					LD		A,(rGhostY)
 134: 3903+4	9311  47      					LD		B,A
 135: 3907+12	9312  1800    					JR		rGhostPathFind
 136:				
 137:     -	9314          	rGhostPathFind:
 138: 3919+17	9314  CD0998  					CALL	getAddressPF
 139: 3936+13	9317  3A1381  					LD		A,(ghostDis)
 140: 3949+7	931A  5E      					LD		E,(HL)
 141: 3956+4	931B  BB      					CP		E
 142: 3960+11	931C  F5      	                PUSH    AF
 143: 3971+13	931D  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 144: 3984+4	9320  B7      	                OR      A
 145: 3988+10	9321  C22B93  	                JP      NZ,rGhostPFPP
 146: 3998+10	9324  F1      	                POP     AF
 147: 4008+10	9325  D23793  					JP		NC,rGhostSetNewDir
 148: 4018+10	9328  F1      	                POP     AF
 149: 4028+10	9329  F1      					POP		AF
 150: 4038+10	932A  C9      					RET
 151:     -	932B          	rGhostPFPP:
 152: 4048+10	932B  F1      	                POP     AF
 153: 4058+10	932C  DA3793  	                JP		C,rGhostSetNewDir
 154: 4068+7	932F  FEFF    	                CP      0FFH
 155: 4075+10	9331  CA3793  	                JP      Z,rGhostSetNewDir
 156: 4085+10	9334  F1      	                POP     AF
 157: 4095+10	9335  F1      					POP		AF
 158: 4105+10	9336  C9      	                RET
 159:				
 160:     -	9337          	rGhostSetNewDir:
 161: 4115+4	9337  7B      					LD		A,E
 162: 4119+13	9338  321381  					LD		(ghostDis),A
 163: 4132+10	933B  F1      					POP		AF
 164: 4142+13	933C  321281  					LD		(rGhostDir),A
 165: 4155+10	933F  C9      					RET
 166:				
 167:     -	9340          	rGhostColide:   
 168: 4165+13	9340  3A0081  	                LD      A,(pacx)                ;Compair X
 169: 4178+4	9343  47      	                LD      B,A
 170: 4182+13	9344  3A1081  	                LD      A,(rGhostX)
 171: 4195+4	9347  B8      	                CP      B
 172: 4199+5+6	9348  C0      	                RET     NZ
 173: 4204+13	9349  3A0181  	                LD      A,(pacy)                ;Compair Y
 174: 4217+4	934C  47      	                LD      B,A
 175: 4221+13	934D  3A1181  	                LD      A,(rGhostY)
 176: 4234+4	9350  B8      	                CP      B
 177: 4238+5+6	9351  C0      	                RET     NZ
 178: 4243+13	9352  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 179: 4256+4	9355  B7      	                OR      A
 180: 4260+10	9356  CA5791  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 181: 4270+7	9359  3E0E    	                LD		a, rGhostStoreX	           ;set rGhost Pos
 182: 4277+13	935B  321081  				    LD		(rGhostX),a
 183: 4290+7	935E  3E0B    				    LD		a, rGhostStoreY
 184: 4297+13	9360  321181  				    LD		(rGhostY),a
 185: 4310+7	9363  3E10    	                LD		a, rGhostInitTimer
 186: 4317+13	9365  321581  				    LD		(rGhostTimer),a
 187: 4330+10	9368  C9      	                RET
 188:				;x = l
 189:				;y = h
 190:     -	9369          	rGhostStack:
 191: 4340+4	9369  7D      					LD      A,L               		;Compair X
 192: 4344+4	936A  47      	                LD      B,A
 193: 4348+13	936B  3A1081  	                LD      A,(rGhostX)
 194: 4361+4	936E  B8      	                CP      B
 195: 4365+5+6	936F  C0      	                RET     NZ
 196: 4370+4	9370  7C      	                LD      A,h                		;Compair Y
 197: 4374+4	9371  47      	                LD      B,A
 198: 4378+13	9372  3A1181  	                LD      A,(rGhostY)
 199: 4391+4	9375  B8      	                CP      B
 200: 4395+10	9376  C9      	                RET
 201:				
**** ghosts.asm ****
 125:     -	9377  1B5B3931	rGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 126:				include ghosts/orange.asm
**** ghosts/orange.asm ****
   1:     -	000F          	oGhostInitX	    .EQU	15
   2:     -	0008          	oGhostInitY	    .EQU	8
   3:     -	0020          	oGhostInitTimer .EQU    20H
   4:     -	000F          	oGhostStoreX	.EQU	15
   5:     -	000B          	oGhostStoreY	.EQU	11
   6:				
   7:     -	8120          	oGhostX		    .EQU	8120H		
   8:     -	8121          	oGhostY		    .EQU	8121H
   9:     -	8122          	oGhostDir		.EQU	8122H
  10:     -	8125          	oGhostTimer     .EQU    8125H
  11:				
  12:     -	9382          	oGhostClear:
  13: 4405+13	9382  3A2081  					LD		A, (oGhostX)		;Push X to stack
  14: 4418+4	9385  4F      					LD		C,A
  15: 4422+13	9386  3A2181  					LD		A, (oGhostY)		;Push Y to stack
  16: 4435+4	9389  47      					LD		B,A
  17: 4439+17	938A  CD2198  					CALL 	printMapAt
  18: 4456+10	938D  C9      					RET
  19:								
  20:     -	938E          	oGhostPrint:
  21: 4466+13	938E  3A2081  					LD		A, (oGhostX)		;Push X to stack
  22: 4479+4	9391  3C      					INC		A
  23: 4483+4	9392  6F      					LD		L,A
  24: 4487+7	9393  2600    					LD		H, $00			;We dont care about msb
  25: 4494+11	9395  E5      					PUSH	HL
  26: 4505+13	9396  3A2181  					LD		A, (oGhostY)		;Push Y to stack
  27: 4518+4	9399  3C      					INC		A
  28: 4522+4	939A  6F      					LD		L,A
  29: 4526+7	939B  2600    					LD		H, $00			;Again we dont care
  30: 4533+11	939D  E5      					PUSH	HL
  31: 4544+17	939E  CDC899  					CALL	moveCursor
  32: 4561+13	93A1  3A0481  	                LD      A,(pPActive)
  33: 4574+4	93A4  B7      	                OR      A
  34: 4578+10	93A5  C2C991  	                JP      NZ, printSGhost
  35: 4588+10	93A8  21BB94  					LD		HL, oGhost
  36: 4598+17	93AB  CD3A9A  					CALL 	print
  37: 4615+10	93AE  C9      					RET
  38:     -	93AF          	oGhostMapData:	
  39: 4625+13	93AF  3A2081  					LD		A, (oGhostX)
  40: 4638+4	93B2  4F      					LD		C,A
  41: 4642+13	93B3  3A2181  					LD		A, (oGhostY)
  42: 4655+4	93B6  47      					LD		B,A
  43: 4659+17	93B7  CDB097  					CALL	getMapAddress
  44: 4676+7	93BA  7E      	                LD      A,(HL)
  45: 4683+10	93BB  C9      					ret
  46:				
  47:				
  48:     -	93BC          	oGhostInit:   
  49: 4693+7	93BC  3E0F    	                LD		a, oGhostStoreX	;set oGhost Pos
  50: 4700+13	93BE  322081  				    LD		(oGhostX),a
  51: 4713+7	93C1  3E0B    				    LD		a, oGhostStoreY
  52: 4720+13	93C3  322181  				    LD		(oGhostY),a
  53: 4733+7	93C6  3E20    	                LD		a, oGhostInitTimer
  54: 4740+13	93C8  322581  				    LD		(oGhostTimer),a
  55: 4753+10	93CB  C9      	                RET
  56:				
  57:     -	93CC          	oGhostMove:
  58: 4763+13	93CC  3A2581  	                LD      A,(oGhostTimer)     ;Dont move if the ghost is in jale
  59: 4776+4	93CF  B7      	                OR      A                
  60: 4780+10	93D0  C2E593  	                JP      NZ,oGhostDecTimer   ;Decrement the timer if its x
  61: 4790+13	93D3  3A0481  	                LD      A,(pPActive)
  62: 4803+8	93D6  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 4811+5+6	93D8  C0      	                RET     NZ
  64: 4816+13	93D9  3A2281  					LD		A,(oGhostDir)
  65: 4829+10	93DC  112081  					LD		DE,oGhostX
  66: 4839+10	93DF  012181  					LD		BC,oGhostY
  67: 4849+10	93E2  C3DC91  					JP		ghostMove
  68:				
  69:     -	93E5          	oGhostDecTimer:
  70: 4859+4	93E5  3D      	                DEC     A
  71: 4863+13	93E6  322581  	                LD      (oGhostTimer),A
  72: 4876+4	93E9  B7      	                OR      A
  73: 4880+5+6	93EA  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  74: 4885+7	93EB  3E0F    	                LD		a, oGhostInitX	;set oGhost Pos
  75: 4892+13	93ED  322081  				    LD		(oGhostX),a
  76: 4905+7	93F0  3E08    				    LD		a, oGhostInitY
  77: 4912+13	93F2  322181  				    LD		(oGhostY),a
  78: 4925+10	93F5  C9      	                RET
  79:				
  80:     -	93F6          	oGhostNextMove:
  81: 4935+7	93F6  3EFF    					LD		A, 0FFH
  82: 4942+13	93F8  321381  					LD		(ghostDis),A
  83: 4955+17	93FB  CDAF93  					CALL	oGhostMapData
  84: 4972+4	93FE  57      					LD		D,A
  85: 4976+7	93FF  3E57    					LD		A,	'W'			;check up
  86: 4983+17	9401  CD8A97  					CALL	isMoveValid
  87: 5000+10+7	9404  C42094  					CALL	NZ,oGhostCheckU
  88: 5010+7	9407  3E53    					LD		A,	'S'			;down
  89: 5017+17	9409  CD8A97  					CALL	isMoveValid
  90: 5034+10+7	940C  C42E94  					CALL	NZ,oGhostCheckD
  91: 5044+7	940F  3E41    					LD		A,	'A'			;left
  92: 5051+17	9411  CD8A97  					CALL	isMoveValid
  93: 5068+10+7	9414  C43C94  					CALL	NZ,oGhostCheckL
  94: 5078+7	9417  3E44    					LD		A,	'D'			;right
  95: 5085+17	9419  CD8A97  					CALL	isMoveValid
  96: 5102+10+7	941C  C44A94  					CALL	NZ,oGhostCheckR
  97: 5112+10	941F  C9      					RET
  98:								
  99:     -	9420          	oGhostCheckU:	
 100: 5122+11	9420  F5      					PUSH	AF
 101: 5133+13	9421  3A2181  					LD		A, (oGhostY)
 102: 5146+4	9424  3D      					DEC		A
 103: 5150+7	9425  E61F    					AND		00011111B
 104: 5157+4	9427  47      					LD		B,A
 105: 5161+13	9428  3A2081  					LD		A,(oGhostX)
 106: 5174+4	942B  4F      					LD		C,A
 107: 5178+12	942C  182A    					JR		oGhostPathFind
 108:     -	942E          	oGhostCheckD:			
 109: 5190+11	942E  F5      					PUSH	AF
 110: 5201+13	942F  3A2181  					LD		A, (oGhostY)
 111: 5214+4	9432  3C      					INC		A
 112: 5218+7	9433  E61F    					AND		00011111B
 113: 5225+4	9435  47      					LD		B,A
 114: 5229+13	9436  3A2081  					LD		A,(oGhostX)
 115: 5242+4	9439  4F      					LD		C,A
 116: 5246+12	943A  181C    					JR		oGhostPathFind
 117:     -	943C          	oGhostCheckL:		
 118: 5258+11	943C  F5      					PUSH	AF	
 119: 5269+13	943D  3A2081  					LD		A, (oGhostX)
 120: 5282+4	9440  3D      					DEC		A
 121: 5286+7	9441  E61F    					AND		00011111B
 122: 5293+4	9443  4F      					LD		C,A
 123: 5297+13	9444  3A2181  					LD		A,(oGhostY)
 124: 5310+4	9447  47      					LD		B,A
 125: 5314+12	9448  180E    					JR		oGhostPathFind
 126:     -	944A          	oGhostCheckR:
 127: 5326+11	944A  F5      					PUSH	AF	
 128: 5337+13	944B  3A2081  					LD		A, (oGhostX)
 129: 5350+4	944E  3C      					INC		A
 130: 5354+7	944F  E61F    					AND		00011111B
 131: 5361+4	9451  4F      					LD		C,A
 132: 5365+13	9452  3A2181  					LD		A,(oGhostY)
 133: 5378+4	9455  47      					LD		B,A
 134: 5382+12	9456  1800    					JR		oGhostPathFind
 135:				
 136:     -	9458          	oGhostPathFind:
 137: 5394+17	9458  CD0998  					CALL	getAddressPF
 138: 5411+13	945B  3A1381  					LD		A,(ghostDis)
 139: 5424+7	945E  5E      					LD		E,(HL)
 140: 5431+4	945F  BB      					CP		E
 141: 5435+11	9460  F5      	                PUSH    AF
 142: 5446+13	9461  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 143: 5459+4	9464  B7      	                OR      A
 144: 5463+10	9465  C26F94  	                JP      NZ,oGhostPFPP
 145: 5473+10	9468  F1      	                POP     AF
 146: 5483+10	9469  D27B94  					JP		NC,oGhostSetNewDir
 147: 5493+10	946C  F1      	                POP     AF
 148: 5503+10	946D  F1      					POP		AF
 149: 5513+10	946E  C9      					RET
 150:     -	946F          	oGhostPFPP:
 151: 5523+10	946F  F1      	                POP     AF
 152: 5533+10	9470  DA7B94  	                JP		C,oGhostSetNewDir
 153: 5543+7	9473  FEFF    	                CP      0FFH
 154: 5550+10	9475  CA7B94  	                JP      Z,oGhostSetNewDir
 155: 5560+10	9478  F1      	                POP     AF
 156: 5570+10	9479  F1      					POP		AF
 157: 5580+10	947A  C9      	                RET
 158:				
 159:     -	947B          	oGhostSetNewDir:
 160: 5590+4	947B  7B      					LD		A,E
 161: 5594+13	947C  321381  					LD		(ghostDis),A
 162: 5607+10	947F  F1      					POP		AF
 163: 5617+13	9480  322281  					LD		(oGhostDir),A
 164: 5630+10	9483  C9      					RET
 165:				
 166:     -	9484          	oGhostColide:   
 167: 5640+13	9484  3A0081  	                LD      A,(pacx)                ;Compair X
 168:								;CALL	NumToHex
 169: 5653+4	9487  47      	                LD      B,A
 170: 5657+13	9488  3A2081  	                LD      A,(oGhostX)
 171:								;CALL	NumToHex
 172: 5670+4	948B  B8      	                CP      B
 173: 5674+5+6	948C  C0      	                RET     NZ
 174: 5679+13	948D  3A0181  	                LD      A,(pacy)                ;Compair Y
 175:								;CALL	NumToHex
 176: 5692+4	9490  47      	                LD      B,A
 177: 5696+13	9491  3A2181  	                LD      A,(oGhostY)
 178:								;CALL	NumToHex
 179: 5709+4	9494  B8      	                CP      B
 180: 5713+5+6	9495  C0      	                RET     NZ
 181: 5718+13	9496  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 182: 5731+4	9499  B7      	                OR      A
 183: 5735+10	949A  CA5791  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 184: 5745+7	949D  3E0F    	                LD		a, oGhostStoreX	           ;set oGhost Pos
 185: 5752+13	949F  322081  				    LD		(oGhostX),a
 186: 5765+7	94A2  3E0B    				    LD		a, oGhostStoreY
 187: 5772+13	94A4  322181  				    LD		(oGhostY),a
 188: 5785+7	94A7  3E20    	                LD		a, oGhostInitTimer
 189: 5792+13	94A9  322581  				    LD		(oGhostTimer),a
 190: 5805+10	94AC  C9      	                RET
 191:				;x = l
 192:				;y = h
 193:     -	94AD          	oGhostStack:
 194: 5815+4	94AD  7D      					LD      A,L               		;Compair X
 195: 5819+4	94AE  47      	                LD      B,A
 196: 5823+13	94AF  3A2081  	                LD      A,(oGhostX)
 197: 5836+4	94B2  B8      	                CP      B
 198: 5840+5+6	94B3  C0      	                RET     NZ
 199: 5845+4	94B4  7C      	                LD      A,h                		;Compair Y
 200: 5849+4	94B5  47      	                LD      B,A
 201: 5853+13	94B6  3A2181  	                LD      A,(oGhostY)
 202: 5866+4	94B9  B8      	                CP      B
 203: 5870+10	94BA  C9      	                RET
 204:				
**** ghosts.asm ****
 127:     -	94BB  1B5B3333	oGhost:		.BYTE	1BH,"[33mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 128:				include ghosts/pink.asm
**** ghosts/pink.asm ****
   1:     -	000F          	pGhostInitX	    .EQU	15
   2:     -	0008          	pGhostInitY	    .EQU	8
   3:     -	0030          	pGhostInitTimer .EQU    30H
   4:     -	0010          	pGhostStoreX	.EQU	16
   5:     -	000B          	pGhostStoreY	.EQU	11
   6:				
   7:     -	8130          	pGhostX		    .EQU	8130H		
   8:     -	8131          	pGhostY		    .EQU	8131H
   9:     -	8132          	pGhostDir		.EQU	8132H
  10:     -	8135          	pGhostTimer     .EQU    8135H
  11:				
  12:     -	94C6          	pGhostClear:
  13: 5880+13	94C6  3A3081  					LD		A, (pGhostX)		;Push X to stack
  14: 5893+4	94C9  4F      					LD		C,A
  15: 5897+13	94CA  3A3181  					LD		A, (pGhostY)		;Push Y to stack
  16: 5910+4	94CD  47      					LD		B,A
  17: 5914+17	94CE  CD2198  					CALL 	printMapAt
  18: 5931+10	94D1  C9      					RET
  19:								
  20:     -	94D2          	pGhostPrint:
  21: 5941+13	94D2  3A3081  					LD		A, (pGhostX)		;Push X to stack
  22: 5954+4	94D5  3C      					INC		A
  23: 5958+4	94D6  6F      					LD		L,A
  24: 5962+7	94D7  2600    					LD		H, $00			;We dont care about msb
  25: 5969+11	94D9  E5      					PUSH	HL
  26: 5980+13	94DA  3A3181  					LD		A, (pGhostY)		;Push Y to stack
  27: 5993+4	94DD  3C      					INC		A
  28: 5997+4	94DE  6F      					LD		L,A
  29: 6001+7	94DF  2600    					LD		H, $00			;Again we dont care
  30: 6008+11	94E1  E5      					PUSH	HL
  31: 6019+17	94E2  CDC899  					CALL	moveCursor
  32: 6036+13	94E5  3A0481  	                LD      A,(pPActive)
  33: 6049+4	94E8  B7      	                OR      A
  34: 6053+10	94E9  C2C991  	                JP      NZ, printSGhost
  35: 6063+10	94EC  21FF95  					LD		HL, pGhost
  36: 6073+17	94EF  CD3A9A  					CALL 	print
  37: 6090+10	94F2  C9      					RET
  38:     -	94F3          	pGhostMapData:	
  39: 6100+13	94F3  3A3081  					LD		A, (pGhostX)
  40: 6113+4	94F6  4F      					LD		C,A
  41: 6117+13	94F7  3A3181  					LD		A, (pGhostY)
  42: 6130+4	94FA  47      					LD		B,A
  43: 6134+17	94FB  CDB097  					CALL	getMapAddress
  44: 6151+7	94FE  7E      	                LD      A,(HL)
  45: 6158+10	94FF  C9      					ret
  46:				
  47:				
  48:     -	9500          	pGhostInit:   
  49: 6168+7	9500  3E10    	                LD		a, pGhostStoreX	;set pGhost Pos
  50: 6175+13	9502  323081  				    LD		(pGhostX),a
  51: 6188+7	9505  3E0B    				    LD		a, pGhostStoreY
  52: 6195+13	9507  323181  				    LD		(pGhostY),a
  53: 6208+7	950A  3E30    	                LD		a, pGhostInitTimer
  54: 6215+13	950C  323581  				    LD		(pGhostTimer),a
  55: 6228+10	950F  C9      	                RET
  56:				
  57:     -	9510          	pGhostMove:
  58: 6238+13	9510  3A3581  	                LD      A,(pGhostTimer)     ;Dont move if the ghost is in jale
  59: 6251+4	9513  B7      	                OR      A                
  60: 6255+10	9514  C22995  	                JP      NZ,pGhostDecTimer   ;Decrement the timer if its x
  61: 6265+13	9517  3A0481  	                LD      A,(pPActive)
  62: 6278+8	951A  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  63: 6286+5+6	951C  C0      	                RET     NZ
  64: 6291+13	951D  3A3281  					LD		A,(pGhostDir)
  65: 6304+10	9520  113081  					LD		DE,pGhostX
  66: 6314+10	9523  013181  					LD		BC,pGhostY
  67: 6324+10	9526  C3DC91  					JP		ghostMove
  68:				
  69:				
  70:     -	9529          	pGhostDecTimer:
  71: 6334+4	9529  3D      	                DEC     A
  72: 6338+13	952A  323581  	                LD      (pGhostTimer),A
  73: 6351+4	952D  B7      	                OR      A
  74: 6355+5+6	952E  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  75: 6360+7	952F  3E0F    	                LD		a, pGhostInitX	;set pGhost Pos
  76: 6367+13	9531  323081  				    LD		(pGhostX),a
  77: 6380+7	9534  3E08    				    LD		a, pGhostInitY
  78: 6387+13	9536  323181  				    LD		(pGhostY),a
  79: 6400+10	9539  C9      	                RET
  80:				
  81:     -	953A          	pGhostNextMove:
  82: 6410+7	953A  3EFF    					LD		A, 0FFH
  83: 6417+13	953C  321381  					LD		(ghostDis),A
  84: 6430+17	953F  CDF394  					CALL	pGhostMapData
  85: 6447+4	9542  57      					LD		D,A
  86: 6451+7	9543  3E57    					LD		A,	'W'			;check up
  87: 6458+17	9545  CD8A97  					CALL	isMoveValid
  88: 6475+10+7	9548  C46495  					CALL	NZ,pGhostCheckU
  89: 6485+7	954B  3E53    					LD		A,	'S'			;down
  90: 6492+17	954D  CD8A97  					CALL	isMoveValid
  91: 6509+10+7	9550  C47295  					CALL	NZ,pGhostCheckD
  92: 6519+7	9553  3E41    					LD		A,	'A'			;left
  93: 6526+17	9555  CD8A97  					CALL	isMoveValid
  94: 6543+10+7	9558  C48095  					CALL	NZ,pGhostCheckL
  95: 6553+7	955B  3E44    					LD		A,	'D'			;right
  96: 6560+17	955D  CD8A97  					CALL	isMoveValid
  97: 6577+10+7	9560  C48E95  					CALL	NZ,pGhostCheckR
  98: 6587+10	9563  C9      					RET
  99:								
 100:     -	9564          	pGhostCheckU:	
 101: 6597+11	9564  F5      					PUSH	AF
 102: 6608+13	9565  3A3181  					LD		A, (pGhostY)
 103: 6621+4	9568  3D      					DEC		A
 104: 6625+7	9569  E61F    					AND		00011111B
 105: 6632+4	956B  47      					LD		B,A
 106: 6636+13	956C  3A3081  					LD		A,(pGhostX)
 107: 6649+4	956F  4F      					LD		C,A
 108: 6653+12	9570  182A    					JR		pGhostPathFind
 109:     -	9572          	pGhostCheckD:			
 110: 6665+11	9572  F5      					PUSH	AF
 111: 6676+13	9573  3A3181  					LD		A, (pGhostY)
 112: 6689+4	9576  3C      					INC		A
 113: 6693+7	9577  E61F    					AND		00011111B
 114: 6700+4	9579  47      					LD		B,A
 115: 6704+13	957A  3A3081  					LD		A,(pGhostX)
 116: 6717+4	957D  4F      					LD		C,A
 117: 6721+12	957E  181C    					JR		pGhostPathFind
 118:     -	9580          	pGhostCheckL:		
 119: 6733+11	9580  F5      					PUSH	AF	
 120: 6744+13	9581  3A3081  					LD		A, (pGhostX)
 121: 6757+4	9584  3D      					DEC		A
 122: 6761+7	9585  E61F    					AND		00011111B
 123: 6768+4	9587  4F      					LD		C,A
 124: 6772+13	9588  3A3181  					LD		A,(pGhostY)
 125: 6785+4	958B  47      					LD		B,A
 126: 6789+12	958C  180E    					JR		pGhostPathFind
 127:     -	958E          	pGhostCheckR:
 128: 6801+11	958E  F5      					PUSH	AF	
 129: 6812+13	958F  3A3081  					LD		A, (pGhostX)
 130: 6825+4	9592  3C      					INC		A
 131: 6829+7	9593  E61F    					AND		00011111B
 132: 6836+4	9595  4F      					LD		C,A
 133: 6840+13	9596  3A3181  					LD		A,(pGhostY)
 134: 6853+4	9599  47      					LD		B,A
 135: 6857+12	959A  1800    					JR		pGhostPathFind
 136:				
 137:     -	959C          	pGhostPathFind:
 138: 6869+17	959C  CD0998  					CALL	getAddressPF
 139: 6886+13	959F  3A1381  					LD		A,(ghostDis)
 140: 6899+7	95A2  5E      					LD		E,(HL)
 141: 6906+4	95A3  BB      					CP		E
 142: 6910+11	95A4  F5      	                PUSH    AF
 143: 6921+13	95A5  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 144: 6934+4	95A8  B7      	                OR      A
 145: 6938+10	95A9  C2B395  	                JP      NZ,pGhostPFPP
 146: 6948+10	95AC  F1      	                POP     AF
 147: 6958+10	95AD  D2BF95  					JP		NC,pGhostSetNewDir
 148: 6968+10	95B0  F1      	                POP     AF
 149: 6978+10	95B1  F1      					POP		AF
 150: 6988+10	95B2  C9      					RET
 151:     -	95B3          	pGhostPFPP:
 152: 6998+10	95B3  F1      	                POP     AF
 153: 7008+10	95B4  DABF95  	                JP		C,pGhostSetNewDir
 154: 7018+7	95B7  FEFF    	                CP      0FFH
 155: 7025+10	95B9  CABF95  	                JP      Z,pGhostSetNewDir
 156: 7035+10	95BC  F1      	                POP     AF
 157: 7045+10	95BD  F1      					POP		AF
 158: 7055+10	95BE  C9      	                RET
 159:				
 160:     -	95BF          	pGhostSetNewDir:
 161: 7065+4	95BF  7B      					LD		A,E
 162: 7069+13	95C0  321381  					LD		(ghostDis),A
 163: 7082+10	95C3  F1      					POP		AF
 164: 7092+13	95C4  323281  					LD		(pGhostDir),A
 165: 7105+10	95C7  C9      					RET
 166:				
 167:     -	95C8          	pGhostColide:   
 168: 7115+13	95C8  3A0081  	                LD      A,(pacx)                ;Compair X
 169:								;CALL	NumToHex
 170: 7128+4	95CB  47      	                LD      B,A
 171: 7132+13	95CC  3A3081  	                LD      A,(pGhostX)
 172:								;CALL	NumToHex
 173: 7145+4	95CF  B8      	                CP      B
 174: 7149+5+6	95D0  C0      	                RET     NZ
 175: 7154+13	95D1  3A0181  	                LD      A,(pacy)                ;Compair Y
 176:								;CALL	NumToHex
 177: 7167+4	95D4  47      	                LD      B,A
 178: 7171+13	95D5  3A3181  	                LD      A,(pGhostY)
 179:								;CALL	NumToHex
 180: 7184+4	95D8  B8      	                CP      B
 181: 7188+5+6	95D9  C0      	                RET     NZ
 182: 7193+13	95DA  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 183: 7206+4	95DD  B7      	                OR      A
 184: 7210+10	95DE  CA5791  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 185: 7220+7	95E1  3E10    	                LD		a, pGhostStoreX	           ;set pGhost Pos
 186: 7227+13	95E3  323081  				    LD		(pGhostX),a
 187: 7240+7	95E6  3E0B    				    LD		a, pGhostStoreY
 188: 7247+13	95E8  323181  				    LD		(pGhostY),a
 189: 7260+7	95EB  3E30    	                LD		a, pGhostInitTimer
 190: 7267+13	95ED  323581  				    LD		(pGhostTimer),a
 191: 7280+10	95F0  C9      	                RET
 192:				
 193:				;x = l
 194:				;y = h
 195:     -	95F1          	pGhostStack:
 196: 7290+4	95F1  7D      					LD      A,L               		;Compair X
 197: 7294+4	95F2  47      	                LD      B,A
 198: 7298+13	95F3  3A3081  	                LD      A,(pGhostX)
 199: 7311+4	95F6  B8      	                CP      B
 200: 7315+5+6	95F7  C0      	                RET     NZ
 201: 7320+4	95F8  7C      	                LD      A,h                		;Compair Y
 202: 7324+4	95F9  47      	                LD      B,A
 203: 7328+13	95FA  3A3181  	                LD      A,(pGhostY)
 204: 7341+4	95FD  B8      	                CP      B
 205: 7345+10	95FE  C9      	                RET
 206:				
**** ghosts.asm ****
 129:     -	95FF  1B5B3935	pGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 130:				include ghosts/teal.asm
**** ghosts/teal.asm ****
   1:     -	000F          	tGhostInitX	    .EQU	15
   2:     -	0008          	tGhostInitY	    .EQU	8
   3:     -	0040          	tGhostInitTimer .EQU    40H
   4:     -	0011          	tGhostStoreX	.EQU	17 
   5:     -	000B          	tGhostStoreY	.EQU	11
   6:				
   7:     -	8140          	tGhostX		    .EQU	8140H		
   8:     -	8141          	tGhostY		    .EQU	8141H
   9:     -	8142          	tGhostDir		.EQU	8142H
  10:     -	8145          	tGhostTimer     .EQU    8145H
  11:				
  12:     -	960A          	tGhostClear:
  13: 7355+13	960A  3A4081  					LD		A, (tGhostX)		;Push X to stack
  14: 7368+4	960D  4F      					LD		C,A
  15: 7372+13	960E  3A4181  					LD		A, (tGhostY)		;Push Y to stack
  16: 7385+4	9611  47      					LD		B,A
  17: 7389+17	9612  CD2198  					CALL 	printMapAt
  18: 7406+10	9615  C9      					RET
  19:								
  20:     -	9616          	tGhostPrint:
  21: 7416+13	9616  3A4081  					LD		A, (tGhostX)		;Push X to stack
  22: 7429+4	9619  3C      					INC		A
  23: 7433+4	961A  6F      					LD		L,A
  24: 7437+7	961B  2600    					LD		H, $00			;We dont care about msb
  25: 7444+11	961D  E5      					PUSH	HL
  26: 7455+13	961E  3A4181  					LD		A, (tGhostY)		;Push Y to stack
  27: 7468+4	9621  3C      					INC		A
  28: 7472+4	9622  6F      					LD		L,A
  29: 7476+7	9623  2600    					LD		H, $00			;Again we dont care
  30: 7483+11	9625  E5      					PUSH	HL
  31: 7494+17	9626  CDC899  					CALL	moveCursor
  32: 7511+13	9629  3A0481  	                LD      A,(pPActive)
  33: 7524+4	962C  B7      	                OR      A
  34: 7528+10	962D  C2C991  	                JP      NZ, printSGhost
  35: 7538+10	9630  214397  					LD		HL, tGhost
  36: 7548+17	9633  CD3A9A  					CALL 	print
  37: 7565+10	9636  C9      					RET
  38:     -	9637          	tGhostMapData:	
  39: 7575+13	9637  3A4081  					LD		A, (tGhostX)
  40: 7588+4	963A  4F      					LD		C,A
  41: 7592+13	963B  3A4181  					LD		A, (tGhostY)
  42: 7605+4	963E  47      					LD		B,A
  43: 7609+17	963F  CDB097  					CALL	getMapAddress
  44: 7626+7	9642  7E      	                LD      A,(HL)
  45: 7633+10	9643  C9      					ret
  46:				
  47:     -	9644          	tGhostInit:   
  48: 7643+7	9644  3E11    	                LD		a, tGhostStoreX	;set tGhost Pos
  49: 7650+13	9646  324081  				    LD		(tGhostX),a
  50: 7663+7	9649  3E0B    				    LD		a, tGhostStoreY
  51: 7670+13	964B  324181  				    LD		(tGhostY),a
  52: 7683+7	964E  3E40    	                LD		a, tGhostInitTimer
  53: 7690+13	9650  324581  				    LD		(tGhostTimer),a
  54: 7703+10	9653  C9      	                RET
  55:				
  56:     -	9654          	tGhostMove:
  57: 7713+13	9654  3A4581  	                LD      A,(tGhostTimer)     ;Dont move if the ghost is in jale
  58: 7726+4	9657  B7      	                OR      A                
  59: 7730+10	9658  C26D96  	                JP      NZ,tGhostDecTimer   ;Decrement the timer if its x
  60: 7740+13	965B  3A0481  	                LD      A,(pPActive)
  61: 7753+8	965E  CB47    	                BIT     0,A                 ;Move every other tick, bit 0 will always 0 when the power pellet isnt active
  62: 7761+5+6	9660  C0      	                RET     NZ
  63: 7766+13	9661  3A4281  					LD		A,(tGhostDir)
  64: 7779+10	9664  114081  					LD		DE,tGhostX
  65: 7789+10	9667  014181  					LD		BC,tGhostY
  66: 7799+10	966A  C3DC91  					JP		ghostMove
  67:				
  68:     -	966D          	tGhostDecTimer:
  69: 7809+4	966D  3D      	                DEC     A
  70: 7813+13	966E  324581  	                LD      (tGhostTimer),A
  71: 7826+4	9671  B7      	                OR      A
  72: 7830+5+6	9672  C0      	                RET     NZ              ;IF Zero move ghost out of jale
  73: 7835+7	9673  3E0F    	                LD		a, tGhostInitX	;set tGhost Pos
  74: 7842+13	9675  324081  				    LD		(tGhostX),a
  75: 7855+7	9678  3E08    				    LD		a, tGhostInitY
  76: 7862+13	967A  324181  				    LD		(tGhostY),a
  77: 7875+10	967D  C9      	                RET
  78:				
  79:     -	967E          	tGhostNextMove:
  80: 7885+7	967E  3EFF    					LD		A, 0FFH
  81: 7892+13	9680  321381  					LD		(ghostDis),A
  82: 7905+17	9683  CD3796  					CALL	tGhostMapData
  83: 7922+4	9686  57      					LD		D,A
  84: 7926+7	9687  3E57    					LD		A,	'W'			;check up
  85: 7933+17	9689  CD8A97  					CALL	isMoveValid
  86: 7950+10+7	968C  C4A896  					CALL	NZ,tGhostCheckU
  87: 7960+7	968F  3E53    					LD		A,	'S'			;down
  88: 7967+17	9691  CD8A97  					CALL	isMoveValid
  89: 7984+10+7	9694  C4B696  					CALL	NZ,tGhostCheckD
  90: 7994+7	9697  3E41    					LD		A,	'A'			;left
  91: 8001+17	9699  CD8A97  					CALL	isMoveValid
  92: 8018+10+7	969C  C4C496  					CALL	NZ,tGhostCheckL
  93: 8028+7	969F  3E44    					LD		A,	'D'			;right
  94: 8035+17	96A1  CD8A97  					CALL	isMoveValid
  95: 8052+10+7	96A4  C4D296  					CALL	NZ,tGhostCheckR
  96: 8062+10	96A7  C9      					RET
  97:								
  98:     -	96A8          	tGhostCheckU:	
  99: 8072+11	96A8  F5      					PUSH	AF
 100: 8083+13	96A9  3A4181  					LD		A, (tGhostY)
 101: 8096+4	96AC  3D      					DEC		A
 102: 8100+7	96AD  E61F    					AND		00011111B
 103: 8107+4	96AF  47      					LD		B,A
 104: 8111+13	96B0  3A4081  					LD		A,(tGhostX)
 105: 8124+4	96B3  4F      					LD		C,A
 106: 8128+12	96B4  182A    					JR		tGhostPathFind
 107:     -	96B6          	tGhostCheckD:			
 108: 8140+11	96B6  F5      					PUSH	AF
 109: 8151+13	96B7  3A4181  					LD		A, (tGhostY)
 110: 8164+4	96BA  3C      					INC		A
 111: 8168+7	96BB  E61F    					AND		00011111B
 112: 8175+4	96BD  47      					LD		B,A
 113: 8179+13	96BE  3A4081  					LD		A,(tGhostX)
 114: 8192+4	96C1  4F      					LD		C,A
 115: 8196+12	96C2  181C    					JR		tGhostPathFind
 116:     -	96C4          	tGhostCheckL:		
 117: 8208+11	96C4  F5      					PUSH	AF	
 118: 8219+13	96C5  3A4081  					LD		A, (tGhostX)
 119: 8232+4	96C8  3D      					DEC		A
 120: 8236+7	96C9  E61F    					AND		00011111B
 121: 8243+4	96CB  4F      					LD		C,A
 122: 8247+13	96CC  3A4181  					LD		A,(tGhostY)
 123: 8260+4	96CF  47      					LD		B,A
 124: 8264+12	96D0  180E    					JR		tGhostPathFind
 125:     -	96D2          	tGhostCheckR:
 126: 8276+11	96D2  F5      					PUSH	AF	
 127: 8287+13	96D3  3A4081  					LD		A, (tGhostX)
 128: 8300+4	96D6  3C      					INC		A
 129: 8304+7	96D7  E61F    					AND		00011111B
 130: 8311+4	96D9  4F      					LD		C,A
 131: 8315+13	96DA  3A4181  					LD		A,(tGhostY)
 132: 8328+4	96DD  47      					LD		B,A
 133: 8332+12	96DE  1800    					JR		tGhostPathFind
 134:				
 135:     -	96E0          	tGhostPathFind:
 136: 8344+17	96E0  CD0998  					CALL	getAddressPF
 137: 8361+13	96E3  3A1381  					LD		A,(ghostDis)
 138: 8374+7	96E6  5E      					LD		E,(HL)
 139: 8381+4	96E7  BB      					CP		E
 140: 8385+11	96E8  F5      	                PUSH    AF
 141: 8396+13	96E9  3A0481  	                LD      A,(pPActive)            ;Check power pellet is not activ, if it is, run away
 142: 8409+4	96EC  B7      	                OR      A
 143: 8413+10	96ED  C2F796  	                JP      NZ,tGhostPFPP
 144: 8423+10	96F0  F1      	                POP     AF
 145: 8433+10	96F1  D20397  					JP		NC,tGhostSetNewDir
 146: 8443+10	96F4  F1      	                POP     AF
 147: 8453+10	96F5  F1      					POP		AF
 148: 8463+10	96F6  C9      					RET
 149:     -	96F7          	tGhostPFPP:
 150: 8473+10	96F7  F1      	                POP     AF
 151: 8483+10	96F8  DA0397  	                JP		C,tGhostSetNewDir
 152: 8493+7	96FB  FEFF    	                CP      0FFH
 153: 8500+10	96FD  CA0397  	                JP      Z,tGhostSetNewDir
 154: 8510+10	9700  F1      	                POP     AF
 155: 8520+10	9701  F1      					POP		AF
 156: 8530+10	9702  C9      	                RET
 157:				
 158:     -	9703          	tGhostSetNewDir:
 159: 8540+4	9703  7B      					LD		A,E
 160: 8544+13	9704  321381  					LD		(ghostDis),A
 161: 8557+10	9707  F1      					POP		AF
 162: 8567+13	9708  324281  					LD		(tGhostDir),A
 163: 8580+10	970B  C9      					RET
 164:				
 165:     -	970C          	tGhostColide:   
 166: 8590+13	970C  3A0081  	                LD      A,(pacx)                ;Compair X
 167:								;CALL	NumToHex
 168: 8603+4	970F  47      	                LD      B,A
 169: 8607+13	9710  3A4081  	                LD      A,(tGhostX)
 170:								;CALL	NumToHex
 171: 8620+4	9713  B8      	                CP      B
 172: 8624+5+6	9714  C0      	                RET     NZ
 173: 8629+13	9715  3A0181  	                LD      A,(pacy)                ;Compair Y
 174:								;CALL	NumToHex
 175: 8642+4	9718  47      	                LD      B,A
 176: 8646+13	9719  3A4181  	                LD      A,(tGhostY)
 177:								;CALL	NumToHex
 178: 8659+4	971C  B8      	                CP      B
 179: 8663+5+6	971D  C0      	                RET     NZ
 180: 8668+13	971E  3A0481  	                LD      A,(pPActive)              ;Colishion Happened
 181: 8681+4	9721  B7      	                OR      A
 182: 8685+10	9722  CA5791  	                JP      Z,killPacman               ;If power pellet not active, run genric deth lib
 183: 8695+7	9725  3E11    	                LD		a, tGhostStoreX	           ;set tGhost Pos
 184: 8702+13	9727  324081  				    LD		(tGhostX),a
 185: 8715+7	972A  3E0B    				    LD		a, tGhostStoreY
 186: 8722+13	972C  324181  				    LD		(tGhostY),a
 187: 8735+7	972F  3E40    	                LD		a, tGhostInitTimer
 188: 8742+13	9731  324581  				    LD		(tGhostTimer),a
 189: 8755+10	9734  C9      	                RET
 190:				
 191:				;x = l
 192:				;y = h
 193:     -	9735          	tGhostStack:
 194: 8765+4	9735  7D      					LD      A,L               		;Compair X
 195: 8769+4	9736  47      	                LD      B,A
 196: 8773+13	9737  3A4081  	                LD      A,(tGhostX)
 197: 8786+4	973A  B8      	                CP      B
 198: 8790+5+6	973B  C0      	                RET     NZ
 199: 8795+4	973C  7C      	                LD      A,h                		;Compair Y
 200: 8799+4	973D  47      	                LD      B,A
 201: 8803+13	973E  3A4181  	                LD      A,(tGhostY)
 202: 8816+4	9741  B8      	                CP      B
 203: 8820+10	9742  C9      	                RET
 204:				
**** ghosts.asm ****
 131:     -	9743  1B5B3936	tGhost:		.BYTE	1BH,"[96mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 132:				
 133:				
 134:     -	974E  1B5B3334	sGhost0:	.BYTE	1BH,"[34mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
**** main.asm ****
  63:     -	9759  1B5B3937	sGhost1:	.BYTE	1BH,"[97mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
  64:				;-----------Spesific Libs -----;
  65:				include movelibs.asm	
**** movelibs.asm ****
   1:     -	9764          	move:
   2: 8830+7	9764  FE57    					CP		'W'
   3: 8837+7+5	9766  280A    					JR		Z,moveU
   4: 8844+7	9768  FE41    					CP		'A'
   5: 8851+7+5	976A  2812    					JR		Z,moveL
   6: 8858+7	976C  FE53    					CP		'S'
   7: 8865+7+5	976E  2808    					JR		Z,moveD
   8: 8872+12	9770  1812    					JR		moveR
   9:				
  10:     -	9772          	moveU:			
  11: 8884+7	9772  0A      					LD		A, (BC)
  12: 8891+4	9773  3D      					DEC		A
  13: 8895+7	9774  E61F    					AND		00011111B
  14: 8902+7	9776  02      					LD		(BC),A
  15: 8909+10	9777  C9      					RET
  16:     -	9778          	moveD:			
  17: 8919+7	9778  0A      					LD		A, (BC)
  18: 8926+4	9779  3C      					INC		A
  19: 8930+7	977A  E61F    					AND		00011111B
  20: 8937+7	977C  02      					LD		(BC),A
  21: 8944+10	977D  C9      					RET
  22:     -	977E          	moveL:			
  23: 8954+7	977E  1A      					LD		A, (DE)
  24: 8961+4	977F  3D      					DEC		A
  25: 8965+7	9780  E61F    					AND		00011111B
  26: 8972+7	9782  12      					LD		(DE),A
  27: 8979+10	9783  C9      					RET
  28:     -	9784          	moveR:			
  29: 8989+7	9784  1A      					LD		A, (DE)
  30: 8996+4	9785  3C      					INC		A
  31: 9000+7	9786  E61F    					AND		00011111B
  32: 9007+7	9788  12      					LD		(DE),A
  33: 9014+10	9789  C9      					RET
  34:     -	978A          	isMoveValid:
  35: 9024+7	978A  FE57    					CP		'W'
  36: 9031+7+5	978C  280A    					JR		Z,moveUValid
  37: 9038+7	978E  FE41    					CP		'A'
  38: 9045+7+5	9790  280C    					JR		Z,moveLValid
  39: 9052+7	9792  FE53    					CP		'S'
  40: 9059+7+5	9794  2805    					JR		Z,moveDValid
  41: 9066+12	9796  1809    					JR		moveRValid
  42:     -	9798          	moveUValid:			
  43: 9078+8	9798  CB42    					BIT		upBit,D
  44: 9086+10	979A  C9      					RET
  45:     -	979B          	moveDValid:			
  46: 9096+8	979B  CB4A    					BIT		downBit,D
  47: 9104+10	979D  C9      					RET
  48:     -	979E          	moveLValid:			
  49: 9114+8	979E  CB52    					BIT		leftBit,D
  50: 9122+10	97A0  C9      					RET
  51:     -	97A1          	moveRValid:			
  52: 9132+8	97A1  CB5A    					BIT		rightBit,D
**** main.asm ****
  66: 9140+10	97A3  C9      					RET
  67:				include	mapLibs.asm	
**** mapLibs.asm ****
   1:     -	0030          	pathFindDepth   .EQU	30H
   2:				
   3:				;-------- Map -------;
   4:				;InitiMap
   5:     -	97A4          	initMap:
   6: 9150+10	97A4  010004  					LD		BC,400H
   7: 9160+10	97A7  2100C0  					LD		HL,map
   8: 9170+10	97AA  1100E0  					LD		DE,liveMap
   9: 9180+16+5	97AD  EDB0    					LDIR
  10: 9196+10	97AF  C9      					RET
  11:				
  12:				;------- Get Map Data ----;
  13:				; C - X
  14:				; B	- Y
  15:     -	97B0          	getMapAddress:
  16: 9206+11	97B0  C5      					push	bc
  17: 9217+8	97B1  CB00    					rlc		b			;Shift b left 5
  18: 9225+8	97B3  CB00    					rlc		b			;Shift b left 5
  19: 9233+8	97B5  CB00    					rlc		b			;Shift b left 5
  20: 9241+8	97B7  CB00    					rlc		b			;Shift b left 5
  21: 9249+8	97B9  CB00    					rlc		b			;Shift b left 5
  22: 9257+4	97BB  78      					ld		a,b
  23: 9261+7	97BC  E6E0    					and		11100000b	;Mask lower adress
  24: 9268+4	97BE  B1      					or		c			;Combine with C
  25: 9272+4	97BF  6F      					ld		l,a			;A is now low byte of adress
  26: 9276+4	97C0  78      					ld		a,b
  27: 9280+7	97C1  E603    					and		00000011b	;Mask upper adress
  28: 9287+7	97C3  F6E0    					or		0E0H		;Start of map
  29: 9294+4	97C5  67      					ld		h,a
  30: 9298+10	97C6  C1      					pop		bc
  31: 9308+10	97C7  C9      					ret
  32:				
  33:				;--------Check map for pellets ------;
  34:     -	97C8          	checkNextLevel:
  35: 9318+17	97C8  CDE197  					call	checkMap
  36: 9335+4	97CB  7B      					LD		A,E
  37: 9339+17	97CC  CD0A9A  					CALL	NumToHex
  38: 9356+4	97CF  B7      					OR		A
  39: 9360+5+6	97D0  C0      					RET		NZ
  40: 9365+4	97D1  7A      					LD		A,D
  41: 9369+17	97D2  CD0A9A  					CALL	NumToHex
  42: 9386+4	97D5  B7      					OR		A
  43: 9390+5+6	97D6  C0      					RET		NZ
  44:				
  45: 9395+17	97D7  CDA497  					CALL	initMap
  46: 9412+17	97DA  CDAF91  					CALL	initGhost
  47: 9429+17	97DD  CD9190  					CALL	resetPacman
  48: 9446+10	97E0  C9      					ret
  49:				
  50:     -	97E1          	checkMap:
  51: 9456+7	97E1  3E20    					ld		a,32
  52: 9463+4	97E3  47      					ld		b,a			; 32 chars per line
  53: 9467+4	97E4  4F      					ld		c,a			; 32 lines per map
  54: 9471+10	97E5  2100E0  					ld		hl,liveMap
  55: 9481+10	97E8  110000  					ld		de,0
  56: 9491+7	97EB  7E      	checkMapLoop:	ld		a,(hl)		; get char
  57: 9498+17	97EC  CDFC97  					call	checkMapChar; check the char
  58: 9515+6	97EF  23      					inc		hl			; next char
  59: 9521+8+5	97F0  10F9    					djnz	checkMapLoop; if were not at the end of a line, print next char
  60: 9529+4	97F2  41      					ld		b,c			;are we at the end of a block
  61: 9533+8+5	97F3  1001    					djnz	checkMapNextLine
  62: 9541+10	97F5  C9      					ret
  63:     -	97F6          	checkMapNextLine:	
  64: 9551+4	97F6  48      					ld		c,b			;copy decremented b back to c
  65: 9555+7	97F7  3E20    					ld 		a,32		;refill b withj 32
  66: 9562+4	97F9  47      					ld		b,a
  67: 9566+12	97FA  18EF    					jr		checkMapLoop;draw next char
  68:				
  69:     -	97FC          	checkMapChar:
  70: 9578+8	97FC  CB6F    					bit		pelletBit,a
  71: 9586+10+7	97FE  C40798  					CALL	NZ,incrementDE
  72: 9596+8	9801  CB67    					bit		powerpBit,a
  73: 9604+10+7	9803  C40798  					CALL	NZ,incrementDE
  74: 9614+10	9806  C9      					RET
  75:     -	9807          	incrementDE:
  76: 9624+6	9807  13      					INC		DE
  77: 9630+10	9808  C9      					RET
  78:				
  79:				;------- Get Path Find Map Address----;
  80:				; C - X
  81:				; B	- Y
  82:     -	9809          	getAddressPF:
  83: 9640+11	9809  C5      					push	bc
  84: 9651+8	980A  CB00    					rlc		b			;Shift b left 5
  85: 9659+8	980C  CB00    					rlc		b			;Shift b left 5
  86: 9667+8	980E  CB00    					rlc		b			;Shift b left 5
  87: 9675+8	9810  CB00    					rlc		b			;Shift b left 5
  88: 9683+8	9812  CB00    					rlc		b			;Shift b left 5
  89: 9691+4	9814  78      					ld		a,b
  90: 9695+7	9815  E6E0    					and		11100000b	;Mask lower adress
  91: 9702+4	9817  B1      					or		c			;Combine with C
  92: 9706+4	9818  6F      					ld		l,a			;A is now low byte of adress
  93: 9710+4	9819  78      					ld		a,b
  94: 9714+7	981A  E603    					and		00000011b	;Mask upper adress
  95: 9721+7	981C  F6D0    					or		0D0H		;Start of map
  96: 9728+4	981E  67      					ld		h,a
  97: 9732+10	981F  C1      					pop		bc
  98: 9742+10	9820  C9      					ret
  99:				
 100:				
 101:				;--------- Map print -------- ;
 102:				; C - X
 103:				; B	- Y
 104:     -	9821          	printMapAt:	
 105: 9752+11	9821  C5      				PUSH	BC
 106: 9763+4	9822  0C      				INC		C
 107: 9767+4	9823  69      				LD		L,C
 108: 9771+7	9824  2600    				LD		H, $00			;We dont care about msb
 109: 9778+11	9826  E5      				PUSH	HL
 110: 9789+4	9827  04      				INC		B
 111: 9793+4	9828  68      				LD		L,B
 112: 9797+7	9829  2600    				LD		H, $00			;Again we dont care
 113: 9804+11	982B  E5      				PUSH	HL
 114: 9815+17	982C  CDC899  				CALL	moveCursor
 115: 9832+10	982F  C1      				POP 	BC
 116: 9842+17	9830  CDB097  				CALL	getMapAddress
 117: 9859+7	9833  7E      				LD		A,(HL)
 118: 9866+17	9834  CD5398  				CALL	pmChar
 119: 9883+10	9837  C9      				RET
 120:				
 121:     -	9838          	printMap:
 122: 9893+7	9838  3E20    					ld		a,32
 123: 9900+4	983A  47      					ld		b,a			; 32 chars per line
 124: 9904+4	983B  4F      					ld		c,a			; 32 lines per map
 125: 9908+10	983C  2100E0  					ld		hl,liveMap
 126: 9918+7	983F  7E      	pmLoop:			ld		a,(hl)		; get char
 127: 9925+17	9840  CD5398  					call	pmChar		; decode what to print
 128: 9942+6	9843  23      					inc		hl			; next char
 129: 9948+8+5	9844  10F9    					djnz	pmLoop		; if were not at the end of a line, print next char
 130: 9956+17	9846  CDBF99  					call	newline		; if we are, print a new line
 131: 9973+4	9849  41      					ld		b,c			;are we at the end of a block
 132: 9977+8+5	984A  1001    					djnz	pmNextLine
 133: 9985+10	984C  C9      					ret
 134:     -	984D          	pmNextLine:	
 135: 9995+4	984D  48      					ld		c,b			;copy decremented b back to c
 136: 9999+7	984E  3E20    					ld 		a,32		;refill b withj 32
 137:10006+4	9850  47      					ld		b,a
 138:10010+12	9851  18EC    					jr		pmLoop		;draw next char
 139:				
 140:				
 141:     -	9853          	pmChar:		;-- Print map char a
 142:10022+11	9853  E5      					push	hl
 143:10033+8	9854  CB67    					bit		powerpBit,a
 144:10041+7+5	9856  200E    					jr		nz,printPP
 145:10048+8	9858  CB6F    					bit		pelletBit,a
 146:10056+7+5	985A  2012    					jr		nz,printP
 147:10063+8	985C  CB77    					bit		wallBit,a
 148:10071+7+5	985E  2016    					jr		nz,printWall
 149:10078+8	9860  CB7F    					bit		sfBit,a
 150:10086+7+5	9862  201A    					jr		nz,printSF
 151:10093+12	9864  1820    					jr	 	printVoid
 152:							
 153:     -	9866          	printPP:
 154:10105+10	9866  21579A  					ld		hl,powerPellet
 155:10115+17	9869  CD3A9A  					call	print
 156:10132+12	986C  1820    					jr		pmCharRet
 157:     -	986E          	printP:
 158:10144+10	986E  21629A  					ld		hl,pellet
 159:10154+17	9871  CD3A9A  					call	print
 160:10171+12	9874  1818    					jr		pmCharRet
 161:     -	9876          	printWall:
 162:10183+10	9876  214C9A  					ld		hl,wall
 163:10193+17	9879  CD3A9A  					call	print
 164:10210+12	987C  1810    					jr		pmCharRet
 165:     -	987E          	printSF:
 166:10222+10	987E  216D9A  					ld		hl,superFruit
 167:10232+17	9881  CD3A9A  					call	print
 168:10249+12	9884  1808    					jr		pmCharRet
 169:     -	9886          	printVoid:
 170:10261+10	9886  21789A  					ld		hl,void
 171:10271+17	9889  CD3A9A  					call	print
 172:10288+12	988C  1800    					jr		pmCharRet
 173:     -	988E          	pmCharRet:	
 174:10300+10	988E  E1      					pop 	hl
 175:10310+10	988F  C9      					ret
 176:								
 177:				;-------- Path Find Map -------;
 178:				;Initi Path Find Map
 179:     -	9890          	initPathFind:
 180:10320+7	9890  3E20    					ld		a,32
 181:10327+4	9892  47      					ld		b,a			; 32 chars per line
 182:10331+4	9893  4F      					ld		c,a			; 32 lines per map
 183:10335+10	9894  2100D0  					ld		hl,pathFindMap
 184:10345+7	9897  16FF    	initpPFLoop:	ld		D,0FFH		; set char
 185:10352+7	9899  72      					LD		(HL),D
 186:10359+6	989A  23      					inc		hl			; next char
 187:10365+8+5	989B  10FA    					djnz	initpPFLoop		; if were not at the end of a line, print next char
 188:10373+4	989D  41      					ld		b,c			;are we at the end of a block
 189:10377+8+5	989E  1001    					djnz	pfNextRow
 190:10385+10	98A0  C9      					ret
 191:     -	98A1          	pfNextRow:	
 192:10395+4	98A1  48      					ld		c,b			;copy decremented b back to c
 193:10399+7	98A2  3E20    					ld 		a,32		;refill b withj 32
 194:10406+4	98A4  47      					ld		b,a
 195:10410+10	98A5  C39798  					jp		initpPFLoop		;draw next char
 196:				
 197:				;Calculate Map
 198:     -	98A8          	calculatePathMap:
 199:10420+10	98A8  01FFFF  					ld		BC,0FFFFH		;Push Stack terminator		
 200:10430+11	98AB  C5      					PUSH	BC
 201:10441+13	98AC  3A0081  					LD		A, (pacx)		;Push X to stack
 202:10454+4	98AF  4F      					LD		C,A
 203:10458+13	98B0  3A0181  					LD		A, (pacy)		;Push Y to stack
 204:10471+4	98B3  47      					LD		B,A
 205:10475+17	98B4  CD0998  					CALL	getAddressPF
 206:10492+10	98B7  3600    					LD		(HL),00H
 207:10502+11	98B9  C5      					PUSH	BC
 208:     -	98BA          	calculatePathMapLoop:
 209:10513+10	98BA  C1      					POP		BC			;Get node to visit
 210:10523+4	98BB  78      					LD		A,B			;Check Its not FFFF
 211:10527+4	98BC  B7      					OR		A
 212:10531+7	98BD  FEFF    					CP		0FFH
 213:10538+5+6	98BF  C8      					RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
 214:10543+20	98C0  ED43F289					LD		(originalBC),BC
 215:10563+17	98C4  CD0998  					CALL	getAddressPF
 216:10580+7	98C7  7E      					LD		A,(HL)
 217:10587+4	98C8  3C      					INC		A
 218:10591+7	98C9  FE30    	                CP      pathFindDepth
 219:10598+10	98CB  CABA98  					JP 		Z,calculatePathMapLoop	;Skip if wer getting too long
 220:10608+4	98CE  5F      					LD		E,A			;Keep the distance were working with safe
 221:10612+17	98CF  CDB097  					CALL	getMapAddress
 222:10629+7	98D2  56      					LD		D,(HL)
 223:10636+7	98D3  3E57    					LD		A,	'W'			;check up
 224:10643+17	98D5  CD8A97  					CALL	isMoveValid
 225:10660+10+7	98D8  C4F698  					CALL	NZ,calculateMapU
 226:10670+7	98DB  3E53    					LD		A,	'S'			;down
 227:10677+17	98DD  CD8A97  					CALL	isMoveValid
 228:10694+10+7	98E0  C40299  					CALL	NZ,calculateMapD
 229:10704+7	98E3  3E41    					LD		A,	'A'			;left
 230:10711+17	98E5  CD8A97  					CALL	isMoveValid
 231:10728+10+7	98E8  C40E99  					CALL	NZ,calculateMapL
 232:10738+7	98EB  3E44    					LD		A,	'D'			;right
 233:10745+17	98ED  CD8A97  					CALL	isMoveValid
 234:10762+10+7	98F0  C41A99  					CALL	NZ,calculateMapR
 235:10772+10	98F3  C3BA98  					JP		calculatePathMapLoop
 236:								
 237:     -	98F6          	calculateMapU:	
 238:10782+20	98F6  ED4BF289					LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
 239:10802+4	98FA  78      					LD		A, B				;Make modifications to corod
 240:10806+4	98FB  3D      					DEC		A
 241:10810+7	98FC  E61F    					AND		00011111B			;Mask for looping
 242:10817+4	98FE  47      					LD		B,A
 243:10821+10	98FF  C32699  					JP		calculateMapCell
 244:     -	9902          	calculateMapD:	
 245:10831+20	9902  ED4BF289					LD		BC,(originalBC)	
 246:10851+4	9906  78      					LD		A, B
 247:10855+4	9907  3C      					INC		A
 248:10859+7	9908  E61F    					AND		00011111B
 249:10866+4	990A  47      					LD		B,A
 250:10870+10	990B  C32699  					JP		calculateMapCell
 251:     -	990E          	calculateMapL:	
 252:10880+20	990E  ED4BF289					LD		BC,(originalBC)
 253:10900+4	9912  79      					LD		A, C
 254:10904+4	9913  3D      					DEC		A
 255:10908+7	9914  E61F    					AND		00011111B
 256:10915+4	9916  4F      					LD		C,A
 257:10919+10	9917  C32699  					JP		calculateMapCell
 258:     -	991A          	calculateMapR:
 259:10929+20	991A  ED4BF289					LD		BC,(originalBC)
 260:10949+4	991E  79      					LD		A, C
 261:10953+4	991F  3C      					INC		A
 262:10957+7	9920  E61F    					AND		00011111B
 263:10964+4	9922  4F      					LD		C,A
 264:10968+10	9923  C32699  					JP		calculateMapCell
 265:				
 266:     -	9926          	calculateMapCell:
 267:10978+17	9926  CD0998  					CALL	getAddressPF
 268:10995+7	9929  7E      					LD		A,(HL)
 269:				
 270:11002+4	992A  BB      					CP		E			;Compare current data (A) with E (the path were looking at)
 271:11006+5+6	992B  D8      					RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
 272:11011+5+6	992C  C8      					RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
 273:11016+7	992D  73      					LD		(HL),E
 274:11023+10	992E  E1      					POP		HL			;We need the return adress on the top of the stack
 275:11033+11	992F  C5      					PUSH	BC			;Push Cell so it can be visited
 276:11044+11	9930  E5      					PUSH	HL
 277:11055+10	9931  C9      					RET
 278:				
 279:     -	9932          	printPFMap:
 280:11065+10	9932  210100  	                LD		HL, $01
 281:11075+11	9935  E5      					PUSH	HL
 282:11086+10	9936  211A00  					LD		HL, $1A
 283:11096+11	9939  E5      					PUSH	HL
 284:11107+17	993A  CDC899  					CALL	moveCursor
 285:11124+7	993D  3E20    					ld		a,32
 286:11131+4	993F  47      					ld		b,a			; 32 chars per line
 287:11135+7	9940  3E1A    	                ld		a,$1A
 288:11142+4	9942  4F      					ld		c,a			; 32 lines per map
 289:11146+10	9943  2100D0  					ld		hl,pathFindMap
 290:11156+7	9946  7E      	pmPFLoop:		ld		a,(hl)		; get char
 291:11163+7	9947  FEFF    	                cp      0FFH
 292:11170+10	9949  CA6299  	                JP      Z,pmPFSkip
 293:11180+17	994C  CD0A9A  					call	NumToHex	; decode what to print
 294:11197+7	994F  3E20    	pmPFAfterSkip:  ld      a,' '
 295:11204+11	9951  CF      	                rst     08H
 296:11215+6	9952  23      					inc		hl			; next char
 297:11221+8+5	9953  10F1    					djnz	pmPFLoop		; if were not at the end of a line, print next char
 298:11229+17	9955  CDBF99  					call	newline		; if we are, print a new line
 299:11246+4	9958  41      					ld		b,c			;are we at the end of a block
 300:11250+8+5	9959  1001    					djnz	pmPFNextLine
 301:11258+10	995B  C9      					ret
 302:     -	995C          	pmPFNextLine:	
 303:11268+4	995C  48      					ld		c,b			;copy decremented b back to c
 304:11272+7	995D  3E20    					ld 		a,32		;refill b withj 32
 305:11279+4	995F  47      					ld		b,a
 306:11283+12	9960  18E4    					jr		pmPFLoop	;draw next char
 307:     -	9962          	pmPFSkip:       
 308:11295+7	9962  3E20    	                ld      a,' '
 309:11302+11	9964  CF      	                rst     08H
 310:11313+7	9965  3E20    	                ld      a,' '
 311:11320+11	9967  CF      	                rst     08H
**** main.asm ****
  68:11331+10	9968  C34F99  	                JP      pmPFAfterSkip
  69:				
  70:				;------HUD;
  71:				include hud.asm
**** hud.asm ****
   1:     -	8900          	score			.EQU	8900H		;Score
   2:				
   3:     -	996B          	printHud:
   4:11341+17	996B  CD7299  					CALL	printScore
   5:11358+17	996E  CD9099  					CALL	printLives
   6:11375+10	9971  C9      					RET
   7:     -	9972          	printScore:					
   8:11385+10	9972  210200  					LD		HL, $02
   9:11395+11	9975  E5      					PUSH	HL
  10:11406+10	9976  212300  					LD		HL, $23
  11:11416+11	9979  E5      					PUSH	HL
  12:11427+17	997A  CDC899  					CALL	moveCursor
  13:11444+10	997D  21B399  					LD		HL, scoreHUD
  14:11454+17	9980  CD3A9A  					CALL 	print
  15:11471+16	9983  2A0089  					LD		HL, (score)
  16:11487+17	9986  CDDF99  					CALL	HLToDec
  17:11504+7	9989  3E0A    					LD		A,LF
  18:11511+11	998B  CF      					RST     08H
  19:11522+7	998C  3E0D    					LD		A,CR
  20:11529+11	998E  CF      					RST     08H
  21:11540+10	998F  C9      					RET
  22:				
  23:     -	9990          	printLives:					
  24:11550+10	9990  210200  					LD		HL, $02
  25:11560+11	9993  E5      					PUSH	HL
  26:11571+10	9994  212400  					LD		HL, $24
  27:11581+11	9997  E5      					PUSH	HL
  28:11592+17	9998  CDC899  					CALL	moveCursor
  29:11609+13	999B  3A0581  					LD 		A,(pacLives)
  30:11622+4	999E  3D      					DEC		A
  31:11626+4	999F  B7      					OR		A
  32:11630+10	99A0  CAAC99  					JP		Z,removeOldLives
  33:11640+4	99A3  47      					LD		B,A
  34:11644+10	99A4  217091  	printLivesLoop:	LD		HL, pacman
  35:11654+17	99A7  CD3A9A  					CALL 	print
  36:11671+8+5	99AA  10F8    					DJNZ	printLivesLoop
  37:11679+10	99AC  21BB99  	removeOldLives:	LD		HL, liveBlanking
  38:11689+17	99AF  CD3A9A  					CALL 	print
  39:11706+10	99B2  C9      					RET
  40:				
  41:     -	99B3  53636F72	scoreHUD:     	.BYTE "Score: ",0
	              653A2000
**** main.asm ****
  72:     -	99BB  20202000	liveBlanking	.BYTE "   ",0
  73:							
  74:				;------- Libs ------------;
  75:				include libs.asm
**** libs.asm ****
   1:     -	8888          	seed			.EQU	8888H		;Random seed
   2:				
   3:     -	99BF          	newline:			
   4:11716+11	99BF  F5      					push 	af
   5:11727+7	99C0  3E0D    					ld		a, CR
   6:11734+11	99C2  CF      					rst 	08H
   7:11745+7	99C3  3E0A    					ld		a, LF
   8:11752+11	99C5  CF      					rst 	08H
   9:11763+10	99C6  F1      					pop 	af
  10:11773+10	99C7  C9      					ret
  11:							
  12:				;move cursor to (sp,sp-2)				
  13:     -	99C8          	moveCursor:		
  14:11783+10	99C8  D1      					POP		DE
  15:11793+7	99C9  3E1B    					LD		A,$1B
  16:11800+11	99CB  CF      					RST     08H
  17:11811+7	99CC  3E5B    					LD		A,'['
  18:11818+11	99CE  CF      					RST     08H
  19:11829+10	99CF  E1      					POP		HL
  20:11839+17	99D0  CDDF99  					CALL	HLToDec
  21:11856+7	99D3  3E3B    					LD		A,$3B
  22:11863+11	99D5  CF      					RST     08H
  23:11874+10	99D6  E1      					POP		HL
  24:11884+17	99D7  CDDF99  					CALL	HLToDec
  25:11901+7	99DA  3E66    					LD		A,'f'
  26:11908+11	99DC  CF      					RST     08H
  27:11919+11	99DD  D5      					PUSH	DE
  28:11930+10	99DE  C9      					RET
  29:				
  30:				;Prints	hl as decimal			
  31:     -	99DF          	HLToDec:
  32:11940+11	99DF  F5      					PUSH	AF
  33:11951+11	99E0  C5      					PUSH	BC
  34:11962+17	99E1  CDE799  					CALL	DispHL
  35:11979+10	99E4  C1      					POP		BC
  36:11989+10	99E5  F1      					POP		AF
  37:11999+10	99E6  C9      					RET
  38:     -	99E7          	DispHL:
  39:12009+10	99E7  01F0D8  					ld		bc,-10000
  40:12019+17	99EA  CD009A  					call	Num1
  41:12036+10	99ED  0118FC  					ld		bc,-1000
  42:12046+17	99F0  CD009A  					call	Num1
  43:12063+10	99F3  019CFF  					ld		bc,-100
  44:12073+17	99F6  CD009A  					call	Num1
  45:12090+7	99F9  0EF6    					ld		c,-10
  46:12097+17	99FB  CD009A  					call	Num1
  47:12114+7	99FE  0EFF    					ld		c,-1
  48:12121+7	9A00  3E2F    	Num1:			ld		a,'0'-1
  49:12128+4	9A02  3C      	Num2:			inc		a
  50:12132+11	9A03  09      					add		hl,bc
  51:12143+7+5	9A04  38FC    					jr		c,Num2
  52:12150+15	9A06  ED42    					sbc		hl,bc
  53:12165+11	9A08  CF      					RST     08H
  54:12176+10	9A09  C9      					ret
  55:				;Print A as HEX				
  56:     -	9A0A          	NumToHex:    	
  57:12186+11	9A0A  C5      					push	bc
  58:12197+11	9A0B  F5      	                push    af
  59:12208+4	9A0C  4F      					ld 		c, a   		; a = number to convert
  60:12212+17	9A0D  CD199A  	            	call 	Num1H
  61:12229+11	9A10  CF      	            	RST     08H
  62:12240+4	9A11  79      	            	ld 		a, c
  63:12244+17	9A12  CD1D9A  	            	call 	Num2H
  64:12261+11	9A15  CF      	            	RST     08H
  65:12272+10	9A16  F1      	                pop     af
  66:12282+10	9A17  C1      					pop		bc
  67:12292+10	9A18  C9      	            	ret
  68:				
  69:12302+4	9A19  1F      	Num1H:        	rra
  70:12306+4	9A1A  1F      	            	rra
  71:12310+4	9A1B  1F      	            	rra
  72:12314+4	9A1C  1F      	           		rra
  73:12318+7	9A1D  F6F0    	Num2H:        	or 		$F0
  74:12325+4	9A1F  27      	            	daa
  75:12329+7	9A20  C6A0    	            	add 	a, $A0
  76:12336+7	9A22  CE40    	            	adc 	a, $40 		; Ascii hex at this point (0 to F)   
  77:12343+10	9A24  C9      	            	ret
  78:				
  79:				;Get ABS of A
  80:     -	9A25          	absA:
  81:12353+4	9A25  B7      	     or a
  82:12357+5+6	9A26  F0      	     ret p
  83:12362+8	9A27  ED44    	     neg
  84:12370+10	9A29  C9      	     ret
  85:				
  86:				;getArAndomA	 
  87:     -	9A2A          	randomA:				
  88:12380+13	9A2A  3A8888  					ld a, 	(seed)
  89:12393+4	9A2D  47      					ld b, 	a 
  90:				
  91:12397+4	9A2E  0F      					rrca ; multiply by 32
  92:12401+4	9A2F  0F      					rrca
  93:12405+4	9A30  0F      					rrca
  94:12409+7	9A31  EE1F    					xor $1f
  95:				
  96:12416+4	9A33  80      					add 	a, b
  97:12420+7	9A34  DEFF    					sbc a, 255 ; carry
  98:				
  99:12427+13	9A36  328888  					ld (seed), a
 100:12440+10	9A39  C9      					ret
 101:				
 102:				;------- Print string
 103:12450+11	9A3A  F5      	print:			PUSH 	AF				; Preserve AF				
 104:12461+7	9A3B  7E      	printLoop:      LD      A,(HL)          ; Get character
 105:12468+4	9A3C  B7      	                OR      A               ; Is it $00 ?
 106:12472+7+5	9A3D  2804    	                JR     	Z,printRet      ; Then RETurn on terminator
 107:12479+11	9A3F  CF      	                RST     08H             ; Print it
 108:12490+6	9A40  23      	                INC     HL              ; Next Character
 109:12496+12	9A41  18F8    	                JR      printLoop       ; Continue until $00
 110:								
 111:				;delay loop
 112:     -	9A43          	printRet:		
 113:12508+10	9A43  F1      					POP		AF
 114:12518+10	9A44  C9      					RET
 115:     -	9A45          	delay:
 116:12528+4	9A45  00      					NOP
 117:12532+6	9A46  0B      					DEC 	BC
 118:12538+4	9A47  78      					LD 		A,B
 119:12542+4	9A48  B1      					OR 		C
 120:12546+5+6	9A49  C8      					RET 	Z
**** main.asm ****
  76:12551+12	9A4A  18F9    					JR 		delay
  77:				
  78:				;Strings
  79:     -	9A4C  1B5B3334	wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
	              6D231B5B
	              306D00
  80:     -	9A57  1B5B3937	powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
	              6D6F1B5B
	              306D00
  81:     -	9A62  1B5B3337	pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
	              6D2A1B5B
	              306D00
  82:     -	9A6D  1B5B3331	superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
	              6D401B5B
	              306D00
  83:     -	9A78  2000    	void:			.BYTE	" ",0
  84:				
  85:     -	9A7A  1B5B481B	cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
	              5B324A00
  86:     -	9A82  1B5B3F32	hideCursor:	  	.BYTE	1BH,"[?25l",0
	              356C00
  87:     -	9A89  1B5B3F32	showCursor:	  	.BYTE	1BH,"[?25h",0
	              356800
  88:				
  89:				;----- Map ------		
  90:     -	C000          		.ORG 0C000H
  91:				include map.asm
**** map.asm ****
   1:				;----- Map data bit positions
   2:     -	0000          	upBit			.EQU	0
   3:     -	0001          	downBit			.EQU	1
   4:     -	0002          	leftBit			.EQU	2
   5:     -	0003          	rightBit		.EQU	3
   6:     -	0004          	powerpBit		.EQU	4
   7:     -	0005          	pelletBit		.EQU	5
   8:     -	0006          	wallBit			.EQU	6
   9:     -	0007          	sfBit			.EQU	7
  10:				
  11:				;----Pellet
  12:     -	0040          	ww 		.EQU	40H
  13:				
  14:     -	002C          	hp 		.EQU	2CH		;left 	right	pellet
  15:     -	0023          	gp		.EQU	23H		;up		down	pellet
  16:				
  17:     -	0026          	lp		.EQU	26H		;down 	left 	pellet
  18:     -	002A          	rp		.EQU	2AH		;down 	right	pellet
  19:     -	0025          	up		.EQU	25H		;up 	left	pellet
  20:     -	0029          	dp		.EQU	29H		;up 	right	pellet
  21:				
  22:     -	002B          	bp		.EQU	2BH		;up		down	right	pellet
  23:     -	0027          	cp		.EQU	27H		;up		down	left	pellet
  24:     -	002E          	vp		.EQU	2EH		;down	left	right	pellet
  25:     -	002D          	kp		.EQU	2DH		;up		left	right	pellet
  26:				
  27:     -	002F          	xp		.EQU	2FH		;all	pellet
  28:				;------- No pellet
  29:     -	000C          	hn 		.EQU	0CH		;left 	right	pellet
  30:     -	0003          	gn		.EQU	03H		;up		down	pellet
  31:				
  32:     -	0006          	ln		.EQU	06H		;down 	left 	pellet
  33:     -	000A          	rn		.EQU	0AH		;down 	right	pellet
  34:     -	0005          	un		.EQU	05H		;up 	left	pellet
  35:     -	0009          	dn		.EQU	09H		;up 	right	pellet
  36:				
  37:     -	000B          	bn		.EQU	0BH		;up		down	right	pellet
  38:     -	0007          	cn		.EQU	07H		;up		down	left	pellet
  39:     -	000E          	vn		.EQU	0EH		;down	left	right	pellet
  40:     -	000D          	kn		.EQU	0DH		;up		left	right	pellet
  41:				
  42:     -	000F          	xn		.EQU	0FH		;all	pellet
  43:				;--------Power Pellet
  44:     -	001C          	hs 		.EQU	1CH		;left 	right	pellet
  45:     -	0013          	gs		.EQU	13H		;up		down	pellet
  46:				
  47:     -	0016          	ls		.EQU	16H		;down 	left 	pellet
  48:     -	001A          	rs		.EQU	1AH		;down 	right	pellet
  49:     -	0015          	us		.EQU	15H		;up 	left	pellet
  50:     -	0019          	ds		.EQU	19H		;up 	right	pellet
  51:				
  52:     -	001B          	bs		.EQU	1BH		;up		down	right	pellet
  53:     -	0017          	cs		.EQU	17H		;up		down	left	pellet
  54:     -	001E          	vs		.EQU	1EH		;down	left	right	pellet
  55:     -	001D          	ks		.EQU	1DH		;up		left	right	pellet
  56:				
  57:     -	001F          	xs		.EQU	1FH		;all	pellet
  58:				
  59:     -	C000  00004040	map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  60:     -	C020  0000400A			.BYTE	00,00,ww,rn,hn,hn,hn,hn,vn,hn,hn,hn,hn,hn,ln,ww,ww,rn,hn,hn,hn,hn,hn,vn,hn,hn,hn,hn,ln,ww,00,00
	              0C0C0C0C
	              0E0C0C0C
	              0C0C0640
	              400A0C0C
	              0C0C0C0E
	              0C0C0C0C
	              06400000
  61:     -	C040  00004003			.BYTE	00,00,ww,gn,ww,ww,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,ww,ww,gn,ww,00,00
	              40404040
	              03404040
	              40400340
	              40034040
	              40404003
	              40404040
	              03400000
  62:     -	C060  00004003			.BYTE	00,00,ww,gn,ww,ww,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,ww,ww,gn,ww,00,00
	              40404040
	              03404040
	              40400340
	              40034040
	              40404003
	              40404040
	              03400000
  63:     -	C080  0000400B			.BYTE	00,00,ww,bn,hn,hn,hn,hn,xn,hn,hn,vn,hn,hn,kn,hn,hn,kn,hn,hn,vn,hn,hn,xn,hn,hn,hn,hn,cn,ww,00,00
	              0C0C0C0C
	              0F0C0C0E
	              0C0C0D0C
	              0C0D0C0C
	              0E0C0C0F
	              0C0C0C0C
	              07400000
  64:     -	C0A0  00004003			.BYTE	00,00,ww,gn,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,gn,ww,00,00
	              40404040
	              03404003
	              40404040
	              40404040
	              03404003
	              40404040
	              03400000
  65:     -	C0C0  00004009			.BYTE	00,00,ww,dn,hn,hn,hn,hn,cn,ww,ww,dn,hn,hn,ln,ww,ww,rn,hn,hn,un,ww,ww,bn,hn,hn,hn,hn,un,ww,00,00
	              0C0C0C0C
	              07404009
	              0C0C0640
	              400A0C0C
	              0540400B
	              0C0C0C0C
	              05400000
  66:     -	C0E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              03404040
	              40400340
	              40034040
	              40404003
	              40404040
	              40400000
  67:     -	C100  00000000			.BYTE	00,00,00,00,00,00,00,ww,gn,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gn,ww,00,00,00,00,00,00,00
	              00000040
	              0340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404003
	              40000000
	              00000000
  68:     -	C120  00000000			.BYTE	00,00,00,00,00,00,00,ww,gn,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gn,ww,00,00,00,00,00,00,00
	              00000040
	              03404003
	              40404000
	              00404040
	              03404003
	              40000000
	              00000000
  69:     -	C140  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              03404003
	              40000000
	              00000040
	              03404003
	              40404040
	              40404040
  70:     -	C160  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xn,hn,hn,cp,ww,00,00,00,00,00,00,ww,bn,hn,hn,xn,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              0F0C0C27
	              40000000
	              00000040
	              0B0C0C0F
	              0C0C0C0C
	              0C0C0C0C
  71:     -	C180  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              03404003
	              40000000
	              00000040
	              03404003
	              40404040
	              40404040
  72:     -	C1A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,00,00,00,00,00,00,00
	              00000040
	              03404003
	              40404040
	              40404040
	              03404003
	              40000000
	              00000000
  73:     -	C1C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gn,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gn,ww,00,00,00,00,00,00,00
	              00000040
	              0340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404003
	              40000000
	              00000000
  74:     -	C1E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              03404003
	              40404040
	              40404040
	              03404003
	              40404040
	              40400000
  75:     -	C200  0000400A			.BYTE	00,00,ww,rn,hn,hn,hn,hn,xn,hn,hn,kn,hn,hn,ln,ww,ww,rn,hn,hn,kn,hn,hn,xn,hn,hn,hn,hn,ln,ww,00,00
	              0C0C0C0C
	              0F0C0C0D
	              0C0C0640
	              400A0C0C
	              0D0C0C0F
	              0C0C0C0C
	              06400000
  76:     -	C220  00004003			.BYTE	00,00,ww,gn,ww,ww,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gn,ww,ww,ww,ww,gn,ww,00,00
	              40404040
	              03404040
	              40400340
	              40034040
	              40404003
	              40404040
	              03400000
  77:     -	C240  00004009			.BYTE	00,00,ww,dn,hn,ln,ww,ww,bn,hn,hn,vn,hn,hn,kn,hn,hn,kn,hn,hn,vn,hn,hn,cn,ww,ww,rn,hn,un,ww,00,00
	              0C064040
	              0B0C0C0E
	              0C0C0D0C
	              0C0D0C0C
	              0E0C0C07
	              40400A0C
	              05400000
  78:     -	C260  00004040			.BYTE	00,00,ww,ww,ww,gn,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,gn,ww,ww,ww,00,00
	              40034040
	              03404003
	              40404040
	              40404040
	              03404003
	              40400340
	              40400000
  79:     -	C280  0000400A			.BYTE	00,00,ww,rn,hn,kn,hn,hn,un,ww,ww,dn,hn,hn,ln,ww,ww,rn,hn,hn,un,ww,ww,dn,hn,hn,kn,hn,ln,ww,00,00
	              0C0D0C0C
	              05404009
	              0C0C0640
	              400A0C0C
	              05404009
	              0C0C0D0C
	              06400000
  80:     -	C2A0  00004003			.BYTE	00,00,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,00,00
	              40404040
	              40404040
	              40400340
	              40034040
	              40404040
	              40404040
	              03400000
  81:     -	C2C0  00004009			.BYTE	00,00,ww,dn,hn,hn,hn,hn,hn,hn,hn,hn,hn,hn,kn,hn,hn,kn,hn,hn,hn,hn,hn,hn,hn,hn,hn,hn,un,ww,00,00
	              0C0C0C0C
	              0C0C0C0C
	              0C0C0D0C
	              0C0D0C0C
	              0C0C0C0C
	              0C0C0C0C
	              05400000
  82:     -	C2E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  83:     -	C300  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  84:     -	C320  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  85:     -	C340  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  86:     -	C360  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  87:     -	C380  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  88:     -	C3A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  89:     -	C3C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  90:     -	C3E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  91:				
  92:     -	C400  00004040	map1:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  93:     -	C420  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2E2C2C2C
	              2C2C2640
	              402A2C2C
	              2C2C2C2E
	              2C2C2C2C
	              26400000
  94:     -	C440  00004013			.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              13400000
  95:     -	C460  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  96:     -	C480  0000402B			.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
	              2C2C2C2C
	              2F2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C2F
	              2C2C2C2C
	              27400000
  97:     -	C4A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404023
	              40404040
	              40404040
	              23404023
	              40404040
	              23400000
  98:     -	C4C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              27404029
	              2C2C2640
	              402A2C2C
	              2540402B
	              2C2C2C2C
	              25400000
  99:     -	C4E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404040
	              40400340
	              40034040
	              40404023
	              40404040
	              40400000
 100:     -	C500  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404023
	              40000000
	              00000000
 101:     -	C520  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404000
	              00404040
	              03404023
	              40000000
	              00000000
 102:     -	C540  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
 103:     -	C560  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              2F0C0C07
	              40000000
	              00000040
	              0B0C0C2F
	              0C0C0C0C
	              0C0C0C0C
 104:     -	C580  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
 105:     -	C5A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404040
	              40404040
	              03404023
	              40000000
	              00000000
 106:     -	C5C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404023
	              40000000
	              00000000
 107:     -	C5E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404003
	              40404040
	              40404040
	              03404023
	              40404040
	              40400000
 108:     -	C600  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2F2C2C2D
	              2C2C2640
	              402A2C2C
	              2D2C2C2F
	              2C2C2C2C
	              26400000
 109:     -	C620  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
 110:     -	C640  00004019			.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
	              2C264040
	              2B2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C27
	              40402A2C
	              15400000
 111:     -	C660  00004040			.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
	              40234040
	              23404023
	              40404040
	              40404040
	              23404023
	              40402340
	              40400000
 112:     -	C680  0000402A			.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
	              2C2D2C2C
	              25404029
	              2C2C2640
	              402A2C2C
	              25404029
	              2C2C2D2C
	              26400000
 113:     -	C6A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              40404040
	              40402340
	              40234040
	              40404040
	              40404040
	              23400000
 114:     -	C6C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              2C2C2C2C
	              2C2C2D2C
	              2C2D2C2C
	              2C2C2C2C
	              2C2C2C2C
	              25400000
 115:     -	C6E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
 116:     -	C700  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 117:     -	C720  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 118:     -	C740  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 119:     -	C760  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 120:     -	C780  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 121:     -	C7A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 122:     -	C7C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
**** main.asm ****
  92:     -	C7E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  93:				
  94:				;-----Path find map
  95:     -	D000          	pathFindMap	.EQU	0D000H
  96:				
**** main.asm ****
  97:     -	E000          	liveMap		.EQU	0E000H



Statistics:

     4	passes
     0	jr promotions
   282	symbols
  4752	bytes



Symbol Table:

absa            9a25     
bn             =   b     
bp             =  2b     
bs             =  1b     
calcnextmove    9118     
calculatemapcell 9926     
calculatemapd   9902     
calculatemapl   990e     
calculatemapr   991a     
calculatemapu   98f6     
calculatepathmap 98a8     
calculatepathmaploop 98ba     
caughtjaletime =  20     
checkh          9122     
checkmap        97e1     
checkmapchar    97fc     
checkmaploop    97eb     
checkmapnextline 97f6     
checknextlevel  97c8     
checkv          9130     
clearghost      9188     
clearpm         90a9     
cls             9a7a     
cn             =   7     
colideghost     91a2     
cp             =  27     
cr             =   d     
cs             =  17     
delay           9a45     
disphl          99e7     
dn             =   9     
downbit        =   1     
dp             =  29     
ds             =  19     
eatpellet       90dc     
eatppellet      90f4     
eatspellet      90e8     
endgame         9061     
gameloop        901f     
getaddresspf    9809     
getmapaddress   97b0     
getmove         90fc     
getpmmapdata    90cf     
ghostcheckstack 921a     
ghostdis       =8113     
ghostdostack    9239     
ghostmove       91dc     
ghostmoved      91f6     
ghostmovel      9202     
ghostmover      920e     
ghostmoveu      91ea     
ghostnextmove   917b     
gn             =   3     
gp             =  23     
gs             =  13     
hidecursor      9a82     
hltodec         99df     
hn             =   c     
hp             =  2c     
hs             =  1c     
incrementde     9807     
initghost       91af     
initlives      =   4     
initmap         97a4     
initpacman      9086     
initpacx       =   e     
initpacy       =   e     
initpathfind    9890     
initppfloop     9897     
input           906c     
ismovevalid     978a     
killpacman      9157     
kn             =   d     
kp             =  2d     
ks             =  1d     
leftbit        =   2     
lf             =   a     
liveblanking    99bb     
livemap        =e000     
ln             =   6     
lp             =  26     
ls             =  16     
map             c000     
map1            c400     
move            9764     
movecursor      99c8     
moved           9778     
movedvalid      979b     
moveghost       91bc     
movel           977e     
movelvalid      979e     
movepm          9140     
movepma         914b     
mover           9784     
movervalid      97a1     
moveu           9772     
moveuvalid      9798     
newline         99bf     
nextmovevalid   9111     
num1            9a00     
num1h           9a19     
num2            9a02     
num2h           9a1d     
numtohex        9a0a     
oghost          94bb     
oghostcheckd    942e     
oghostcheckl    943c     
oghostcheckr    944a     
oghostchecku    9420     
oghostclear     9382     
oghostcolide    9484     
oghostdectimer  93e5     
oghostdir      =8122     
oghostinit      93bc     
oghostinittimer=  20     
oghostinitx    =   f     
oghostinity    =   8     
oghostmapdata   93af     
oghostmove      93cc     
oghostnextmove  93f6     
oghostpathfind  9458     
oghostpfpp      946f     
oghostprint     938e     
oghostsetnewdir 947b     
oghoststack     94ad     
oghoststorex   =   f     
oghoststorey   =   b     
oghosttimer    =8125     
oghostx        =8120     
oghosty        =8121     
oldstackpointer=89f0     
originalbc     =89f2     
paccdir        =8102     
paclives       =8105     
pacman          9170     
pacndir        =8103     
pacx           =8100     
pacy           =8101     
pathfinddepth  =  30     
pathfindmap    =d000     
pellet          9a62     
pelletbit      =   5     
pfnextrow       98a1     
pghost          95ff     
pghostcheckd    9572     
pghostcheckl    9580     
pghostcheckr    958e     
pghostchecku    9564     
pghostclear     94c6     
pghostcolide    95c8     
pghostdectimer  9529     
pghostdir      =8132     
pghostinit      9500     
pghostinittimer=  30     
pghostinitx    =   f     
pghostinity    =   8     
pghostmapdata   94f3     
pghostmove      9510     
pghostnextmove  953a     
pghostpathfind  959c     
pghostpfpp      95b3     
pghostprint     94d2     
pghostsetnewdir 95bf     
pghoststack     95f1     
pghoststorex   =  10     
pghoststorey   =   b     
pghosttimer    =8135     
pghostx        =8130     
pghosty        =8131     
pmchar          9853     
pmcharret       988e     
pmloop          983f     
pmnextline      984d     
pmpfafterskip   994f     
pmpfloop        9946     
pmpfnextline    995c     
pmpfskip        9962     
powerpbit      =   4     
powerpellet     9a57     
ppactive       =8104     
ppellettics    =  20     
print           9a3a     
printghost      9195     
printhud        996b     
printlives      9990     
printlivesloop  99a4     
printloop       9a3b     
printmap        9838     
printmapat      9821     
printp          986e     
printpfmap      9932     
printpm         90b5     
printpp         9866     
printret        9a43     
printscore      9972     
printsf         987e     
printsghost     91c9     
printvoid       9886     
printwall       9876     
randoma         9a2a     
removeoldlives  99ac     
resetpacman     9091     
rghost          9377     
rghostcheckd    92ea     
rghostcheckl    92f8     
rghostcheckr    9306     
rghostchecku    92dc     
rghostclear     923e     
rghostcolide    9340     
rghostdectimer  92a1     
rghostdir      =8112     
rghostinit      9278     
rghostinittimer=  10     
rghostinitx    =   f     
rghostinity    =   8     
rghostmapdata   926b     
rghostmove      9288     
rghostnextmove  92b2     
rghostpathfind  9314     
rghostpfpp      932b     
rghostprint     924a     
rghostsetnewdir 9337     
rghoststack     9369     
rghoststorex   =   e     
rghoststorey   =   b     
rghosttimer    =8115     
rghostx        =8110     
rghosty        =8111     
rightbit       =   3     
rn             =   a     
rp             =  2a     
rs             =  1a     
score          =8900     
scorehud        99b3     
seed           =8888     
sfbit          =   7     
sghost0         974e     
sghost1         9759     
sghost1print    91d5     
showcursor      9a89     
superfruit      9a6d     
tghost          9743     
tghostcheckd    96b6     
tghostcheckl    96c4     
tghostcheckr    96d2     
tghostchecku    96a8     
tghostclear     960a     
tghostcolide    970c     
tghostdectimer  966d     
tghostdir      =8142     
tghostinit      9644     
tghostinittimer=  40     
tghostinitx    =   f     
tghostinity    =   8     
tghostmapdata   9637     
tghostmove      9654     
tghostnextmove  967e     
tghostpathfind  96e0     
tghostpfpp      96f7     
tghostprint     9616     
tghostsetnewdir 9703     
tghoststack     9735     
tghoststorex   =  11     
tghoststorey   =   b     
tghosttimer    =8145     
tghostx        =8140     
tghosty        =8141     
un             =   5     
up             =  25     
upbit          =   0     
us             =  15     
validinput      9082     
vn             =   e     
void            9a78     
vp             =  2e     
vs             =  1e     
wall            9a4c     
wallbit        =   6     
ww             =  40     
xn             =   f     
xp             =  2f     
xs             =  1f     
