   1:     -	000D          	CR              .EQU     0DH
   2:     -	000A          	LF              .EQU     0AH
   3:				
   4:				;----- Map data bit positions
   5:     -	0000          	upBit			.EQU	0
   6:     -	0001          	downBit			.EQU	1
   7:     -	0002          	leftBit			.EQU	2
   8:     -	0003          	rightBit		.EQU	3
   9:     -	0004          	powerpBit		.EQU	4
  10:     -	0005          	pelletBit		.EQU	5
  11:     -	0006          	wallBit			.EQU	6
  12:     -	0007          	sfBit			.EQU	7
  13:				;--------Initial Stats
  14:     -	000E          	initPacx		.EQU	14
  15:     -	000E          	initPacy		.EQU	14
  16:				
  17:     -	0014          	initRedGhostX	.EQU	20
  18:     -	0001          	initRedGhostY	.EQU	1
  19:				
  20:				;-----Varr
  21:				;Packman
  22:     -	8100          	pacx			.EQU	8100H
  23:     -	8101          	pacy			.EQU	8101H
  24:     -	8102          	pacCDir			.EQU	8102H		;Pacmans current direction
  25:     -	8103          	pacNDir			.EQU	8103H		;Pacman next direction (from key press)
  26:				
  27:				;RedGhost
  28:     -	8110          	redGhostX		.EQU	8110H		
  29:     -	8111          	redGhostY		.EQU	8111H
  30:     -	8112          	redGhostDir		.EQU	8112H
  31:     -	8113          	ghostDis		.EQU	8113H		;Red ghost move distance from pacman
  32:				
  33:     -	8888          	seed			.EQU	8888H		;Random seed
  34:				
  35:     -	8900          	score			.EQU	8900H		;Score
  36:				
  37:     -	89F0          	oldStackPointer	.EQU	89F0H		;Old Stack Location 	
  38:     -	89F2          	originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
  39:				
  40:				
  41:				
  42:				
  43:     -	9000          		.ORG 9000H
  44:    0+20	9000  ED73F089				ld		(oldStackPointer), SP
  45:   20+10	9004  31FFFF  				ld		sp,0FFFFH
  46:   30+7	9007  3E0E    				ld		a, initPacx		;set Pacman Pos
  47:   37+13	9009  320081  				ld		(pacx),a
  48:   50+7	900C  3E0E    				ld		a, initPacy
  49:   57+13	900E  320181  				ld		(pacy),a
  50:   70+7	9011  3E44    				ld		a, 'D'			;Set start direction
  51:   77+13	9013  320281  				ld		(pacCDir),A
  52:   90+13	9016  320381  				ld		(pacNDir),A
  53:  103+10	9019  210000  				ld		HL, 0H
  54:  113+16	901C  220089  				LD		(score), HL
  55:  129+7	901F  3E14    				ld		a, initRedGhostX	;set RedGhost Pos
  56:  136+13	9021  321081  				ld		(redGhostX),a
  57:  149+7	9024  3E01    				ld		a, initRedGhostY
  58:  156+13	9026  321181  				ld		(redGhostY),a
  59:  169+10	9029  217794  				LD		HL, cls			;Clear screen
  60:  179+17	902C  CDF893  				CALL	print
  61:  196+17	902F  CD6E92  				call 	printMap
  62:     -	9032          	gameLoop:		
  63:  213+17	9032  CD6890  				call	input
  64:  230+17	9035  CDC990  				call 	getMove
  65:  247+17	9038  CD8290  				call 	clearPM
  66:  264+17	903B  CD0D91  				call	movePM
  67:  281+17	903E  CD8E90  				call 	printPM
  68:  298+17	9041  CDB490  				call	eatPellet
  69:				
  70:  315+17	9044  CDC692  				call	initPathFind
  71:  332+17	9047  CDDD92  				call	calculatePathMap
  72:				
  73:  349+17	904A  CD5791  				call	getRedGhostNextMove
  74:  366+17	904D  CD1991  				call	clearRedGhost
  75:  383+17	9050  CD4B91  				call	moveRedGhost
  76:  400+17	9053  CD2591  				call	printRedGhost
  77:							
  78:  417+17	9056  CD6193  				call 	printScore
  79:  434+7	9059  06FF    				LD 		B,0FFH   ;delay
  80:  441+7	905B  0EFF    				LD		C,0FFH
  81:  448+17	905D  CD0394  				CALL 	DELAY
  82:  465+10	9060  C33290  				JP		gameLoop
  83:  475+20	9063  ED7BF089				LD		SP,(oldStackPointer)
  84:  495+10	9067  C9      				ret
  85:						
  86:				;-------------- Input --------------------------					
  87:     -	9068          	input:
  88:  505+11	9068  DF      					RST		18H
  89:  516+5+6	9069  C8      					RET		Z
  90:  521+11	906A  D7      					RST		10H
  91:  532+7	906B  E6DF    					AND     11011111b       ; lower to uppercase
  92:  539+7	906D  FE57    					CP		'W'
  93:  546+7+5	906F  280D    					JR		Z,validInput
  94:  553+7	9071  FE41    					CP		'A'
  95:  560+7+5	9073  2809    					JR		Z,validInput
  96:  567+7	9075  FE53    					CP		'S'
  97:  574+7+5	9077  2805    					JR		Z,validInput
  98:  581+7	9079  FE44    					CP		'D'
  99:  588+7+5	907B  2801    					JR		Z,validInput
 100:  595+10	907D  C9      					RET
 101:     -	907E          	validInput:		
 102:  605+13	907E  320381  					LD		(pacNDir), A
 103:  618+10	9081  C9      					RET
 104:						
 105:				;----------Pacman------;
 106:     -	9082          	clearPM:
 107:  628+13	9082  3A0081  					LD		A, (pacx)		;Push X to stack
 108:  641+4	9085  4F      					LD		C,A
 109:  645+13	9086  3A0181  					LD		A, (pacy)		;Push Y to stack
 110:  658+4	9089  47      					LD		B,A
 111:  662+17	908A  CD5892  					CALL 	printMapAt
 112:  679+10	908D  C9      					RET
 113:								
 114:     -	908E          	printPM:
 115:  689+13	908E  3A0081  					LD		A, (pacx)		;Push X to stack
 116:  702+4	9091  3C      					INC		A
 117:  706+4	9092  6F      					LD		L,A
 118:  710+7	9093  2600    					LD		H, $00			;We dont care about msb
 119:  717+11	9095  E5      					PUSH	HL
 120:  728+13	9096  3A0181  					LD		A, (pacy)		;Push Y to stack
 121:  741+4	9099  3C      					INC		A
 122:  745+4	909A  6F      					LD		L,A
 123:  749+7	909B  2600    					LD		H, $00			;Again we dont care
 124:  756+11	909D  E5      					PUSH	HL
 125:  767+17	909E  CD8893  					CALL	moveCursor
 126:  784+10	90A1  213E94  					LD		HL, pacman
 127:  794+17	90A4  CDF893  					CALL 	print
 128:  811+10	90A7  C9      					RET
 129:     -	90A8          	getPMMapData:	
 130:  821+13	90A8  3A0081  					LD		A, (pacx)
 131:  834+4	90AB  4F      					LD		C,A
 132:  838+13	90AC  3A0181  					LD		A, (pacy)
 133:  851+4	90AF  47      					LD		B,A
 134:  855+17	90B0  CD0F92  					CALL	getDataAtPos
 135:  872+10	90B3  C9      					ret
 136:     -	90B4          	eatPellet:		;Eat pellet at packman location
 137:  882+17	90B4  CDA890  					CALL 	getPMMapData
 138:  899+8	90B7  CB6F    					BIT		pelletBit,A
 139:  907+7+5	90B9  2001    					JR		NZ,eatSPellet
 140:  914+10	90BB  C9      					RET
 141:								
 142:     -	90BC          	eatSPellet:		
 143:  924+11	90BC  E5      					PUSH	HL		
 144:  935+16	90BD  2A0089  					LD		HL,(score)
 145:  951+6	90C0  23      					INC		HL
 146:  957+6	90C1  23      					INC		HL
 147:  963+16	90C2  220089  					LD		(score),HL
 148:  979+10	90C5  E1      					POP		HL
 149:  989+15	90C6  CBAE    					RES		pelletBit,(HL)
 150: 1004+10	90C8  C9      					RET
 151:								
 152:     -	90C9          	getMove:		;Sets the current move var
 153: 1014+17	90C9  CDA890  					CALL	getPMMapData
 154: 1031+4	90CC  57      					LD		D,A
 155: 1035+13	90CD  3A0381  					LD		A,(pacNDir)			;Is the next move valid
 156: 1048+17	90D0  CDF591  					CALL	isMoveValid
 157: 1065+7+5	90D3  2009    					JR		NZ,nextMoveValid
 158: 1072+13	90D5  3A0281  					LD		A,(pacCDir)			;Is the current move valid
 159: 1085+17	90D8  CDF591  					CALL	isMoveValid
 160: 1102+5+6	90DB  C0      					RET		NZ
 161: 1107+12	90DC  1807    					JR		calcNextMove
 162:								
 163:     -	90DE          	nextMoveValid:
 164: 1119+13	90DE  320281  					LD		(pacCDir),A
 165: 1132+13	90E1  320381  					LD		(pacNDir),A
 166: 1145+10	90E4  C9      					RET
 167:								
 168:     -	90E5          	calcNextMove:	
 169: 1155+7	90E5  FE41    					CP		'A'
 170: 1162+7+5	90E7  2814    					JR		Z,checkV
 171: 1169+7	90E9  FE44    					CP		'D'
 172: 1176+7+5	90EB  2810    					JR		Z,checkV
 173: 1183+12	90ED  1800    					JR		checkH
 174:     -	90EF          	checkH:
 175: 1195+7	90EF  3E41    					LD		A,'A'
 176: 1202+17	90F1  CDF591  					CALL	isMoveValid
 177: 1219+7+5	90F4  20E8    					JR		NZ,nextMoveValid
 178: 1226+7	90F6  3E44    					LD		A,'D'
 179: 1233+17	90F8  CDF591  					CALL	isMoveValid
 180: 1250+7+5	90FB  20E1    					JR		NZ,nextMoveValid
 181:     -	90FD          	checkV:
 182: 1257+7	90FD  3E57    					LD		A,'W'
 183: 1264+17	90FF  CDF591  					CALL	isMoveValid
 184: 1281+7+5	9102  20DA    					JR		NZ,nextMoveValid
 185: 1288+7	9104  3E53    					LD		A,'S'
 186: 1295+17	9106  CDF591  					CALL	isMoveValid
 187: 1312+7+5	9109  20D3    					JR		NZ,nextMoveValid
 188: 1319+12	910B  18E2    					JR		checkH
 189:				;Move
 190:     -	910D          	movePM:
 191: 1331+13	910D  3A0281  					LD		A,(pacCDir)
 192: 1344+10	9110  110081  					LD		DE,pacx
 193: 1354+10	9113  010181  					LD		BC,pacy
 194: 1364+10	9116  C3CF91  					JP		move
 195:				;------------Ghost
 196:				;Red
 197:     -	9119          	clearRedGhost:
 198: 1374+13	9119  3A1081  					LD		A, (redGhostX)		;Push X to stack
 199: 1387+4	911C  4F      					LD		C,A
 200: 1391+13	911D  3A1181  					LD		A, (redGhostY)		;Push Y to stack
 201: 1404+4	9120  47      					LD		B,A
 202: 1408+17	9121  CD5892  					CALL 	printMapAt
 203: 1425+10	9124  C9      					RET
 204:								
 205:     -	9125          	printRedGhost:
 206: 1435+13	9125  3A1081  					LD		A, (redGhostX)		;Push X to stack
 207: 1448+4	9128  3C      					INC		A
 208: 1452+4	9129  6F      					LD		L,A
 209: 1456+7	912A  2600    					LD		H, $00			;We dont care about msb
 210: 1463+11	912C  E5      					PUSH	HL
 211: 1474+13	912D  3A1181  					LD		A, (redGhostY)		;Push Y to stack
 212: 1487+4	9130  3C      					INC		A
 213: 1491+4	9131  6F      					LD		L,A
 214: 1495+7	9132  2600    					LD		H, $00			;Again we dont care
 215: 1502+11	9134  E5      					PUSH	HL
 216: 1513+17	9135  CD8893  					CALL	moveCursor
 217: 1530+10	9138  214994  					LD		HL, redGhost
 218: 1540+17	913B  CDF893  					CALL 	print
 219: 1557+10	913E  C9      					RET
 220:     -	913F          	getRedGhostMapData:	
 221: 1567+13	913F  3A1081  					LD		A, (redGhostX)
 222: 1580+4	9142  4F      					LD		C,A
 223: 1584+13	9143  3A1181  					LD		A, (redGhostY)
 224: 1597+4	9146  47      					LD		B,A
 225: 1601+17	9147  CD0F92  					CALL	getDataAtPos
 226: 1618+10	914A  C9      					ret
 227:				;Move
 228:     -	914B          	moveRedGhost:
 229: 1628+13	914B  3A1281  					LD		A,(redGhostDir)
 230: 1641+10	914E  111081  					LD		DE,redGhostX
 231: 1651+10	9151  011181  					LD		BC,redGhostY
 232: 1661+10	9154  C3CF91  					JP		move
 233:     -	9157          	getRedGhostNextMove:
 234: 1671+7	9157  3EFF    					LD		A, 0FFH
 235: 1678+13	9159  321381  					LD		(ghostDis),A
 236: 1691+17	915C  CD3F91  					CALL	getRedGhostMapData
 237: 1708+4	915F  57      					LD		D,A
 238: 1712+7	9160  3E57    					LD		A,	'W'			;check up
 239: 1719+17	9162  CDF591  					CALL	isMoveValid
 240: 1736+10+7	9165  C48191  					CALL	NZ,redGhostCheckU
 241: 1746+7	9168  3E53    					LD		A,	'S'			;down
 242: 1753+17	916A  CDF591  					CALL	isMoveValid
 243: 1770+10+7	916D  C48F91  					CALL	NZ,redGhostCheckD
 244: 1780+7	9170  3E41    					LD		A,	'A'			;left
 245: 1787+17	9172  CDF591  					CALL	isMoveValid
 246: 1804+10+7	9175  C49D91  					CALL	NZ,redGhostCheckL
 247: 1814+7	9178  3E44    					LD		A,	'D'			;right
 248: 1821+17	917A  CDF591  					CALL	isMoveValid
 249: 1838+10+7	917D  C4AB91  					CALL	NZ,redGhostCheckR
 250: 1848+10	9180  C9      					RET
 251:								
 252:     -	9181          	redGhostCheckU:	
 253: 1858+11	9181  F5      					PUSH	AF
 254: 1869+13	9182  3A1181  					LD		A, (redGhostY)
 255: 1882+4	9185  3D      					DEC		A
 256: 1886+7	9186  E61F    					AND		00011111B
 257: 1893+4	9188  47      					LD		B,A
 258: 1897+13	9189  3A1081  					LD		A,(redGhostX)
 259: 1910+4	918C  4F      					LD		C,A
 260: 1914+12	918D  182A    					JR		redGhostPathFind
 261:     -	918F          	redGhostCheckD:			
 262: 1926+11	918F  F5      					PUSH	AF
 263: 1937+13	9190  3A1181  					LD		A, (redGhostY)
 264: 1950+4	9193  3C      					INC		A
 265: 1954+7	9194  E61F    					AND		00011111B
 266: 1961+4	9196  47      					LD		B,A
 267: 1965+13	9197  3A1081  					LD		A,(redGhostX)
 268: 1978+4	919A  4F      					LD		C,A
 269: 1982+12	919B  181C    					JR		redGhostPathFind
 270:     -	919D          	redGhostCheckL:		
 271: 1994+11	919D  F5      					PUSH	AF	
 272: 2005+13	919E  3A1081  					LD		A, (redGhostX)
 273: 2018+4	91A1  3D      					DEC		A
 274: 2022+7	91A2  E61F    					AND		00011111B
 275: 2029+4	91A4  4F      					LD		C,A
 276: 2033+13	91A5  3A1181  					LD		A,(redGhostY)
 277: 2046+4	91A8  47      					LD		B,A
 278: 2050+12	91A9  180E    					JR		redGhostPathFind
 279:     -	91AB          	redGhostCheckR:
 280: 2062+11	91AB  F5      					PUSH	AF	
 281: 2073+13	91AC  3A1081  					LD		A, (redGhostX)
 282: 2086+4	91AF  3C      					INC		A
 283: 2090+7	91B0  E61F    					AND		00011111B
 284: 2097+4	91B2  4F      					LD		C,A
 285: 2101+13	91B3  3A1181  					LD		A,(redGhostY)
 286: 2114+4	91B6  47      					LD		B,A
 287: 2118+12	91B7  1800    					JR		redGhostPathFind
 288:				
 289:     -	91B9          	redGhostPathFind:
 290: 2130+17	91B9  CD4092  					CALL	getAddressPF
 291: 2147+13	91BC  3A1381  					LD		A,(ghostDis)
 292: 2160+7	91BF  5E      					LD		E,(HL)
 293: 2167+4	91C0  BB      					CP		E
 294: 2171+10	91C1  D2C691  					JP		NC,redGhostSetNewDir
 295: 2181+10	91C4  F1      					POP		AF
 296: 2191+10	91C5  C9      					RET
 297:     -	91C6          	redGhostSetNewDir:
 298: 2201+4	91C6  7B      					LD		A,E
 299: 2205+13	91C7  321381  					LD		(ghostDis),A
 300: 2218+10	91CA  F1      					POP		AF
 301: 2228+13	91CB  321281  					LD		(redGhostDir),A
 302: 2241+10	91CE  C9      					RET
 303:				
 304:				;-----------Generic Move Libs -----;
 305:     -	91CF          	move:
 306: 2251+7	91CF  FE57    					CP		'W'
 307: 2258+7+5	91D1  280A    					JR		Z,moveU
 308: 2265+7	91D3  FE41    					CP		'A'
 309: 2272+7+5	91D5  2812    					JR		Z,moveL
 310: 2279+7	91D7  FE53    					CP		'S'
 311: 2286+7+5	91D9  2808    					JR		Z,moveD
 312: 2293+12	91DB  1812    					JR		moveR
 313:				
 314:     -	91DD          	moveU:			
 315: 2305+7	91DD  0A      					LD		A, (BC)
 316: 2312+4	91DE  3D      					DEC		A
 317: 2316+7	91DF  E61F    					AND		00011111B
 318: 2323+7	91E1  02      					LD		(BC),A
 319: 2330+10	91E2  C9      					RET
 320:     -	91E3          	moveD:			
 321: 2340+7	91E3  0A      					LD		A, (BC)
 322: 2347+4	91E4  3C      					INC		A
 323: 2351+7	91E5  E61F    					AND		00011111B
 324: 2358+7	91E7  02      					LD		(BC),A
 325: 2365+10	91E8  C9      					RET
 326:     -	91E9          	moveL:			
 327: 2375+7	91E9  1A      					LD		A, (DE)
 328: 2382+4	91EA  3D      					DEC		A
 329: 2386+7	91EB  E61F    					AND		00011111B
 330: 2393+7	91ED  12      					LD		(DE),A
 331: 2400+10	91EE  C9      					RET
 332:     -	91EF          	moveR:			
 333: 2410+7	91EF  1A      					LD		A, (DE)
 334: 2417+4	91F0  3C      					INC		A
 335: 2421+7	91F1  E61F    					AND		00011111B
 336: 2428+7	91F3  12      					LD		(DE),A
 337: 2435+10	91F4  C9      					RET
 338:     -	91F5          	isMoveValid:
 339: 2445+7	91F5  FE57    					CP		'W'
 340: 2452+7+5	91F7  280A    					JR		Z,moveUValid
 341: 2459+7	91F9  FE41    					CP		'A'
 342: 2466+7+5	91FB  280C    					JR		Z,moveLValid
 343: 2473+7	91FD  FE53    					CP		'S'
 344: 2480+7+5	91FF  2805    					JR		Z,moveDValid
 345: 2487+12	9201  1809    					JR		moveRValid
 346:     -	9203          	moveUValid:			
 347: 2499+8	9203  CB42    					BIT		upBit,D
 348: 2507+10	9205  C9      					RET
 349:     -	9206          	moveDValid:			
 350: 2517+8	9206  CB4A    					BIT		downBit,D
 351: 2525+10	9208  C9      					RET
 352:     -	9209          	moveLValid:			
 353: 2535+8	9209  CB52    					BIT		leftBit,D
 354: 2543+10	920B  C9      					RET
 355:     -	920C          	moveRValid:			
 356: 2553+8	920C  CB5A    					BIT		rightBit,D
 357: 2561+10	920E  C9      					RET
 358:								
 359:				;------- Get Map Data ----;
 360:				; C - X
 361:				; B	- Y
 362:     -	920F          	getDataAtPos:
 363: 2571+11	920F  C5      					push	bc
 364: 2582+8	9210  CB00    					rlc		b			;Shift b left 5
 365: 2590+8	9212  CB00    					rlc		b			;Shift b left 5
 366: 2598+8	9214  CB00    					rlc		b			;Shift b left 5
 367: 2606+8	9216  CB00    					rlc		b			;Shift b left 5
 368: 2614+8	9218  CB00    					rlc		b			;Shift b left 5
 369: 2622+4	921A  78      					ld		a,b
 370: 2626+7	921B  E6E0    					and		11100000b	;Mask lower adress
 371: 2633+4	921D  B1      					or		c			;Combine with C
 372: 2637+4	921E  6F      					ld		l,a			;A is now low byte of adress
 373: 2641+4	921F  78      					ld		a,b
 374: 2645+7	9220  E603    					and		00000011b	;Mask upper adress
 375: 2652+7	9222  F6E0    					or		0E0H		;Start of map
 376: 2659+4	9224  67      					ld		h,a
 377: 2663+7	9225  7E      					ld		a,(HL)
 378: 2670+10	9226  C1      					pop		bc
 379: 2680+10	9227  C9      					ret
 380:				
 381:				; C - X
 382:				; B	- Y
 383:     -	9228          	getMapAddress:
 384: 2690+11	9228  C5      					push	bc
 385: 2701+8	9229  CB00    					rlc		b			;Shift b left 5
 386: 2709+8	922B  CB00    					rlc		b			;Shift b left 5
 387: 2717+8	922D  CB00    					rlc		b			;Shift b left 5
 388: 2725+8	922F  CB00    					rlc		b			;Shift b left 5
 389: 2733+8	9231  CB00    					rlc		b			;Shift b left 5
 390: 2741+4	9233  78      					ld		a,b
 391: 2745+7	9234  E6E0    					and		11100000b	;Mask lower adress
 392: 2752+4	9236  B1      					or		c			;Combine with C
 393: 2756+4	9237  6F      					ld		l,a			;A is now low byte of adress
 394: 2760+4	9238  78      					ld		a,b
 395: 2764+7	9239  E603    					and		00000011b	;Mask upper adress
 396: 2771+7	923B  F6E0    					or		0E0H		;Start of map
 397: 2778+4	923D  67      					ld		h,a
 398: 2782+10	923E  C1      					pop		bc
 399: 2792+10	923F  C9      					ret
 400:				
 401:				;------- Get Path Find Map Address----;
 402:				; C - X
 403:				; B	- Y
 404:     -	9240          	getAddressPF:
 405: 2802+11	9240  C5      					push	bc
 406: 2813+8	9241  CB00    					rlc		b			;Shift b left 5
 407: 2821+8	9243  CB00    					rlc		b			;Shift b left 5
 408: 2829+8	9245  CB00    					rlc		b			;Shift b left 5
 409: 2837+8	9247  CB00    					rlc		b			;Shift b left 5
 410: 2845+8	9249  CB00    					rlc		b			;Shift b left 5
 411: 2853+4	924B  78      					ld		a,b
 412: 2857+7	924C  E6E0    					and		11100000b	;Mask lower adress
 413: 2864+4	924E  B1      					or		c			;Combine with C
 414: 2868+4	924F  6F      					ld		l,a			;A is now low byte of adress
 415: 2872+4	9250  78      					ld		a,b
 416: 2876+7	9251  E603    					and		00000011b	;Mask upper adress
 417: 2883+7	9253  F6D0    					or		0D0H		;Start of map
 418: 2890+4	9255  67      					ld		h,a
 419: 2894+10	9256  C1      					pop		bc
 420: 2904+10	9257  C9      					ret
 421:				
 422:				
 423:				;--------- Map print -------- ;
 424:				; C - X
 425:				; B	- Y
 426:     -	9258          	printMapAt:	
 427: 2914+11	9258  C5      				PUSH	BC
 428: 2925+4	9259  0C      				INC		C
 429: 2929+4	925A  69      				LD		L,C
 430: 2933+7	925B  2600    				LD		H, $00			;We dont care about msb
 431: 2940+11	925D  E5      				PUSH	HL
 432: 2951+4	925E  04      				INC		B
 433: 2955+4	925F  68      				LD		L,B
 434: 2959+7	9260  2600    				LD		H, $00			;Again we dont care
 435: 2966+11	9262  E5      				PUSH	HL
 436: 2977+17	9263  CD8893  				CALL	moveCursor
 437: 2994+10	9266  C1      				POP 	BC
 438: 3004+17	9267  CD0F92  				CALL	getDataAtPos
 439: 3021+17	926A  CD8992  				CALL	pmChar
 440: 3038+10	926D  C9      				RET
 441:				
 442:     -	926E          	printMap:
 443: 3048+7	926E  3E20    					ld		a,32
 444: 3055+4	9270  47      					ld		b,a			; 32 chars per line
 445: 3059+4	9271  4F      					ld		c,a			; 32 lines per map
 446: 3063+10	9272  2100E0  					ld		hl,map
 447: 3073+7	9275  7E      	pmLoop:			ld		a,(hl)		; get char
 448: 3080+17	9276  CD8992  					call	pmChar		; decode what to print
 449: 3097+6	9279  23      					inc		hl			; next char
 450: 3103+8+5	927A  10F9    					djnz	pmLoop		; if were not at the end of a line, print next char
 451: 3111+17	927C  CD7F93  					call	newline		; if we are, print a new line
 452: 3128+4	927F  41      					ld		b,c			;are we at the end of a block
 453: 3132+8+5	9280  1001    					djnz	pmNextLine
 454: 3140+10	9282  C9      					ret
 455:     -	9283          	pmNextLine:	
 456: 3150+4	9283  48      					ld		c,b			;copy decremented b back to c
 457: 3154+7	9284  3E20    					ld 		a,32		;refill b withj 32
 458: 3161+4	9286  47      					ld		b,a
 459: 3165+12	9287  18EC    					jr		pmLoop		;draw next char
 460:				
 461:				
 462:     -	9289          	pmChar:		;-- Print map char a
 463: 3177+11	9289  E5      					push	hl
 464: 3188+8	928A  CB67    					bit		powerpBit,a
 465: 3196+7+5	928C  200E    					jr		nz,printPP
 466: 3203+8	928E  CB6F    					bit		pelletBit,a
 467: 3211+7+5	9290  2012    					jr		nz,printP
 468: 3218+8	9292  CB77    					bit		wallBit,a
 469: 3226+7+5	9294  2016    					jr		nz,printWall
 470: 3233+8	9296  CB7F    					bit		sfBit,a
 471: 3241+7+5	9298  201A    					jr		nz,printSF
 472: 3248+12	929A  1820    					jr	 	printVoid
 473:							
 474:     -	929C          	printPP:
 475: 3260+10	929C  211594  					ld		hl,powerPellet
 476: 3270+17	929F  CDF893  					call	print
 477: 3287+12	92A2  1820    					jr		pmCharRet
 478:     -	92A4          	printP:
 479: 3299+10	92A4  212094  					ld		hl,pellet
 480: 3309+17	92A7  CDF893  					call	print
 481: 3326+12	92AA  1818    					jr		pmCharRet
 482:     -	92AC          	printWall:
 483: 3338+10	92AC  210A94  					ld		hl,wall
 484: 3348+17	92AF  CDF893  					call	print
 485: 3365+12	92B2  1810    					jr		pmCharRet
 486:     -	92B4          	printSF:
 487: 3377+10	92B4  212B94  					ld		hl,superFruit
 488: 3387+17	92B7  CDF893  					call	print
 489: 3404+12	92BA  1808    					jr		pmCharRet
 490:     -	92BC          	printVoid:
 491: 3416+10	92BC  217594  					ld		hl,void
 492: 3426+17	92BF  CDF893  					call	print
 493: 3443+12	92C2  1800    					jr		pmCharRet
 494:     -	92C4          	pmCharRet:	
 495: 3455+10	92C4  E1      					pop 	hl
 496: 3465+10	92C5  C9      					ret
 497:								
 498:				;-------- Path Find Map -------;
 499:				;Initi Path Find Map
 500:     -	92C6          	initPathFind:
 501: 3475+7	92C6  3E20    					ld		a,32
 502: 3482+4	92C8  47      					ld		b,a			; 32 chars per line
 503: 3486+4	92C9  4F      					ld		c,a			; 32 lines per map
 504: 3490+10	92CA  2100D0  					ld		hl,pathFindMap
 505: 3500+7	92CD  16FF    	initpPFLoop:	ld		D,0FFH		; set char
 506: 3507+7	92CF  72      					LD		(HL),D
 507: 3514+6	92D0  23      					inc		hl			; next char
 508: 3520+8+5	92D1  10FA    					djnz	initpPFLoop		; if were not at the end of a line, print next char
 509: 3528+4	92D3  41      					ld		b,c			;are we at the end of a block
 510: 3532+8+5	92D4  1001    					djnz	pfNextRow
 511: 3540+10	92D6  C9      					ret
 512:     -	92D7          	pfNextRow:	
 513: 3550+4	92D7  48      					ld		c,b			;copy decremented b back to c
 514: 3554+7	92D8  3E20    					ld 		a,32		;refill b withj 32
 515: 3561+4	92DA  47      					ld		b,a
 516: 3565+12	92DB  18F0    					jr		initpPFLoop		;draw next char
 517:				
 518:				;Calculate Map
 519:     -	92DD          	calculatePathMap:
 520: 3577+10	92DD  01FFFF  					ld		BC,0FFFFH		;Push Stack terminator		
 521: 3587+11	92E0  C5      					PUSH	BC
 522: 3598+13	92E1  3A0081  					LD		A, (pacx)		;Push X to stack
 523: 3611+4	92E4  4F      					LD		C,A
 524: 3615+13	92E5  3A0181  					LD		A, (pacy)		;Push Y to stack
 525: 3628+4	92E8  47      					LD		B,A
 526: 3632+17	92E9  CD4092  					CALL	getAddressPF
 527: 3649+10	92EC  3600    					LD		(HL),00H
 528: 3659+11	92EE  C5      					PUSH	BC
 529:     -	92EF          	calculatePathMapLoop:
 530: 3670+10	92EF  C1      					POP		BC			;Get node to visit
 531: 3680+4	92F0  78      					LD		A,B			;Check Its not FFFF
 532: 3684+4	92F1  B7      					OR		A
 533: 3688+7	92F2  FEFF    					CP		0FFH
 534: 3695+5+6	92F4  C8      					RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
 535: 3700+20	92F5  ED43F289					LD		(originalBC),BC
 536: 3720+17	92F9  CD4092  					CALL	getAddressPF
 537: 3737+7	92FC  7E      					LD		A,(HL)
 538: 3744+4	92FD  3C      					INC		A
 539: 3748+10	92FE  EAEF92  					JP 		PE,calculatePathMapLoop	;Skip again if inc overflows
 540: 3758+4	9301  5F      					LD		E,A			;Keep the distance were working with safe
 541: 3762+17	9302  CD2892  					CALL	getMapAddress
 542: 3779+7	9305  56      					LD		D,(HL)
 543: 3786+7	9306  3E57    					LD		A,	'W'			;check up
 544: 3793+17	9308  CDF591  					CALL	isMoveValid
 545: 3810+10+7	930B  C42993  					CALL	NZ,calculateMapU
 546: 3820+7	930E  3E53    					LD		A,	'S'			;down
 547: 3827+17	9310  CDF591  					CALL	isMoveValid
 548: 3844+10+7	9313  C43493  					CALL	NZ,calculateMapD
 549: 3854+7	9316  3E41    					LD		A,	'A'			;left
 550: 3861+17	9318  CDF591  					CALL	isMoveValid
 551: 3878+10+7	931B  C43F93  					CALL	NZ,calculateMapL
 552: 3888+7	931E  3E44    					LD		A,	'D'			;right
 553: 3895+17	9320  CDF591  					CALL	isMoveValid
 554: 3912+10+7	9323  C44A93  					CALL	NZ,calculateMapR
 555: 3922+10	9326  C3EF92  					JP		calculatePathMapLoop
 556:								
 557:     -	9329          	calculateMapU:	
 558: 3932+20	9329  ED4BF289					LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
 559: 3952+4	932D  78      					LD		A, B				;Make modifications to corod
 560: 3956+4	932E  3D      					DEC		A
 561: 3960+7	932F  E61F    					AND		00011111B			;Mask for looping
 562: 3967+4	9331  47      					LD		B,A
 563: 3971+12	9332  1821    					JR		calculateMapCell
 564:     -	9334          	calculateMapD:	
 565: 3983+20	9334  ED4BF289					LD		BC,(originalBC)	
 566: 4003+4	9338  78      					LD		A, B
 567: 4007+4	9339  3C      					INC		A
 568: 4011+7	933A  E61F    					AND		00011111B
 569: 4018+4	933C  47      					LD		B,A
 570: 4022+12	933D  1816    					JR		calculateMapCell
 571:     -	933F          	calculateMapL:	
 572: 4034+20	933F  ED4BF289					LD		BC,(originalBC)
 573: 4054+4	9343  79      					LD		A, C
 574: 4058+4	9344  0D      					DEC		C
 575: 4062+7	9345  E61F    					AND		00011111B
 576: 4069+4	9347  4F      					LD		C,A
 577: 4073+12	9348  180B    					JR		calculateMapCell
 578:     -	934A          	calculateMapR:
 579: 4085+20	934A  ED4BF289					LD		BC,(originalBC)
 580: 4105+4	934E  79      					LD		A, C
 581: 4109+4	934F  3C      					INC		A
 582: 4113+7	9350  E61F    					AND		00011111B
 583: 4120+4	9352  4F      					LD		C,A
 584: 4124+12	9353  1800    					JR		calculateMapCell
 585:				
 586:     -	9355          	calculateMapCell:
 587: 4136+17	9355  CD4092  					CALL	getAddressPF
 588: 4153+7	9358  7E      					LD		A,(HL)
 589:				
 590: 4160+4	9359  BB      					CP		E			;Compare current data (A) with E (the path were looking at)
 591: 4164+5+6	935A  D8      					RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
 592: 4169+5+6	935B  C8      					RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
 593: 4174+7	935C  73      					LD		(HL),E
 594: 4181+10	935D  E1      					POP		HL			;We need the return adress on the top of the stack
 595: 4191+11	935E  C5      					PUSH	BC			;Push Cell so it can be visited
 596: 4202+11	935F  E5      					PUSH	HL
 597: 4213+10	9360  C9      					RET			
 598:				
 599:				;------Score;
 600:     -	9361          	printScore:					
 601: 4223+10	9361  210200  					LD		HL, $02
 602: 4233+11	9364  E5      					PUSH	HL
 603: 4244+10	9365  212300  					LD		HL, $23
 604: 4254+11	9368  E5      					PUSH	HL
 605: 4265+17	9369  CD8893  					CALL	moveCursor
 606: 4282+10	936C  213694  					LD		HL, scoreHUD
 607: 4292+17	936F  CDF893  					CALL 	print
 608: 4309+16	9372  2A0089  					LD		HL, (score)
 609: 4325+17	9375  CD9F93  					CALL	HLToDec
 610: 4342+7	9378  3E0A    					LD		A,LF
 611: 4349+11	937A  CF      					RST     08H
 612: 4360+7	937B  3E0D    					LD		A,CR
 613: 4367+11	937D  CF      					RST     08H
 614: 4378+10	937E  C9      					RET
 615:							
 616:				;------- Libs ------------;
 617:     -	937F          	newline:			
 618: 4388+11	937F  F5      					push 	af
 619: 4399+7	9380  3E0D    					ld		a, CR
 620: 4406+11	9382  CF      					rst 	08H
 621: 4417+7	9383  3E0A    					ld		a, LF
 622: 4424+11	9385  CF      					rst 	08H
 623: 4435+10	9386  F1      					pop 	af
 624: 4445+10	9387  C9      					ret
 625:							
 626:				;move cursor to (sp,sp-2)				
 627:     -	9388          	moveCursor:		
 628: 4455+10	9388  D1      					POP		DE
 629: 4465+7	9389  3E1B    					LD		A,$1B
 630: 4472+11	938B  CF      					RST     08H
 631: 4483+7	938C  3E5B    					LD		A,'['
 632: 4490+11	938E  CF      					RST     08H
 633: 4501+10	938F  E1      					POP		HL
 634: 4511+17	9390  CD9F93  					CALL	HLToDec
 635: 4528+7	9393  3E3B    					LD		A,$3B
 636: 4535+11	9395  CF      					RST     08H
 637: 4546+10	9396  E1      					POP		HL
 638: 4556+17	9397  CD9F93  					CALL	HLToDec
 639: 4573+7	939A  3E66    					LD		A,'f'
 640: 4580+11	939C  CF      					RST     08H
 641: 4591+11	939D  D5      					PUSH	DE
 642: 4602+10	939E  C9      					RET
 643:				
 644:				;Prints	hl as decimal			
 645:     -	939F          	HLToDec:
 646: 4612+11	939F  F5      					PUSH	AF
 647: 4623+11	93A0  C5      					PUSH	BC
 648: 4634+17	93A1  CDA793  					CALL	DispHL
 649: 4651+10	93A4  C1      					POP		BC
 650: 4661+10	93A5  F1      					POP		AF
 651: 4671+10	93A6  C9      					RET
 652:     -	93A7          	DispHL:
 653: 4681+10	93A7  01F0D8  					ld		bc,-10000
 654: 4691+17	93AA  CDC093  					call	Num1
 655: 4708+10	93AD  0118FC  					ld		bc,-1000
 656: 4718+17	93B0  CDC093  					call	Num1
 657: 4735+10	93B3  019CFF  					ld		bc,-100
 658: 4745+17	93B6  CDC093  					call	Num1
 659: 4762+7	93B9  0EF6    					ld		c,-10
 660: 4769+17	93BB  CDC093  					call	Num1
 661: 4786+7	93BE  0EFF    					ld		c,-1
 662: 4793+7	93C0  3E2F    	Num1:			ld		a,'0'-1
 663: 4800+4	93C2  3C      	Num2:			inc		a
 664: 4804+11	93C3  09      					add		hl,bc
 665: 4815+7+5	93C4  38FC    					jr		c,Num2
 666: 4822+15	93C6  ED42    					sbc		hl,bc
 667: 4837+11	93C8  CF      					RST     08H
 668: 4848+10	93C9  C9      					ret
 669:				;Print A as HEX				
 670:     -	93CA          	NumToHex:    	
 671: 4858+11	93CA  C5      					push	bc
 672: 4869+4	93CB  4F      					ld 		c, a   		; a = number to convert
 673: 4873+17	93CC  CDD793  	            	call 	Num1H
 674: 4890+11	93CF  CF      	            	RST     08H
 675: 4901+4	93D0  79      	            	ld 		a, c
 676: 4905+17	93D1  CDDB93  	            	call 	Num2H
 677: 4922+11	93D4  CF      	            	RST     08H
 678: 4933+10	93D5  C1      					pop		bc
 679: 4943+10	93D6  C9      	            	ret
 680:				
 681: 4953+4	93D7  1F      	Num1H:        	rra
 682: 4957+4	93D8  1F      	            	rra
 683: 4961+4	93D9  1F      	            	rra
 684: 4965+4	93DA  1F      	           		rra
 685: 4969+7	93DB  F6F0    	Num2H:        	or 		$F0
 686: 4976+4	93DD  27      	            	daa
 687: 4980+7	93DE  C6A0    	            	add 	a, $A0
 688: 4987+7	93E0  CE40    	            	adc 	a, $40 		; Ascii hex at this point (0 to F)   
 689: 4994+10	93E2  C9      	            	ret
 690:				
 691:				;Get ABS of A
 692:     -	93E3          	absA:
 693: 5004+4	93E3  B7      	     or a
 694: 5008+5+6	93E4  F0      	     ret p
 695: 5013+8	93E5  ED44    	     neg
 696: 5021+10	93E7  C9      	     ret
 697:				
 698:				;getArAndomA	 
 699:     -	93E8          	randomA:				
 700: 5031+13	93E8  3A8888  					ld a, 	(seed)
 701: 5044+4	93EB  47      					ld b, 	a 
 702:				
 703: 5048+4	93EC  0F      					rrca ; multiply by 32
 704: 5052+4	93ED  0F      					rrca
 705: 5056+4	93EE  0F      					rrca
 706: 5060+7	93EF  EE1F    					xor $1f
 707:				
 708: 5067+4	93F1  80      					add 	a, b
 709: 5071+7	93F2  DEFF    					sbc a, 255 ; carry
 710:				
 711: 5078+13	93F4  328888  					ld (seed), a
 712: 5091+10	93F7  C9      					ret
 713:				
 714:				;------- Print string
 715: 5101+11	93F8  F5      	print:			PUSH 	AF				; Preserve AF				
 716: 5112+7	93F9  7E      	printLoop:      LD      A,(HL)          ; Get character
 717: 5119+4	93FA  B7      	                OR      A               ; Is it $00 ?
 718: 5123+7+5	93FB  2804    	                JR     	Z,printRet      ; Then RETurn on terminator
 719: 5130+11	93FD  CF      	                RST     08H             ; Print it
 720: 5141+6	93FE  23      	                INC     HL              ; Next Character
 721: 5147+12	93FF  18F8    	                JR      printLoop       ; Continue until $00
 722:								
 723:				;delay loop
 724:     -	9401          	printRet:		
 725: 5159+10	9401  F1      					POP		AF
 726: 5169+10	9402  C9      					RET
 727:     -	9403          	delay:
 728: 5179+4	9403  00      					NOP
 729: 5183+6	9404  0B      					DEC 	BC
 730: 5189+4	9405  78      					LD 		A,B
 731: 5193+4	9406  B1      					OR 		C
 732: 5197+5+6	9407  C8      					RET 	Z
 733: 5202+12	9408  18F9    					JR 		delay
 734:				
 735:				;Strings
 736:     -	940A  1B5B3334	wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
	              6D231B5B
	              306D00
 737:     -	9415  1B5B3937	powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
	              6D6F1B5B
	              306D00
 738:     -	9420  1B5B3337	pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
	              6D2A1B5B
	              306D00
 739:     -	942B  1B5B3331	superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
	              6D401B5B
	              306D00
 740:				
 741:     -	9436  53636F72	scoreHUD:     	.BYTE "Score: ",0
	              653A2000
 742:				
 743:     -	943E  1B5B3933	pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
	              6D431B5B
	              306D00
 744:				
 745:     -	9449  1B5B3931	redGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 746:     -	9454  1B5B3932	greenGhost:		.BYTE	1BH,"[92mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 747:     -	945F  1B5B3336	blueGhost:		.BYTE	1BH,"[36mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 748:     -	946A  1B5B3935	pinkGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 749:				
 750:				
 751:     -	9475  2000    	void:			.BYTE	" ",0
 752:				
 753:     -	9477  1B5B481B	cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
	              5B324A00
 754:				;-----Path find map
 755:     -	D000          		.ORG 0D000H
 756:     -	D000          	pathFindMap:
 757:				;----- Map ------		
 758:     -	E000          		.ORG 0E000H
 759:				;----Pellet
 760:     -	0040          	ww 		.EQU	40H
 761:				
 762:     -	002C          	hp 		.EQU	2CH		;left 	right	pellet
 763:     -	0023          	gp		.EQU	23H		;up		down	pellet
 764:				
 765:     -	0026          	lp		.EQU	26H		;down 	left 	pellet
 766:     -	002A          	rp		.EQU	2AH		;down 	right	pellet
 767:     -	0025          	up		.EQU	25H		;up 	left	pellet
 768:     -	0029          	dp		.EQU	29H		;up 	right	pellet
 769:				
 770:     -	002B          	bp		.EQU	2BH		;up		down	right	pellet
 771:     -	0027          	cp		.EQU	27H		;up		down	left	pellet
 772:     -	002E          	vp		.EQU	2EH		;down	left	right	pellet
 773:     -	002D          	kp		.EQU	2DH		;up		left	right	pellet
 774:				
 775:     -	002F          	xp		.EQU	2FH		;all	pellet
 776:				;------- No pellet
 777:     -	000C          	hn 		.EQU	0CH		;left 	right	pellet
 778:     -	0003          	gn		.EQU	03H		;up		down	pellet
 779:				
 780:     -	0006          	ln		.EQU	06H		;down 	left 	pellet
 781:     -	000A          	rn		.EQU	0AH		;down 	right	pellet
 782:     -	0005          	un		.EQU	05H		;up 	left	pellet
 783:     -	0009          	dn		.EQU	09H		;up 	right	pellet
 784:				
 785:     -	000B          	bn		.EQU	0BH		;up		down	right	pellet
 786:     -	0007          	cn		.EQU	07H		;up		down	left	pellet
 787:     -	000E          	vn		.EQU	0EH		;down	left	right	pellet
 788:     -	000D          	kn		.EQU	0DH		;up		left	right	pellet
 789:				
 790:     -	000F          	xn		.EQU	0FH		;all	pellet
 791:				;--------Power Pellet
 792:     -	001C          	hs 		.EQU	1CH		;left 	right	pellet
 793:     -	0013          	gs		.EQU	13H		;up		down	pellet
 794:				
 795:     -	0016          	ls		.EQU	16H		;down 	left 	pellet
 796:     -	001A          	rs		.EQU	1AH		;down 	right	pellet
 797:     -	0015          	us		.EQU	15H		;up 	left	pellet
 798:     -	0019          	ds		.EQU	19H		;up 	right	pellet
 799:				
 800:     -	001B          	bs		.EQU	1BH		;up		down	right	pellet
 801:     -	0017          	cs		.EQU	17H		;up		down	left	pellet
 802:     -	001E          	vs		.EQU	1EH		;down	left	right	pellet
 803:     -	001D          	ks		.EQU	1DH		;up		left	right	pellet
 804:				
 805:     -	001F          	xs		.EQU	1FH		;all	pellet
 806:				
 807:				
 808:     -	E000  00004040	map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
 809:     -	E020  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2E2C2C2C
	              2C2C2640
	              402A2C2C
	              2C2C2C2E
	              2C2C2C2C
	              26400000
 810:     -	E040  00004013			.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              13400000
 811:     -	E060  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
 812:     -	E080  0000402B			.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
	              2C2C2C2C
	              2F2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C2F
	              2C2C2C2C
	              27400000
 813:     -	E0A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404023
	              40404040
	              40404040
	              23404023
	              40404040
	              23400000
 814:     -	E0C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              27404029
	              2C2C2640
	              402A2C2C
	              2540402B
	              2C2C2C2C
	              25400000
 815:     -	E0E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404040
	              40400340
	              40034040
	              40404023
	              40404040
	              40400000
 816:     -	E100  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404023
	              40000000
	              00000000
 817:     -	E120  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404000
	              00404040
	              03404023
	              40000000
	              00000000
 818:     -	E140  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
 819:     -	E160  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              2F0C0C07
	              40000000
	              00000040
	              0B0C0C2F
	              0C0C0C0C
	              0C0C0C0C
 820:     -	E180  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
 821:     -	E1A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404040
	              40404040
	              03404023
	              40000000
	              00000000
 822:     -	E1C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404023
	              40000000
	              00000000
 823:     -	E1E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404003
	              40404040
	              40404040
	              03404023
	              40404040
	              40400000
 824:     -	E200  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2F2C2C2D
	              2C2C2640
	              402A2C2C
	              2D2C2C2F
	              2C2C2C2C
	              26400000
 825:     -	E220  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
 826:     -	E240  00004019			.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
	              2C264040
	              2B2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C27
	              40402A2C
	              15400000
 827:     -	E260  00004040			.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
	              40234040
	              23404023
	              40404040
	              40404040
	              23404023
	              40402340
	              40400000
 828:     -	E280  0000402A			.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
	              2C2D2C2C
	              25404029
	              2C2C2640
	              402A2C2C
	              25404029
	              2C2C2D2C
	              26400000
 829:     -	E2A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              40404040
	              40402340
	              40234040
	              40404040
	              40404040
	              23400000
 830:     -	E2C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              2C2C2C2C
	              2C2C2D2C
	              2C2D2C2C
	              2C2C2C2C
	              2C2C2C2C
	              25400000
 831:     -	E2E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
 832:     -	E300  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 833:     -	E320  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 834:     -	E340  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 835:     -	E360  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 836:     -	E380  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 837:     -	E3A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
 838:     -	E3C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
**** main.asm ****
 839:     -	E3E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000



Statistics:

     4	passes
     0	jr promotions
   149	symbols
  2175	bytes



Symbol Table:

absa            93e3     
blueghost       945f     
bn             =   b     
bp             =  2b     
bs             =  1b     
calcnextmove    90e5     
calculatemapcell 9355     
calculatemapd   9334     
calculatemapl   933f     
calculatemapr   934a     
calculatemapu   9329     
calculatepathmap 92dd     
calculatepathmaploop 92ef     
checkh          90ef     
checkv          90fd     
clearpm         9082     
clearredghost   9119     
cls             9477     
cn             =   7     
cp             =  27     
cr             =   d     
cs             =  17     
delay           9403     
disphl          93a7     
dn             =   9     
downbit        =   1     
dp             =  29     
ds             =  19     
eatpellet       90b4     
eatspellet      90bc     
gameloop        9032     
getaddresspf    9240     
getdataatpos    920f     
getmapaddress   9228     
getmove         90c9     
getpmmapdata    90a8     
getredghostmapdata 913f     
getredghostnextmove 9157     
ghostdis       =8113     
gn             =   3     
gp             =  23     
greenghost      9454     
gs             =  13     
hltodec         939f     
hn             =   c     
hp             =  2c     
hs             =  1c     
initpacx       =   e     
initpacy       =   e     
initpathfind    92c6     
initppfloop     92cd     
initredghostx  =  14     
initredghosty  =   1     
input           9068     
ismovevalid     91f5     
kn             =   d     
kp             =  2d     
ks             =  1d     
leftbit        =   2     
lf             =   a     
ln             =   6     
lp             =  26     
ls             =  16     
map             e000     
move            91cf     
movecursor      9388     
moved           91e3     
movedvalid      9206     
movel           91e9     
movelvalid      9209     
movepm          910d     
mover           91ef     
moveredghost    914b     
movervalid      920c     
moveu           91dd     
moveuvalid      9203     
newline         937f     
nextmovevalid   90de     
num1            93c0     
num1h           93d7     
num2            93c2     
num2h           93db     
numtohex        93ca     
oldstackpointer=89f0     
originalbc     =89f2     
paccdir        =8102     
pacman          943e     
pacndir        =8103     
pacx           =8100     
pacy           =8101     
pathfindmap     d000     
pellet          9420     
pelletbit      =   5     
pfnextrow       92d7     
pinkghost       946a     
pmchar          9289     
pmcharret       92c4     
pmloop          9275     
pmnextline      9283     
powerpbit      =   4     
powerpellet     9415     
print           93f8     
printloop       93f9     
printmap        926e     
printmapat      9258     
printp          92a4     
printpm         908e     
printpp         929c     
printredghost   9125     
printret        9401     
printscore      9361     
printsf         92b4     
printvoid       92bc     
printwall       92ac     
randoma         93e8     
redghost        9449     
redghostcheckd  918f     
redghostcheckl  919d     
redghostcheckr  91ab     
redghostchecku  9181     
redghostdir    =8112     
redghostpathfind 91b9     
redghostsetnewdir 91c6     
redghostx      =8110     
redghosty      =8111     
rightbit       =   3     
rn             =   a     
rp             =  2a     
rs             =  1a     
score          =8900     
scorehud        9436     
seed           =8888     
sfbit          =   7     
superfruit      942b     
un             =   5     
up             =  25     
upbit          =   0     
us             =  15     
validinput      907e     
vn             =   e     
void            9475     
vp             =  2e     
vs             =  1e     
wall            940a     
wallbit        =   6     
ww             =  40     
xn             =   f     
xp             =  2f     
xs             =  1f     
