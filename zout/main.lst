   1:     -	000D          	CR              .EQU     0DH
   2:     -	000A          	LF              .EQU     0AH
   3:				
   4:				;----- Map data bit positions
   5:     -	0000          	upBit			.EQU	0
   6:     -	0001          	downBit			.EQU	1
   7:     -	0002          	leftBit			.EQU	2
   8:     -	0003          	rightBit		.EQU	3
   9:     -	0004          	powerpBit		.EQU	4
  10:     -	0005          	pelletBit		.EQU	5
  11:     -	0006          	wallBit			.EQU	6
  12:     -	0007          	sfBit			.EQU	7
  13:				;--------Initial Stats
  14:     -	000E          	initPacx		.EQU	14
  15:     -	000E          	initPacy		.EQU	14
  16:				
  17:				;-----Varr
  18:				;Packman
  19:     -	8100          	pacx			.EQU	8100H
  20:     -	8101          	pacy			.EQU	8101H
  21:     -	8102          	pacCDir			.EQU	8102H		;Pacmans current direction
  22:     -	8103          	pacNDir			.EQU	8103H		;Pacman next direction (from key press)
  23:				
  24:				;RedGhost
  25:     -	8110          	redGhostX		.EQU	8110H		
  26:     -	8111          	redGhostY		.EQU	8111H
  27:     -	8112          	redGhostDir		.EQU	8112H
  28:     -	8113          	ghostDis		.EQU	8113H		;Red ghost move distance from pacman
  29:				
  30:     -	8888          	seed			.EQU	8888H		;Random seed
  31:				
  32:     -	8900          	score			.EQU	8900H		;Score
  33:				
  34:     -	89F0          	oldStackPointer	.EQU	89F0H		;Old Stack Location 	
  35:     -	89F2          	originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
  36:				
  37:				
  38:				
  39:				
  40:     -	9000          		.ORG 9000H
  41:    0+20	9000  ED73F089				ld		(oldStackPointer), SP
  42:   20+10	9004  31FFFF  				ld		sp,0FFFFH
  43:   30+7	9007  3E0E    				ld		a, initPacx		;set Pacman Pos
  44:   37+13	9009  320081  				ld		(pacx),a
  45:   50+7	900C  3E0E    				ld		a, initPacy
  46:   57+13	900E  320181  				ld		(pacy),a
  47:   70+7	9011  3E44    				ld		a, 'D'			;Set start direction
  48:   77+13	9013  320281  				ld		(pacCDir),A
  49:   90+13	9016  320381  				ld		(pacNDir),A
  50:  103+10	9019  210000  				ld		HL, 0H
  51:  113+16	901C  220089  				LD		(score), HL
  52:  129+7	901F  3E14    				ld		a, initRedGhostX	;set RedGhost Pos
  53:  136+13	9021  321081  				ld		(redGhostX),a
  54:  149+7	9024  3E01    				ld		a, initRedGhostY
  55:  156+13	9026  321181  				ld		(redGhostY),a
  56:  169+10	9029  216194  				LD		HL, cls			;Clear screen
  57:  179+17	902C  CD0E94  				CALL	print
  58:  196+17	902F  CD8492  				call 	printMap
  59:     -	9032          	gameLoop:		
  60:  213+17	9032  CD6890  				call	input
  61:  230+17	9035  CDCA90  				call 	getMove
  62:  247+17	9038  CD8290  				call 	clearPM
  63:  264+17	903B  CD0E91  				call	movePM
  64:  281+17	903E  CD8E90  				call 	printPM
  65:  298+17	9041  CDB590  				call	eatPellet
  66:				
  67:  315+17	9044  CDDC92  				call	initPathFind
  68:  332+17	9047  CDF392  				call	calculatePathMap
  69:				
  70:  349+17	904A  CD5991  				call	getRedGhostNextMove
  71:  366+17	904D  CD1A91  				call	clearRedGhost
  72:  383+17	9050  CD4D91  				call	moveRedGhost
  73:  400+17	9053  CD2691  				call	printRedGhost
  74:							
  75:  417+17	9056  CD7793  				call 	printScore
  76:  434+7	9059  06FF    				LD 		B,0FFH   ;delay
  77:  441+7	905B  0EFF    				LD		C,0FFH
  78:  448+17	905D  CD1994  				CALL 	DELAY
  79:  465+10	9060  C33290  				JP		gameLoop
  80:  475+20	9063  ED7BF089				LD		SP,(oldStackPointer)
  81:  495+10	9067  C9      				ret
  82:						
  83:				;-------------- Input --------------------------					
  84:				include input.asm	
**** input.asm ****
   1:     -	9068          	input:
   2:  505+11	9068  DF      					RST		18H
   3:  516+5+6	9069  C8      					RET		Z
   4:  521+11	906A  D7      					RST		10H
   5:  532+7	906B  E6DF    					AND     11011111b       ; lower to uppercase
   6:  539+7	906D  FE57    					CP		'W'
   7:  546+7+5	906F  280D    					JR		Z,validInput
   8:  553+7	9071  FE41    					CP		'A'
   9:  560+7+5	9073  2809    					JR		Z,validInput
  10:  567+7	9075  FE53    					CP		'S'
  11:  574+7+5	9077  2805    					JR		Z,validInput
  12:  581+7	9079  FE44    					CP		'D'
  13:  588+7+5	907B  2801    					JR		Z,validInput
  14:  595+10	907D  C9      					RET
  15:     -	907E          	validInput:		
  16:  605+13	907E  320381  					LD		(pacNDir), A
**** main.asm ****
  85:  618+10	9081  C9      					RET
  86:				;----------Pacman------;
  87:				include	pacman.asm
**** pacman.asm ****
   1:     -	9082          	clearPM:
   2:  628+13	9082  3A0081  					LD		A, (pacx)		;Push X to stack
   3:  641+4	9085  4F      					LD		C,A
   4:  645+13	9086  3A0181  					LD		A, (pacy)		;Push Y to stack
   5:  658+4	9089  47      					LD		B,A
   6:  662+17	908A  CD6D92  					CALL 	printMapAt
   7:  679+10	908D  C9      					RET
   8:								
   9:     -	908E          	printPM:
  10:  689+13	908E  3A0081  					LD		A, (pacx)		;Push X to stack
  11:  702+4	9091  3C      					INC		A
  12:  706+4	9092  6F      					LD		L,A
  13:  710+7	9093  2600    					LD		H, $00			;We dont care about msb
  14:  717+11	9095  E5      					PUSH	HL
  15:  728+13	9096  3A0181  					LD		A, (pacy)		;Push Y to stack
  16:  741+4	9099  3C      					INC		A
  17:  745+4	909A  6F      					LD		L,A
  18:  749+7	909B  2600    					LD		H, $00			;Again we dont care
  19:  756+11	909D  E5      					PUSH	HL
  20:  767+17	909E  CD9E93  					CALL	moveCursor
  21:  784+10	90A1  215494  					LD		HL, pacman
  22:  794+17	90A4  CD0E94  					CALL 	print
  23:  811+10	90A7  C9      					RET
  24:     -	90A8          	getPMMapData:	
  25:  821+13	90A8  3A0081  					LD		A, (pacx)
  26:  834+4	90AB  4F      					LD		C,A
  27:  838+13	90AC  3A0181  					LD		A, (pacy)
  28:  851+4	90AF  47      					LD		B,A
  29:  855+17	90B0  CD3D92  					CALL	getMapAddress
  30:  872+7	90B3  7E      	                LD      A,(HL)
  31:  879+10	90B4  C9      					ret
  32:     -	90B5          	eatPellet:		;Eat pellet at packman location
  33:  889+17	90B5  CDA890  					CALL 	getPMMapData
  34:  906+8	90B8  CB6F    					BIT		pelletBit,A
  35:  914+7+5	90BA  2001    					JR		NZ,eatSPellet
  36:  921+10	90BC  C9      					RET
  37:								
  38:     -	90BD          	eatSPellet:		
  39:  931+11	90BD  E5      					PUSH	HL		
  40:  942+16	90BE  2A0089  					LD		HL,(score)
  41:  958+6	90C1  23      					INC		HL
  42:  964+6	90C2  23      					INC		HL
  43:  970+16	90C3  220089  					LD		(score),HL
  44:  986+10	90C6  E1      					POP		HL
  45:  996+15	90C7  CBAE    					RES		pelletBit,(HL)
  46: 1011+10	90C9  C9      					RET
  47:								
  48:     -	90CA          	getMove:		;Sets the current move var
  49: 1021+17	90CA  CDA890  					CALL	getPMMapData
  50: 1038+4	90CD  57      					LD		D,A
  51: 1042+13	90CE  3A0381  					LD		A,(pacNDir)			;Is the next move valid
  52: 1055+17	90D1  CD2392  					CALL	isMoveValid
  53: 1072+7+5	90D4  2009    					JR		NZ,nextMoveValid
  54: 1079+13	90D6  3A0281  					LD		A,(pacCDir)			;Is the current move valid
  55: 1092+17	90D9  CD2392  					CALL	isMoveValid
  56: 1109+5+6	90DC  C0      					RET		NZ
  57: 1114+12	90DD  1807    					JR		calcNextMove
  58:								
  59:     -	90DF          	nextMoveValid:
  60: 1126+13	90DF  320281  					LD		(pacCDir),A
  61: 1139+13	90E2  320381  					LD		(pacNDir),A
  62: 1152+10	90E5  C9      					RET
  63:								
  64:     -	90E6          	calcNextMove:	
  65: 1162+7	90E6  FE41    					CP		'A'
  66: 1169+7+5	90E8  2814    					JR		Z,checkV
  67: 1176+7	90EA  FE44    					CP		'D'
  68: 1183+7+5	90EC  2810    					JR		Z,checkV
  69: 1190+12	90EE  1800    					JR		checkH
  70:     -	90F0          	checkH:
  71: 1202+7	90F0  3E41    					LD		A,'A'
  72: 1209+17	90F2  CD2392  					CALL	isMoveValid
  73: 1226+7+5	90F5  20E8    					JR		NZ,nextMoveValid
  74: 1233+7	90F7  3E44    					LD		A,'D'
  75: 1240+17	90F9  CD2392  					CALL	isMoveValid
  76: 1257+7+5	90FC  20E1    					JR		NZ,nextMoveValid
  77:     -	90FE          	checkV:
  78: 1264+7	90FE  3E57    					LD		A,'W'
  79: 1271+17	9100  CD2392  					CALL	isMoveValid
  80: 1288+7+5	9103  20DA    					JR		NZ,nextMoveValid
  81: 1295+7	9105  3E53    					LD		A,'S'
  82: 1302+17	9107  CD2392  					CALL	isMoveValid
  83: 1319+7+5	910A  20D3    					JR		NZ,nextMoveValid
  84: 1326+12	910C  18E2    					JR		checkH
  85:				;Move
  86:     -	910E          	movePM:
  87: 1338+13	910E  3A0281  					LD		A,(pacCDir)
  88: 1351+10	9111  110081  					LD		DE,pacx
  89: 1361+10	9114  010181  					LD		BC,pacy
**** main.asm ****
  88: 1371+10	9117  C3FD91  					JP		move
  89:				;------------Ghost
  90:				include ghosts.asm
**** ghosts.asm ****
   1:				;Ghost
   2:				;Red
   3:     -	0014          	initRedGhostX	.EQU	20
   4:     -	0001          	initRedGhostY	.EQU	1
   5:     -	000F          	storeRedGhostX	.EQU	15
   6:     -	000F          	storeRedGhostX	.EQU	15
   7:				
   8:				;Orange
   9:     -	0014          	initRedGhostX	.EQU	20
  10:     -	0001          	initRedGhostY	.EQU	1
  11:     -	000F          	storeRedGhostX	.EQU	15
  12:     -	000F          	storeRedGhostX	.EQU	15
  13:				
  14:				;Teal
  15:     -	0014          	initRedGhostX	.EQU	20
  16:     -	0001          	initRedGhostY	.EQU	1
  17:     -	000F          	storeRedGhostX	.EQU	15
  18:     -	000F          	storeRedGhostX	.EQU	15
  19:				
  20:				;Prink
  21:     -	0014          	initRedGhostX	.EQU	20
  22:     -	0001          	initRedGhostY	.EQU	1
  23:     -	000F          	storeRedGhostX	.EQU	15
  24:     -	000F          	storeRedGhostX	.EQU	15
  25:				
  26:				
  27:				;Red
  28:     -	911A          	clearRedGhost:
  29: 1381+13	911A  3A1081  					LD		A, (redGhostX)		;Push X to stack
  30: 1394+4	911D  4F      					LD		C,A
  31: 1398+13	911E  3A1181  					LD		A, (redGhostY)		;Push Y to stack
  32: 1411+4	9121  47      					LD		B,A
  33: 1415+17	9122  CD6D92  					CALL 	printMapAt
  34: 1432+10	9125  C9      					RET
  35:								
  36:     -	9126          	printRedGhost:
  37: 1442+13	9126  3A1081  					LD		A, (redGhostX)		;Push X to stack
  38: 1455+4	9129  3C      					INC		A
  39: 1459+4	912A  6F      					LD		L,A
  40: 1463+7	912B  2600    					LD		H, $00			;We dont care about msb
  41: 1470+11	912D  E5      					PUSH	HL
  42: 1481+13	912E  3A1181  					LD		A, (redGhostY)		;Push Y to stack
  43: 1494+4	9131  3C      					INC		A
  44: 1498+4	9132  6F      					LD		L,A
  45: 1502+7	9133  2600    					LD		H, $00			;Again we dont care
  46: 1509+11	9135  E5      					PUSH	HL
  47: 1520+17	9136  CD9E93  					CALL	moveCursor
  48: 1537+10	9139  21D191  					LD		HL, redGhost
  49: 1547+17	913C  CD0E94  					CALL 	print
  50: 1564+10	913F  C9      					RET
  51:     -	9140          	getRedGhostMapData:	
  52: 1574+13	9140  3A1081  					LD		A, (redGhostX)
  53: 1587+4	9143  4F      					LD		C,A
  54: 1591+13	9144  3A1181  					LD		A, (redGhostY)
  55: 1604+4	9147  47      					LD		B,A
  56: 1608+17	9148  CD3D92  					CALL	getMapAddress
  57: 1625+7	914B  7E      	                LD      A,(HL)
  58: 1632+10	914C  C9      					ret
  59:				;Move
  60:     -	914D          	moveRedGhost:
  61: 1642+13	914D  3A1281  					LD		A,(redGhostDir)
  62: 1655+10	9150  111081  					LD		DE,redGhostX
  63: 1665+10	9153  011181  					LD		BC,redGhostY
  64: 1675+10	9156  C3FD91  					JP		move
  65:     -	9159          	getRedGhostNextMove:
  66: 1685+7	9159  3EFF    					LD		A, 0FFH
  67: 1692+13	915B  321381  					LD		(ghostDis),A
  68: 1705+17	915E  CD4091  					CALL	getRedGhostMapData
  69: 1722+4	9161  57      					LD		D,A
  70: 1726+7	9162  3E57    					LD		A,	'W'			;check up
  71: 1733+17	9164  CD2392  					CALL	isMoveValid
  72: 1750+10+7	9167  C48391  					CALL	NZ,redGhostCheckU
  73: 1760+7	916A  3E53    					LD		A,	'S'			;down
  74: 1767+17	916C  CD2392  					CALL	isMoveValid
  75: 1784+10+7	916F  C49191  					CALL	NZ,redGhostCheckD
  76: 1794+7	9172  3E41    					LD		A,	'A'			;left
  77: 1801+17	9174  CD2392  					CALL	isMoveValid
  78: 1818+10+7	9177  C49F91  					CALL	NZ,redGhostCheckL
  79: 1828+7	917A  3E44    					LD		A,	'D'			;right
  80: 1835+17	917C  CD2392  					CALL	isMoveValid
  81: 1852+10+7	917F  C4AD91  					CALL	NZ,redGhostCheckR
  82: 1862+10	9182  C9      					RET
  83:								
  84:     -	9183          	redGhostCheckU:	
  85: 1872+11	9183  F5      					PUSH	AF
  86: 1883+13	9184  3A1181  					LD		A, (redGhostY)
  87: 1896+4	9187  3D      					DEC		A
  88: 1900+7	9188  E61F    					AND		00011111B
  89: 1907+4	918A  47      					LD		B,A
  90: 1911+13	918B  3A1081  					LD		A,(redGhostX)
  91: 1924+4	918E  4F      					LD		C,A
  92: 1928+12	918F  182A    					JR		redGhostPathFind
  93:     -	9191          	redGhostCheckD:			
  94: 1940+11	9191  F5      					PUSH	AF
  95: 1951+13	9192  3A1181  					LD		A, (redGhostY)
  96: 1964+4	9195  3C      					INC		A
  97: 1968+7	9196  E61F    					AND		00011111B
  98: 1975+4	9198  47      					LD		B,A
  99: 1979+13	9199  3A1081  					LD		A,(redGhostX)
 100: 1992+4	919C  4F      					LD		C,A
 101: 1996+12	919D  181C    					JR		redGhostPathFind
 102:     -	919F          	redGhostCheckL:		
 103: 2008+11	919F  F5      					PUSH	AF	
 104: 2019+13	91A0  3A1081  					LD		A, (redGhostX)
 105: 2032+4	91A3  3D      					DEC		A
 106: 2036+7	91A4  E61F    					AND		00011111B
 107: 2043+4	91A6  4F      					LD		C,A
 108: 2047+13	91A7  3A1181  					LD		A,(redGhostY)
 109: 2060+4	91AA  47      					LD		B,A
 110: 2064+12	91AB  180E    					JR		redGhostPathFind
 111:     -	91AD          	redGhostCheckR:
 112: 2076+11	91AD  F5      					PUSH	AF	
 113: 2087+13	91AE  3A1081  					LD		A, (redGhostX)
 114: 2100+4	91B1  3C      					INC		A
 115: 2104+7	91B2  E61F    					AND		00011111B
 116: 2111+4	91B4  4F      					LD		C,A
 117: 2115+13	91B5  3A1181  					LD		A,(redGhostY)
 118: 2128+4	91B8  47      					LD		B,A
 119: 2132+12	91B9  1800    					JR		redGhostPathFind
 120:				
 121:     -	91BB          	redGhostPathFind:
 122: 2144+17	91BB  CD5592  					CALL	getAddressPF
 123: 2161+13	91BE  3A1381  					LD		A,(ghostDis)
 124: 2174+7	91C1  5E      					LD		E,(HL)
 125: 2181+4	91C2  BB      					CP		E
 126: 2185+10	91C3  D2C891  					JP		NC,redGhostSetNewDir
 127: 2195+10	91C6  F1      					POP		AF
 128: 2205+10	91C7  C9      					RET
 129:     -	91C8          	redGhostSetNewDir:
 130: 2215+4	91C8  7B      					LD		A,E
 131: 2219+13	91C9  321381  					LD		(ghostDis),A
 132: 2232+10	91CC  F1      					POP		AF
 133: 2242+13	91CD  321281  					LD		(redGhostDir),A
 134: 2255+10	91D0  C9      					RET
 135:				
 136:				
 137:     -	91D1  1B5B3931	redGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 138:     -	91DC  1B5B3932	greenGhost:		.BYTE	1BH,"[92mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 139:     -	91E7  1B5B3336	blueGhost:		.BYTE	1BH,"[36mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
**** main.asm ****
  91:     -	91F2  1B5B3935	pinkGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
  92:				;-----------Spesific Libs -----;
  93:				include movelibs.asm	
**** movelibs.asm ****
   1:     -	91FD          	move:
   2: 2265+7	91FD  FE57    					CP		'W'
   3: 2272+7+5	91FF  280A    					JR		Z,moveU
   4: 2279+7	9201  FE41    					CP		'A'
   5: 2286+7+5	9203  2812    					JR		Z,moveL
   6: 2293+7	9205  FE53    					CP		'S'
   7: 2300+7+5	9207  2808    					JR		Z,moveD
   8: 2307+12	9209  1812    					JR		moveR
   9:				
  10:     -	920B          	moveU:			
  11: 2319+7	920B  0A      					LD		A, (BC)
  12: 2326+4	920C  3D      					DEC		A
  13: 2330+7	920D  E61F    					AND		00011111B
  14: 2337+7	920F  02      					LD		(BC),A
  15: 2344+10	9210  C9      					RET
  16:     -	9211          	moveD:			
  17: 2354+7	9211  0A      					LD		A, (BC)
  18: 2361+4	9212  3C      					INC		A
  19: 2365+7	9213  E61F    					AND		00011111B
  20: 2372+7	9215  02      					LD		(BC),A
  21: 2379+10	9216  C9      					RET
  22:     -	9217          	moveL:			
  23: 2389+7	9217  1A      					LD		A, (DE)
  24: 2396+4	9218  3D      					DEC		A
  25: 2400+7	9219  E61F    					AND		00011111B
  26: 2407+7	921B  12      					LD		(DE),A
  27: 2414+10	921C  C9      					RET
  28:     -	921D          	moveR:			
  29: 2424+7	921D  1A      					LD		A, (DE)
  30: 2431+4	921E  3C      					INC		A
  31: 2435+7	921F  E61F    					AND		00011111B
  32: 2442+7	9221  12      					LD		(DE),A
  33: 2449+10	9222  C9      					RET
  34:     -	9223          	isMoveValid:
  35: 2459+7	9223  FE57    					CP		'W'
  36: 2466+7+5	9225  280A    					JR		Z,moveUValid
  37: 2473+7	9227  FE41    					CP		'A'
  38: 2480+7+5	9229  280C    					JR		Z,moveLValid
  39: 2487+7	922B  FE53    					CP		'S'
  40: 2494+7+5	922D  2805    					JR		Z,moveDValid
  41: 2501+12	922F  1809    					JR		moveRValid
  42:     -	9231          	moveUValid:			
  43: 2513+8	9231  CB42    					BIT		upBit,D
  44: 2521+10	9233  C9      					RET
  45:     -	9234          	moveDValid:			
  46: 2531+8	9234  CB4A    					BIT		downBit,D
  47: 2539+10	9236  C9      					RET
  48:     -	9237          	moveLValid:			
  49: 2549+8	9237  CB52    					BIT		leftBit,D
  50: 2557+10	9239  C9      					RET
  51:     -	923A          	moveRValid:			
  52: 2567+8	923A  CB5A    					BIT		rightBit,D
**** main.asm ****
  94: 2575+10	923C  C9      					RET
  95:				include	mapLibs.asm	
**** mapLibs.asm ****
   1:				;------- Get Map Data ----;
   2:				; C - X
   3:				; B	- Y
   4:     -	923D          	getMapAddress:
   5: 2585+11	923D  C5      					push	bc
   6: 2596+8	923E  CB00    					rlc		b			;Shift b left 5
   7: 2604+8	9240  CB00    					rlc		b			;Shift b left 5
   8: 2612+8	9242  CB00    					rlc		b			;Shift b left 5
   9: 2620+8	9244  CB00    					rlc		b			;Shift b left 5
  10: 2628+8	9246  CB00    					rlc		b			;Shift b left 5
  11: 2636+4	9248  78      					ld		a,b
  12: 2640+7	9249  E6E0    					and		11100000b	;Mask lower adress
  13: 2647+4	924B  B1      					or		c			;Combine with C
  14: 2651+4	924C  6F      					ld		l,a			;A is now low byte of adress
  15: 2655+4	924D  78      					ld		a,b
  16: 2659+7	924E  E603    					and		00000011b	;Mask upper adress
  17: 2666+7	9250  F6E0    					or		0E0H		;Start of map
  18: 2673+4	9252  67      					ld		h,a
  19: 2677+10	9253  C1      					pop		bc
  20: 2687+10	9254  C9      					ret
  21:				
  22:				;------- Get Path Find Map Address----;
  23:				; C - X
  24:				; B	- Y
  25:     -	9255          	getAddressPF:
  26: 2697+11	9255  C5      					push	bc
  27: 2708+8	9256  CB00    					rlc		b			;Shift b left 5
  28: 2716+8	9258  CB00    					rlc		b			;Shift b left 5
  29: 2724+8	925A  CB00    					rlc		b			;Shift b left 5
  30: 2732+8	925C  CB00    					rlc		b			;Shift b left 5
  31: 2740+8	925E  CB00    					rlc		b			;Shift b left 5
  32: 2748+4	9260  78      					ld		a,b
  33: 2752+7	9261  E6E0    					and		11100000b	;Mask lower adress
  34: 2759+4	9263  B1      					or		c			;Combine with C
  35: 2763+4	9264  6F      					ld		l,a			;A is now low byte of adress
  36: 2767+4	9265  78      					ld		a,b
  37: 2771+7	9266  E603    					and		00000011b	;Mask upper adress
  38: 2778+7	9268  F6D0    					or		0D0H		;Start of map
  39: 2785+4	926A  67      					ld		h,a
  40: 2789+10	926B  C1      					pop		bc
  41: 2799+10	926C  C9      					ret
  42:				
  43:				
  44:				;--------- Map print -------- ;
  45:				; C - X
  46:				; B	- Y
  47:     -	926D          	printMapAt:	
  48: 2809+11	926D  C5      				PUSH	BC
  49: 2820+4	926E  0C      				INC		C
  50: 2824+4	926F  69      				LD		L,C
  51: 2828+7	9270  2600    				LD		H, $00			;We dont care about msb
  52: 2835+11	9272  E5      				PUSH	HL
  53: 2846+4	9273  04      				INC		B
  54: 2850+4	9274  68      				LD		L,B
  55: 2854+7	9275  2600    				LD		H, $00			;Again we dont care
  56: 2861+11	9277  E5      				PUSH	HL
  57: 2872+17	9278  CD9E93  				CALL	moveCursor
  58: 2889+10	927B  C1      				POP 	BC
  59: 2899+17	927C  CD3D92  				CALL	getMapAddress
  60: 2916+7	927F  7E      				LD		A,(HL)
  61: 2923+17	9280  CD9F92  				CALL	pmChar
  62: 2940+10	9283  C9      				RET
  63:				
  64:     -	9284          	printMap:
  65: 2950+7	9284  3E20    					ld		a,32
  66: 2957+4	9286  47      					ld		b,a			; 32 chars per line
  67: 2961+4	9287  4F      					ld		c,a			; 32 lines per map
  68: 2965+10	9288  2100E0  					ld		hl,map
  69: 2975+7	928B  7E      	pmLoop:			ld		a,(hl)		; get char
  70: 2982+17	928C  CD9F92  					call	pmChar		; decode what to print
  71: 2999+6	928F  23      					inc		hl			; next char
  72: 3005+8+5	9290  10F9    					djnz	pmLoop		; if were not at the end of a line, print next char
  73: 3013+17	9292  CD9593  					call	newline		; if we are, print a new line
  74: 3030+4	9295  41      					ld		b,c			;are we at the end of a block
  75: 3034+8+5	9296  1001    					djnz	pmNextLine
  76: 3042+10	9298  C9      					ret
  77:     -	9299          	pmNextLine:	
  78: 3052+4	9299  48      					ld		c,b			;copy decremented b back to c
  79: 3056+7	929A  3E20    					ld 		a,32		;refill b withj 32
  80: 3063+4	929C  47      					ld		b,a
  81: 3067+12	929D  18EC    					jr		pmLoop		;draw next char
  82:				
  83:				
  84:     -	929F          	pmChar:		;-- Print map char a
  85: 3079+11	929F  E5      					push	hl
  86: 3090+8	92A0  CB67    					bit		powerpBit,a
  87: 3098+7+5	92A2  200E    					jr		nz,printPP
  88: 3105+8	92A4  CB6F    					bit		pelletBit,a
  89: 3113+7+5	92A6  2012    					jr		nz,printP
  90: 3120+8	92A8  CB77    					bit		wallBit,a
  91: 3128+7+5	92AA  2016    					jr		nz,printWall
  92: 3135+8	92AC  CB7F    					bit		sfBit,a
  93: 3143+7+5	92AE  201A    					jr		nz,printSF
  94: 3150+12	92B0  1820    					jr	 	printVoid
  95:							
  96:     -	92B2          	printPP:
  97: 3162+10	92B2  212B94  					ld		hl,powerPellet
  98: 3172+17	92B5  CD0E94  					call	print
  99: 3189+12	92B8  1820    					jr		pmCharRet
 100:     -	92BA          	printP:
 101: 3201+10	92BA  213694  					ld		hl,pellet
 102: 3211+17	92BD  CD0E94  					call	print
 103: 3228+12	92C0  1818    					jr		pmCharRet
 104:     -	92C2          	printWall:
 105: 3240+10	92C2  212094  					ld		hl,wall
 106: 3250+17	92C5  CD0E94  					call	print
 107: 3267+12	92C8  1810    					jr		pmCharRet
 108:     -	92CA          	printSF:
 109: 3279+10	92CA  214194  					ld		hl,superFruit
 110: 3289+17	92CD  CD0E94  					call	print
 111: 3306+12	92D0  1808    					jr		pmCharRet
 112:     -	92D2          	printVoid:
 113: 3318+10	92D2  215F94  					ld		hl,void
 114: 3328+17	92D5  CD0E94  					call	print
 115: 3345+12	92D8  1800    					jr		pmCharRet
 116:     -	92DA          	pmCharRet:	
 117: 3357+10	92DA  E1      					pop 	hl
 118: 3367+10	92DB  C9      					ret
 119:								
 120:				;-------- Path Find Map -------;
 121:				;Initi Path Find Map
 122:     -	92DC          	initPathFind:
 123: 3377+7	92DC  3E20    					ld		a,32
 124: 3384+4	92DE  47      					ld		b,a			; 32 chars per line
 125: 3388+4	92DF  4F      					ld		c,a			; 32 lines per map
 126: 3392+10	92E0  2100D0  					ld		hl,pathFindMap
 127: 3402+7	92E3  16FF    	initpPFLoop:	ld		D,0FFH		; set char
 128: 3409+7	92E5  72      					LD		(HL),D
 129: 3416+6	92E6  23      					inc		hl			; next char
 130: 3422+8+5	92E7  10FA    					djnz	initpPFLoop		; if were not at the end of a line, print next char
 131: 3430+4	92E9  41      					ld		b,c			;are we at the end of a block
 132: 3434+8+5	92EA  1001    					djnz	pfNextRow
 133: 3442+10	92EC  C9      					ret
 134:     -	92ED          	pfNextRow:	
 135: 3452+4	92ED  48      					ld		c,b			;copy decremented b back to c
 136: 3456+7	92EE  3E20    					ld 		a,32		;refill b withj 32
 137: 3463+4	92F0  47      					ld		b,a
 138: 3467+12	92F1  18F0    					jr		initpPFLoop		;draw next char
 139:				
 140:				;Calculate Map
 141:     -	92F3          	calculatePathMap:
 142: 3479+10	92F3  01FFFF  					ld		BC,0FFFFH		;Push Stack terminator		
 143: 3489+11	92F6  C5      					PUSH	BC
 144: 3500+13	92F7  3A0081  					LD		A, (pacx)		;Push X to stack
 145: 3513+4	92FA  4F      					LD		C,A
 146: 3517+13	92FB  3A0181  					LD		A, (pacy)		;Push Y to stack
 147: 3530+4	92FE  47      					LD		B,A
 148: 3534+17	92FF  CD5592  					CALL	getAddressPF
 149: 3551+10	9302  3600    					LD		(HL),00H
 150: 3561+11	9304  C5      					PUSH	BC
 151:     -	9305          	calculatePathMapLoop:
 152: 3572+10	9305  C1      					POP		BC			;Get node to visit
 153: 3582+4	9306  78      					LD		A,B			;Check Its not FFFF
 154: 3586+4	9307  B7      					OR		A
 155: 3590+7	9308  FEFF    					CP		0FFH
 156: 3597+5+6	930A  C8      					RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
 157: 3602+20	930B  ED43F289					LD		(originalBC),BC
 158: 3622+17	930F  CD5592  					CALL	getAddressPF
 159: 3639+7	9312  7E      					LD		A,(HL)
 160: 3646+4	9313  3C      					INC		A
 161: 3650+10	9314  EA0593  					JP 		PE,calculatePathMapLoop	;Skip again if inc overflows
 162: 3660+4	9317  5F      					LD		E,A			;Keep the distance were working with safe
 163: 3664+17	9318  CD3D92  					CALL	getMapAddress
 164: 3681+7	931B  56      					LD		D,(HL)
 165: 3688+7	931C  3E57    					LD		A,	'W'			;check up
 166: 3695+17	931E  CD2392  					CALL	isMoveValid
 167: 3712+10+7	9321  C43F93  					CALL	NZ,calculateMapU
 168: 3722+7	9324  3E53    					LD		A,	'S'			;down
 169: 3729+17	9326  CD2392  					CALL	isMoveValid
 170: 3746+10+7	9329  C44A93  					CALL	NZ,calculateMapD
 171: 3756+7	932C  3E41    					LD		A,	'A'			;left
 172: 3763+17	932E  CD2392  					CALL	isMoveValid
 173: 3780+10+7	9331  C45593  					CALL	NZ,calculateMapL
 174: 3790+7	9334  3E44    					LD		A,	'D'			;right
 175: 3797+17	9336  CD2392  					CALL	isMoveValid
 176: 3814+10+7	9339  C46093  					CALL	NZ,calculateMapR
 177: 3824+10	933C  C30593  					JP		calculatePathMapLoop
 178:								
 179:     -	933F          	calculateMapU:	
 180: 3834+20	933F  ED4BF289					LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
 181: 3854+4	9343  78      					LD		A, B				;Make modifications to corod
 182: 3858+4	9344  3D      					DEC		A
 183: 3862+7	9345  E61F    					AND		00011111B			;Mask for looping
 184: 3869+4	9347  47      					LD		B,A
 185: 3873+12	9348  1821    					JR		calculateMapCell
 186:     -	934A          	calculateMapD:	
 187: 3885+20	934A  ED4BF289					LD		BC,(originalBC)	
 188: 3905+4	934E  78      					LD		A, B
 189: 3909+4	934F  3C      					INC		A
 190: 3913+7	9350  E61F    					AND		00011111B
 191: 3920+4	9352  47      					LD		B,A
 192: 3924+12	9353  1816    					JR		calculateMapCell
 193:     -	9355          	calculateMapL:	
 194: 3936+20	9355  ED4BF289					LD		BC,(originalBC)
 195: 3956+4	9359  79      					LD		A, C
 196: 3960+4	935A  0D      					DEC		C
 197: 3964+7	935B  E61F    					AND		00011111B
 198: 3971+4	935D  4F      					LD		C,A
 199: 3975+12	935E  180B    					JR		calculateMapCell
 200:     -	9360          	calculateMapR:
 201: 3987+20	9360  ED4BF289					LD		BC,(originalBC)
 202: 4007+4	9364  79      					LD		A, C
 203: 4011+4	9365  3C      					INC		A
 204: 4015+7	9366  E61F    					AND		00011111B
 205: 4022+4	9368  4F      					LD		C,A
 206: 4026+12	9369  1800    					JR		calculateMapCell
 207:				
 208:     -	936B          	calculateMapCell:
 209: 4038+17	936B  CD5592  					CALL	getAddressPF
 210: 4055+7	936E  7E      					LD		A,(HL)
 211:				
 212: 4062+4	936F  BB      					CP		E			;Compare current data (A) with E (the path were looking at)
 213: 4066+5+6	9370  D8      					RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
 214: 4071+5+6	9371  C8      					RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
 215: 4076+7	9372  73      					LD		(HL),E
 216: 4083+10	9373  E1      					POP		HL			;We need the return adress on the top of the stack
 217: 4093+11	9374  C5      					PUSH	BC			;Push Cell so it can be visited
 218: 4104+11	9375  E5      					PUSH	HL
**** main.asm ****
  96: 4115+10	9376  C9      					RET	
  97:				
  98:				;------HUD;
  99:				include hud.asm
**** hud.asm ****
   1:     -	9377          	printScore:					
   2: 4125+10	9377  210200  					LD		HL, $02
   3: 4135+11	937A  E5      					PUSH	HL
   4: 4146+10	937B  212300  					LD		HL, $23
   5: 4156+11	937E  E5      					PUSH	HL
   6: 4167+17	937F  CD9E93  					CALL	moveCursor
   7: 4184+10	9382  214C94  					LD		HL, scoreHUD
   8: 4194+17	9385  CD0E94  					CALL 	print
   9: 4211+16	9388  2A0089  					LD		HL, (score)
  10: 4227+17	938B  CDB593  					CALL	HLToDec
  11: 4244+7	938E  3E0A    					LD		A,LF
  12: 4251+11	9390  CF      					RST     08H
  13: 4262+7	9391  3E0D    					LD		A,CR
  14: 4269+11	9393  CF      					RST     08H
**** main.asm ****
 100: 4280+10	9394  C9      					RET
 101:							
 102:				;------- Libs ------------;
 103:				include libs.asm
**** libs.asm ****
   1:     -	9395          	newline:			
   2: 4290+11	9395  F5      					push 	af
   3: 4301+7	9396  3E0D    					ld		a, CR
   4: 4308+11	9398  CF      					rst 	08H
   5: 4319+7	9399  3E0A    					ld		a, LF
   6: 4326+11	939B  CF      					rst 	08H
   7: 4337+10	939C  F1      					pop 	af
   8: 4347+10	939D  C9      					ret
   9:							
  10:				;move cursor to (sp,sp-2)				
  11:     -	939E          	moveCursor:		
  12: 4357+10	939E  D1      					POP		DE
  13: 4367+7	939F  3E1B    					LD		A,$1B
  14: 4374+11	93A1  CF      					RST     08H
  15: 4385+7	93A2  3E5B    					LD		A,'['
  16: 4392+11	93A4  CF      					RST     08H
  17: 4403+10	93A5  E1      					POP		HL
  18: 4413+17	93A6  CDB593  					CALL	HLToDec
  19: 4430+7	93A9  3E3B    					LD		A,$3B
  20: 4437+11	93AB  CF      					RST     08H
  21: 4448+10	93AC  E1      					POP		HL
  22: 4458+17	93AD  CDB593  					CALL	HLToDec
  23: 4475+7	93B0  3E66    					LD		A,'f'
  24: 4482+11	93B2  CF      					RST     08H
  25: 4493+11	93B3  D5      					PUSH	DE
  26: 4504+10	93B4  C9      					RET
  27:				
  28:				;Prints	hl as decimal			
  29:     -	93B5          	HLToDec:
  30: 4514+11	93B5  F5      					PUSH	AF
  31: 4525+11	93B6  C5      					PUSH	BC
  32: 4536+17	93B7  CDBD93  					CALL	DispHL
  33: 4553+10	93BA  C1      					POP		BC
  34: 4563+10	93BB  F1      					POP		AF
  35: 4573+10	93BC  C9      					RET
  36:     -	93BD          	DispHL:
  37: 4583+10	93BD  01F0D8  					ld		bc,-10000
  38: 4593+17	93C0  CDD693  					call	Num1
  39: 4610+10	93C3  0118FC  					ld		bc,-1000
  40: 4620+17	93C6  CDD693  					call	Num1
  41: 4637+10	93C9  019CFF  					ld		bc,-100
  42: 4647+17	93CC  CDD693  					call	Num1
  43: 4664+7	93CF  0EF6    					ld		c,-10
  44: 4671+17	93D1  CDD693  					call	Num1
  45: 4688+7	93D4  0EFF    					ld		c,-1
  46: 4695+7	93D6  3E2F    	Num1:			ld		a,'0'-1
  47: 4702+4	93D8  3C      	Num2:			inc		a
  48: 4706+11	93D9  09      					add		hl,bc
  49: 4717+7+5	93DA  38FC    					jr		c,Num2
  50: 4724+15	93DC  ED42    					sbc		hl,bc
  51: 4739+11	93DE  CF      					RST     08H
  52: 4750+10	93DF  C9      					ret
  53:				;Print A as HEX				
  54:     -	93E0          	NumToHex:    	
  55: 4760+11	93E0  C5      					push	bc
  56: 4771+4	93E1  4F      					ld 		c, a   		; a = number to convert
  57: 4775+17	93E2  CDED93  	            	call 	Num1H
  58: 4792+11	93E5  CF      	            	RST     08H
  59: 4803+4	93E6  79      	            	ld 		a, c
  60: 4807+17	93E7  CDF193  	            	call 	Num2H
  61: 4824+11	93EA  CF      	            	RST     08H
  62: 4835+10	93EB  C1      					pop		bc
  63: 4845+10	93EC  C9      	            	ret
  64:				
  65: 4855+4	93ED  1F      	Num1H:        	rra
  66: 4859+4	93EE  1F      	            	rra
  67: 4863+4	93EF  1F      	            	rra
  68: 4867+4	93F0  1F      	           		rra
  69: 4871+7	93F1  F6F0    	Num2H:        	or 		$F0
  70: 4878+4	93F3  27      	            	daa
  71: 4882+7	93F4  C6A0    	            	add 	a, $A0
  72: 4889+7	93F6  CE40    	            	adc 	a, $40 		; Ascii hex at this point (0 to F)   
  73: 4896+10	93F8  C9      	            	ret
  74:				
  75:				;Get ABS of A
  76:     -	93F9          	absA:
  77: 4906+4	93F9  B7      	     or a
  78: 4910+5+6	93FA  F0      	     ret p
  79: 4915+8	93FB  ED44    	     neg
  80: 4923+10	93FD  C9      	     ret
  81:				
  82:				;getArAndomA	 
  83:     -	93FE          	randomA:				
  84: 4933+13	93FE  3A8888  					ld a, 	(seed)
  85: 4946+4	9401  47      					ld b, 	a 
  86:				
  87: 4950+4	9402  0F      					rrca ; multiply by 32
  88: 4954+4	9403  0F      					rrca
  89: 4958+4	9404  0F      					rrca
  90: 4962+7	9405  EE1F    					xor $1f
  91:				
  92: 4969+4	9407  80      					add 	a, b
  93: 4973+7	9408  DEFF    					sbc a, 255 ; carry
  94:				
  95: 4980+13	940A  328888  					ld (seed), a
  96: 4993+10	940D  C9      					ret
  97:				
  98:				;------- Print string
  99: 5003+11	940E  F5      	print:			PUSH 	AF				; Preserve AF				
 100: 5014+7	940F  7E      	printLoop:      LD      A,(HL)          ; Get character
 101: 5021+4	9410  B7      	                OR      A               ; Is it $00 ?
 102: 5025+7+5	9411  2804    	                JR     	Z,printRet      ; Then RETurn on terminator
 103: 5032+11	9413  CF      	                RST     08H             ; Print it
 104: 5043+6	9414  23      	                INC     HL              ; Next Character
 105: 5049+12	9415  18F8    	                JR      printLoop       ; Continue until $00
 106:								
 107:				;delay loop
 108:     -	9417          	printRet:		
 109: 5061+10	9417  F1      					POP		AF
 110: 5071+10	9418  C9      					RET
 111:     -	9419          	delay:
 112: 5081+4	9419  00      					NOP
 113: 5085+6	941A  0B      					DEC 	BC
 114: 5091+4	941B  78      					LD 		A,B
 115: 5095+4	941C  B1      					OR 		C
 116: 5099+5+6	941D  C8      					RET 	Z
**** main.asm ****
 104: 5104+12	941E  18F9    					JR 		delay
 105:				
 106:				;Strings
 107:     -	9420  1B5B3334	wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
	              6D231B5B
	              306D00
 108:     -	942B  1B5B3937	powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
	              6D6F1B5B
	              306D00
 109:     -	9436  1B5B3337	pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
	              6D2A1B5B
	              306D00
 110:     -	9441  1B5B3331	superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
	              6D401B5B
	              306D00
 111:				
 112:     -	944C  53636F72	scoreHUD:     	.BYTE "Score: ",0
	              653A2000
 113:				
 114:     -	9454  1B5B3933	pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
	              6D431B5B
	              306D00
 115:				
 116:     -	945F  2000    	void:			.BYTE	" ",0
 117:				
 118:     -	9461  1B5B481B	cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
	              5B324A00
 119:				;-----Path find map
 120:     -	D000          		.ORG 0D000H
 121:     -	D000          	pathFindMap:
 122:				;----- Map ------		
 123:     -	E000          		.ORG 0E000H
**** main.asm ****
 124:					include map.asm
**** map.asm ****
   1:				;----Pellet
   2:     -	0040          	ww 		.EQU	40H
   3:				
   4:     -	002C          	hp 		.EQU	2CH		;left 	right	pellet
   5:     -	0023          	gp		.EQU	23H		;up		down	pellet
   6:				
   7:     -	0026          	lp		.EQU	26H		;down 	left 	pellet
   8:     -	002A          	rp		.EQU	2AH		;down 	right	pellet
   9:     -	0025          	up		.EQU	25H		;up 	left	pellet
  10:     -	0029          	dp		.EQU	29H		;up 	right	pellet
  11:				
  12:     -	002B          	bp		.EQU	2BH		;up		down	right	pellet
  13:     -	0027          	cp		.EQU	27H		;up		down	left	pellet
  14:     -	002E          	vp		.EQU	2EH		;down	left	right	pellet
  15:     -	002D          	kp		.EQU	2DH		;up		left	right	pellet
  16:				
  17:     -	002F          	xp		.EQU	2FH		;all	pellet
  18:				;------- No pellet
  19:     -	000C          	hn 		.EQU	0CH		;left 	right	pellet
  20:     -	0003          	gn		.EQU	03H		;up		down	pellet
  21:				
  22:     -	0006          	ln		.EQU	06H		;down 	left 	pellet
  23:     -	000A          	rn		.EQU	0AH		;down 	right	pellet
  24:     -	0005          	un		.EQU	05H		;up 	left	pellet
  25:     -	0009          	dn		.EQU	09H		;up 	right	pellet
  26:				
  27:     -	000B          	bn		.EQU	0BH		;up		down	right	pellet
  28:     -	0007          	cn		.EQU	07H		;up		down	left	pellet
  29:     -	000E          	vn		.EQU	0EH		;down	left	right	pellet
  30:     -	000D          	kn		.EQU	0DH		;up		left	right	pellet
  31:				
  32:     -	000F          	xn		.EQU	0FH		;all	pellet
  33:				;--------Power Pellet
  34:     -	001C          	hs 		.EQU	1CH		;left 	right	pellet
  35:     -	0013          	gs		.EQU	13H		;up		down	pellet
  36:				
  37:     -	0016          	ls		.EQU	16H		;down 	left 	pellet
  38:     -	001A          	rs		.EQU	1AH		;down 	right	pellet
  39:     -	0015          	us		.EQU	15H		;up 	left	pellet
  40:     -	0019          	ds		.EQU	19H		;up 	right	pellet
  41:				
  42:     -	001B          	bs		.EQU	1BH		;up		down	right	pellet
  43:     -	0017          	cs		.EQU	17H		;up		down	left	pellet
  44:     -	001E          	vs		.EQU	1EH		;down	left	right	pellet
  45:     -	001D          	ks		.EQU	1DH		;up		left	right	pellet
  46:				
  47:     -	001F          	xs		.EQU	1FH		;all	pellet
  48:				
  49:				
  50:     -	E000  00004040	map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  51:     -	E020  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2E2C2C2C
	              2C2C2640
	              402A2C2C
	              2C2C2C2E
	              2C2C2C2C
	              26400000
  52:     -	E040  00004013			.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              13400000
  53:     -	E060  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  54:     -	E080  0000402B			.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
	              2C2C2C2C
	              2F2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C2F
	              2C2C2C2C
	              27400000
  55:     -	E0A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404023
	              40404040
	              40404040
	              23404023
	              40404040
	              23400000
  56:     -	E0C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              27404029
	              2C2C2640
	              402A2C2C
	              2540402B
	              2C2C2C2C
	              25400000
  57:     -	E0E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404040
	              40400340
	              40034040
	              40404023
	              40404040
	              40400000
  58:     -	E100  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404023
	              40000000
	              00000000
  59:     -	E120  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404000
	              00404040
	              03404023
	              40000000
	              00000000
  60:     -	E140  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  61:     -	E160  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              2F0C0C07
	              40000000
	              00000040
	              0B0C0C2F
	              0C0C0C0C
	              0C0C0C0C
  62:     -	E180  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  63:     -	E1A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404040
	              40404040
	              03404023
	              40000000
	              00000000
  64:     -	E1C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404023
	              40000000
	              00000000
  65:     -	E1E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404003
	              40404040
	              40404040
	              03404023
	              40404040
	              40400000
  66:     -	E200  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2F2C2C2D
	              2C2C2640
	              402A2C2C
	              2D2C2C2F
	              2C2C2C2C
	              26400000
  67:     -	E220  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  68:     -	E240  00004019			.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
	              2C264040
	              2B2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C27
	              40402A2C
	              15400000
  69:     -	E260  00004040			.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
	              40234040
	              23404023
	              40404040
	              40404040
	              23404023
	              40402340
	              40400000
  70:     -	E280  0000402A			.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
	              2C2D2C2C
	              25404029
	              2C2C2640
	              402A2C2C
	              25404029
	              2C2C2D2C
	              26400000
  71:     -	E2A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              40404040
	              40402340
	              40234040
	              40404040
	              40404040
	              23400000
  72:     -	E2C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              2C2C2C2C
	              2C2C2D2C
	              2C2D2C2C
	              2C2C2C2C
	              2C2C2C2C
	              25400000
  73:     -	E2E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  74:     -	E300  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  75:     -	E320  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  76:     -	E340  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  77:     -	E360  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  78:     -	E380  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  79:     -	E3A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  80:     -	E3C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
**** main.asm ****
 125:     -	E3E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000



Statistics:

     4	passes
     0	jr promotions
   149	symbols
  2153	bytes



Symbol Table:

absa            93f9     
blueghost       91e7     
bn             =   b     
bp             =  2b     
bs             =  1b     
calcnextmove    90e6     
calculatemapcell 936b     
calculatemapd   934a     
calculatemapl   9355     
calculatemapr   9360     
calculatemapu   933f     
calculatepathmap 92f3     
calculatepathmaploop 9305     
checkh          90f0     
checkv          90fe     
clearpm         9082     
clearredghost   911a     
cls             9461     
cn             =   7     
cp             =  27     
cr             =   d     
cs             =  17     
delay           9419     
disphl          93bd     
dn             =   9     
downbit        =   1     
dp             =  29     
ds             =  19     
eatpellet       90b5     
eatspellet      90bd     
gameloop        9032     
getaddresspf    9255     
getmapaddress   923d     
getmove         90ca     
getpmmapdata    90a8     
getredghostmapdata 9140     
getredghostnextmove 9159     
ghostdis       =8113     
gn             =   3     
gp             =  23     
greenghost      91dc     
gs             =  13     
hltodec         93b5     
hn             =   c     
hp             =  2c     
hs             =  1c     
initpacx       =   e     
initpacy       =   e     
initpathfind    92dc     
initppfloop     92e3     
initredghostx  =  14     
initredghosty  =   1     
input           9068     
ismovevalid     9223     
kn             =   d     
kp             =  2d     
ks             =  1d     
leftbit        =   2     
lf             =   a     
ln             =   6     
lp             =  26     
ls             =  16     
map             e000     
move            91fd     
movecursor      939e     
moved           9211     
movedvalid      9234     
movel           9217     
movelvalid      9237     
movepm          910e     
mover           921d     
moveredghost    914d     
movervalid      923a     
moveu           920b     
moveuvalid      9231     
newline         9395     
nextmovevalid   90df     
num1            93d6     
num1h           93ed     
num2            93d8     
num2h           93f1     
numtohex        93e0     
oldstackpointer=89f0     
originalbc     =89f2     
paccdir        =8102     
pacman          9454     
pacndir        =8103     
pacx           =8100     
pacy           =8101     
pathfindmap     d000     
pellet          9436     
pelletbit      =   5     
pfnextrow       92ed     
pinkghost       91f2     
pmchar          929f     
pmcharret       92da     
pmloop          928b     
pmnextline      9299     
powerpbit      =   4     
powerpellet     942b     
print           940e     
printloop       940f     
printmap        9284     
printmapat      926d     
printp          92ba     
printpm         908e     
printpp         92b2     
printredghost   9126     
printret        9417     
printscore      9377     
printsf         92ca     
printvoid       92d2     
printwall       92c2     
randoma         93fe     
redghost        91d1     
redghostcheckd  9191     
redghostcheckl  919f     
redghostcheckr  91ad     
redghostchecku  9183     
redghostdir    =8112     
redghostpathfind 91bb     
redghostsetnewdir 91c8     
redghostx      =8110     
redghosty      =8111     
rightbit       =   3     
rn             =   a     
rp             =  2a     
rs             =  1a     
score          =8900     
scorehud        944c     
seed           =8888     
sfbit          =   7     
storeredghostx =   f     
superfruit      9441     
un             =   5     
up             =  25     
upbit          =   0     
us             =  15     
validinput      907e     
vn             =   e     
void            945f     
vp             =  2e     
vs             =  1e     
wall            9420     
wallbit        =   6     
ww             =  40     
xn             =   f     
xp             =  2f     
xs             =  1f     
