   1:     -	000D          	CR              .EQU     0DH
   2:     -	000A          	LF              .EQU     0AH
   3:				
   4:     -	89F0          	oldStackPointer	.EQU	89F0H		;Old Stack Location 	
   5:     -	89F2          	originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
   6:				
   7:     -	9000          		.ORG 9000H
   8:    0+20	9000  ED73F089				ld		(oldStackPointer), SP
   9:   20+10	9004  31FFFF  				ld		sp,0FFFFH
  10:   30+7	9007  3E0E    				ld		a, initPacx		;set Pacman Pos
  11:   37+13	9009  320081  				ld		(pacx),a
  12:   50+7	900C  3E0E    				ld		a, initPacy
  13:   57+13	900E  320181  				ld		(pacy),a
  14:   70+7	9011  3E44    				ld		a, 'D'			;Set start direction
  15:   77+13	9013  320281  				ld		(pacCDir),A
  16:   90+13	9016  320381  				ld		(pacNDir),A
  17:  103+10	9019  210000  				ld		HL, 0H
  18:  113+16	901C  220089  				LD		(score), HL
  19:  129+7	901F  3E14    				ld		a, initRedGhostX	;set RedGhost Pos
  20:  136+13	9021  321081  				ld		(redGhostX),a
  21:  149+7	9024  3E01    				ld		a, initRedGhostY
  22:  156+13	9026  321181  				ld		(redGhostY),a
  23:  169+10	9029  219E94  				LD		HL, cls			;Clear screen
  24:  179+17	902C  CD4B94  				CALL	print
  25:  196+17	902F  CD8192  				call 	printMap
  26:     -	9032          	gameLoop:		
  27:  213+17	9032  CD6590  				call	input
  28:  230+17	9035  CDC790  				call 	getMove
  29:  247+17	9038  CD7F90  				call 	clearPM
  30:  264+17	903B  CD0B91  				call	movePM
  31:  281+17	903E  CD8B90  				call 	printPM
  32:  298+17	9041  CDB290  				call	eatPellet
  33:				
  34:  315+17	9044  CDD992  				call	initPathFind
  35:  332+17	9047  CDF192  				call	calculatePathMap
  36:				
  37:  349+17	904A  CD5691  				call	getRedGhostNextMove
  38:  366+17	904D  CD1791  				call	clearRedGhost
  39:  383+17	9050  CD4A91  				call	moveRedGhost
  40:  400+17	9053  CD2391  				call	printRedGhost
  41:				
  42:							;call 	printPFMap
  43:							
  44:  417+17	9056  CDB493  				call 	printScore
  45:  434+7	9059  06FF    				LD 		B,0FFH   ;delay
  46:  441+7	905B  0EFF    				LD		C,0FFH
  47:							;CALL 	DELAY
  48:  448+10	905D  C33290  				JP		gameLoop
  49:  458+20	9060  ED7BF089				LD		SP,(oldStackPointer)
  50:  478+10	9064  C9      				ret
  51:						
  52:				;-------------- Input --------------------------					
  53:				include input.asm	
**** input.asm ****
   1:     -	9065          	input:
   2:  488+11	9065  DF      					RST		18H
   3:  499+5+6	9066  C8      					RET		Z
   4:  504+11	9067  D7      					RST		10H
   5:  515+7	9068  E6DF    					AND     11011111b       ; lower to uppercase
   6:  522+7	906A  FE57    					CP		'W'
   7:  529+7+5	906C  280D    					JR		Z,validInput
   8:  536+7	906E  FE41    					CP		'A'
   9:  543+7+5	9070  2809    					JR		Z,validInput
  10:  550+7	9072  FE53    					CP		'S'
  11:  557+7+5	9074  2805    					JR		Z,validInput
  12:  564+7	9076  FE44    					CP		'D'
  13:  571+7+5	9078  2801    					JR		Z,validInput
  14:  578+10	907A  C9      					RET
  15:     -	907B          	validInput:		
  16:  588+13	907B  320381  					LD		(pacNDir), A
**** main.asm ****
  54:  601+10	907E  C9      					RET
  55:				;----------Pacman------;
  56:				include	pacman.asm
**** pacman.asm ****
   1:				;Packman
   2:     -	8100          	pacx			.EQU	8100H
   3:     -	8101          	pacy			.EQU	8101H
   4:     -	8102          	pacCDir			.EQU	8102H		;Pacmans current direction
   5:     -	8103          	pacNDir			.EQU	8103H		;Pacman next direction (from key press)
   6:				
   7:     -	000E          	initPacx		.EQU	14
   8:     -	000E          	initPacy		.EQU	14
   9:				
  10:     -	907F          	clearPM:
  11:  611+13	907F  3A0081  					LD		A, (pacx)		;Push X to stack
  12:  624+4	9082  4F      					LD		C,A
  13:  628+13	9083  3A0181  					LD		A, (pacy)		;Push Y to stack
  14:  641+4	9086  47      					LD		B,A
  15:  645+17	9087  CD6A92  					CALL 	printMapAt
  16:  662+10	908A  C9      					RET
  17:								
  18:     -	908B          	printPM:
  19:  672+13	908B  3A0081  					LD		A, (pacx)		;Push X to stack
  20:  685+4	908E  3C      					INC		A
  21:  689+4	908F  6F      					LD		L,A
  22:  693+7	9090  2600    					LD		H, $00			;We dont care about msb
  23:  700+11	9092  E5      					PUSH	HL
  24:  711+13	9093  3A0181  					LD		A, (pacy)		;Push Y to stack
  25:  724+4	9096  3C      					INC		A
  26:  728+4	9097  6F      					LD		L,A
  27:  732+7	9098  2600    					LD		H, $00			;Again we dont care
  28:  739+11	909A  E5      					PUSH	HL
  29:  750+17	909B  CDDB93  					CALL	moveCursor
  30:  767+10	909E  219194  					LD		HL, pacman
  31:  777+17	90A1  CD4B94  					CALL 	print
  32:  794+10	90A4  C9      					RET
  33:     -	90A5          	getPMMapData:	
  34:  804+13	90A5  3A0081  					LD		A, (pacx)
  35:  817+4	90A8  4F      					LD		C,A
  36:  821+13	90A9  3A0181  					LD		A, (pacy)
  37:  834+4	90AC  47      					LD		B,A
  38:  838+17	90AD  CD3A92  					CALL	getMapAddress
  39:  855+7	90B0  7E      	                LD      A,(HL)
  40:  862+10	90B1  C9      					ret
  41:     -	90B2          	eatPellet:		;Eat pellet at packman location
  42:  872+17	90B2  CDA590  					CALL 	getPMMapData
  43:  889+8	90B5  CB6F    					BIT		pelletBit,A
  44:  897+7+5	90B7  2001    					JR		NZ,eatSPellet
  45:  904+10	90B9  C9      					RET
  46:								
  47:     -	90BA          	eatSPellet:		
  48:  914+11	90BA  E5      					PUSH	HL		
  49:  925+16	90BB  2A0089  					LD		HL,(score)
  50:  941+6	90BE  23      					INC		HL
  51:  947+6	90BF  23      					INC		HL
  52:  953+16	90C0  220089  					LD		(score),HL
  53:  969+10	90C3  E1      					POP		HL
  54:  979+15	90C4  CBAE    					RES		pelletBit,(HL)
  55:  994+10	90C6  C9      					RET
  56:								
  57:     -	90C7          	getMove:		;Sets the current move var
  58: 1004+17	90C7  CDA590  					CALL	getPMMapData
  59: 1021+4	90CA  57      					LD		D,A
  60: 1025+13	90CB  3A0381  					LD		A,(pacNDir)			;Is the next move valid
  61: 1038+17	90CE  CD2092  					CALL	isMoveValid
  62: 1055+7+5	90D1  2009    					JR		NZ,nextMoveValid
  63: 1062+13	90D3  3A0281  					LD		A,(pacCDir)			;Is the current move valid
  64: 1075+17	90D6  CD2092  					CALL	isMoveValid
  65: 1092+5+6	90D9  C0      					RET		NZ
  66: 1097+12	90DA  1807    					JR		calcNextMove
  67:								
  68:     -	90DC          	nextMoveValid:
  69: 1109+13	90DC  320281  					LD		(pacCDir),A
  70: 1122+13	90DF  320381  					LD		(pacNDir),A
  71: 1135+10	90E2  C9      					RET
  72:								
  73:     -	90E3          	calcNextMove:	
  74: 1145+7	90E3  FE41    					CP		'A'
  75: 1152+7+5	90E5  2814    					JR		Z,checkV
  76: 1159+7	90E7  FE44    					CP		'D'
  77: 1166+7+5	90E9  2810    					JR		Z,checkV
  78: 1173+12	90EB  1800    					JR		checkH
  79:     -	90ED          	checkH:
  80: 1185+7	90ED  3E41    					LD		A,'A'
  81: 1192+17	90EF  CD2092  					CALL	isMoveValid
  82: 1209+7+5	90F2  20E8    					JR		NZ,nextMoveValid
  83: 1216+7	90F4  3E44    					LD		A,'D'
  84: 1223+17	90F6  CD2092  					CALL	isMoveValid
  85: 1240+7+5	90F9  20E1    					JR		NZ,nextMoveValid
  86:     -	90FB          	checkV:
  87: 1247+7	90FB  3E57    					LD		A,'W'
  88: 1254+17	90FD  CD2092  					CALL	isMoveValid
  89: 1271+7+5	9100  20DA    					JR		NZ,nextMoveValid
  90: 1278+7	9102  3E53    					LD		A,'S'
  91: 1285+17	9104  CD2092  					CALL	isMoveValid
  92: 1302+7+5	9107  20D3    					JR		NZ,nextMoveValid
  93: 1309+12	9109  18E2    					JR		checkH
  94:				;Move
  95:     -	910B          	movePM:
  96: 1321+13	910B  3A0281  					LD		A,(pacCDir)
  97: 1334+10	910E  110081  					LD		DE,pacx
  98: 1344+10	9111  010181  					LD		BC,pacy
**** main.asm ****
  57: 1354+10	9114  C3FA91  					JP		move
  58:				;------------Ghost
  59:				include ghosts.asm
**** ghosts.asm ****
   1:     -	8113          	ghostDis		.EQU	8113H		;ghost move distance from pacman
   2:				
   3:				;Ghost
   4:				;Red
   5:     -	0014          	initRedGhostX	.EQU	20
   6:     -	0001          	initRedGhostY	.EQU	1
   7:     -	000F          	storeRedGhostX	.EQU	15
   8:     -	000F          	storeRedGhostY	.EQU	15
   9:				
  10:     -	8110          	redGhostX		.EQU	8110H		
  11:     -	8111          	redGhostY		.EQU	8111H
  12:     -	8112          	redGhostDir		.EQU	8112H
  13:				
  14:				;Orange
  15:     -	0014          	initOGhostX     .EQU	20
  16:     -	0001          	initOGhostY	    .EQU	1
  17:     -	000F          	storeOGhostX	.EQU	15
  18:     -	000F          	storeOGhostY	.EQU	15
  19:				
  20:				;Teal
  21:     -	0014          	initRedGhostX	.EQU	20
  22:     -	0001          	initRedGhostY	.EQU	1
  23:     -	000F          	storeRedGhostX	.EQU	15
  24:     -	000F          	storeRedGhostY	.EQU	15
  25:				
  26:				;Prink
  27:     -	0014          	initRedGhostX	.EQU	20
  28:     -	0001          	initRedGhostY	.EQU	1
  29:     -	000F          	storeRedGhostX	.EQU	15
  30:     -	000F          	storeRedGhostY	.EQU	15
  31:				
  32:				
  33:				;Red
  34:     -	9117          	clearRedGhost:
  35: 1364+13	9117  3A1081  					LD		A, (redGhostX)		;Push X to stack
  36: 1377+4	911A  4F      					LD		C,A
  37: 1381+13	911B  3A1181  					LD		A, (redGhostY)		;Push Y to stack
  38: 1394+4	911E  47      					LD		B,A
  39: 1398+17	911F  CD6A92  					CALL 	printMapAt
  40: 1415+10	9122  C9      					RET
  41:								
  42:     -	9123          	printRedGhost:
  43: 1425+13	9123  3A1081  					LD		A, (redGhostX)		;Push X to stack
  44: 1438+4	9126  3C      					INC		A
  45: 1442+4	9127  6F      					LD		L,A
  46: 1446+7	9128  2600    					LD		H, $00			;We dont care about msb
  47: 1453+11	912A  E5      					PUSH	HL
  48: 1464+13	912B  3A1181  					LD		A, (redGhostY)		;Push Y to stack
  49: 1477+4	912E  3C      					INC		A
  50: 1481+4	912F  6F      					LD		L,A
  51: 1485+7	9130  2600    					LD		H, $00			;Again we dont care
  52: 1492+11	9132  E5      					PUSH	HL
  53: 1503+17	9133  CDDB93  					CALL	moveCursor
  54: 1520+10	9136  21CE91  					LD		HL, redGhost
  55: 1530+17	9139  CD4B94  					CALL 	print
  56: 1547+10	913C  C9      					RET
  57:     -	913D          	getRedGhostMapData:	
  58: 1557+13	913D  3A1081  					LD		A, (redGhostX)
  59: 1570+4	9140  4F      					LD		C,A
  60: 1574+13	9141  3A1181  					LD		A, (redGhostY)
  61: 1587+4	9144  47      					LD		B,A
  62: 1591+17	9145  CD3A92  					CALL	getMapAddress
  63: 1608+7	9148  7E      	                LD      A,(HL)
  64: 1615+10	9149  C9      					ret
  65:				;Move
  66:     -	914A          	moveRedGhost:
  67: 1625+13	914A  3A1281  					LD		A,(redGhostDir)
  68: 1638+10	914D  111081  					LD		DE,redGhostX
  69: 1648+10	9150  011181  					LD		BC,redGhostY
  70: 1658+10	9153  C3FA91  					JP		move
  71:     -	9156          	getRedGhostNextMove:
  72: 1668+7	9156  3EFF    					LD		A, 0FFH
  73: 1675+13	9158  321381  					LD		(ghostDis),A
  74: 1688+17	915B  CD3D91  					CALL	getRedGhostMapData
  75: 1705+4	915E  57      					LD		D,A
  76: 1709+7	915F  3E57    					LD		A,	'W'			;check up
  77: 1716+17	9161  CD2092  					CALL	isMoveValid
  78: 1733+10+7	9164  C48091  					CALL	NZ,redGhostCheckU
  79: 1743+7	9167  3E53    					LD		A,	'S'			;down
  80: 1750+17	9169  CD2092  					CALL	isMoveValid
  81: 1767+10+7	916C  C48E91  					CALL	NZ,redGhostCheckD
  82: 1777+7	916F  3E41    					LD		A,	'A'			;left
  83: 1784+17	9171  CD2092  					CALL	isMoveValid
  84: 1801+10+7	9174  C49C91  					CALL	NZ,redGhostCheckL
  85: 1811+7	9177  3E44    					LD		A,	'D'			;right
  86: 1818+17	9179  CD2092  					CALL	isMoveValid
  87: 1835+10+7	917C  C4AA91  					CALL	NZ,redGhostCheckR
  88: 1845+10	917F  C9      					RET
  89:								
  90:     -	9180          	redGhostCheckU:	
  91: 1855+11	9180  F5      					PUSH	AF
  92: 1866+13	9181  3A1181  					LD		A, (redGhostY)
  93: 1879+4	9184  3D      					DEC		A
  94: 1883+7	9185  E61F    					AND		00011111B
  95: 1890+4	9187  47      					LD		B,A
  96: 1894+13	9188  3A1081  					LD		A,(redGhostX)
  97: 1907+4	918B  4F      					LD		C,A
  98: 1911+12	918C  182A    					JR		redGhostPathFind
  99:     -	918E          	redGhostCheckD:			
 100: 1923+11	918E  F5      					PUSH	AF
 101: 1934+13	918F  3A1181  					LD		A, (redGhostY)
 102: 1947+4	9192  3C      					INC		A
 103: 1951+7	9193  E61F    					AND		00011111B
 104: 1958+4	9195  47      					LD		B,A
 105: 1962+13	9196  3A1081  					LD		A,(redGhostX)
 106: 1975+4	9199  4F      					LD		C,A
 107: 1979+12	919A  181C    					JR		redGhostPathFind
 108:     -	919C          	redGhostCheckL:		
 109: 1991+11	919C  F5      					PUSH	AF	
 110: 2002+13	919D  3A1081  					LD		A, (redGhostX)
 111: 2015+4	91A0  3D      					DEC		A
 112: 2019+7	91A1  E61F    					AND		00011111B
 113: 2026+4	91A3  4F      					LD		C,A
 114: 2030+13	91A4  3A1181  					LD		A,(redGhostY)
 115: 2043+4	91A7  47      					LD		B,A
 116: 2047+12	91A8  180E    					JR		redGhostPathFind
 117:     -	91AA          	redGhostCheckR:
 118: 2059+11	91AA  F5      					PUSH	AF	
 119: 2070+13	91AB  3A1081  					LD		A, (redGhostX)
 120: 2083+4	91AE  3C      					INC		A
 121: 2087+7	91AF  E61F    					AND		00011111B
 122: 2094+4	91B1  4F      					LD		C,A
 123: 2098+13	91B2  3A1181  					LD		A,(redGhostY)
 124: 2111+4	91B5  47      					LD		B,A
 125: 2115+12	91B6  1800    					JR		redGhostPathFind
 126:				
 127:     -	91B8          	redGhostPathFind:
 128: 2127+17	91B8  CD5292  					CALL	getAddressPF
 129: 2144+13	91BB  3A1381  					LD		A,(ghostDis)
 130: 2157+7	91BE  5E      					LD		E,(HL)
 131: 2164+4	91BF  BB      					CP		E
 132: 2168+10	91C0  D2C591  					JP		NC,redGhostSetNewDir
 133: 2178+10	91C3  F1      					POP		AF
 134: 2188+10	91C4  C9      					RET
 135:     -	91C5          	redGhostSetNewDir:
 136: 2198+4	91C5  7B      					LD		A,E
 137: 2202+13	91C6  321381  					LD		(ghostDis),A
 138: 2215+10	91C9  F1      					POP		AF
 139: 2225+13	91CA  321281  					LD		(redGhostDir),A
 140: 2238+10	91CD  C9      					RET
 141:				
 142:				
 143:     -	91CE  1B5B3931	redGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 144:     -	91D9  1B5B3932	greenGhost:		.BYTE	1BH,"[92mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
 145:     -	91E4  1B5B3336	blueGhost:		.BYTE	1BH,"[36mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
**** main.asm ****
  60:     -	91EF  1B5B3935	pinkGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
	              6D4D1B5B
	              306D00
  61:				;-----------Spesific Libs -----;
  62:				include movelibs.asm	
**** movelibs.asm ****
   1:     -	91FA          	move:
   2: 2248+7	91FA  FE57    					CP		'W'
   3: 2255+7+5	91FC  280A    					JR		Z,moveU
   4: 2262+7	91FE  FE41    					CP		'A'
   5: 2269+7+5	9200  2812    					JR		Z,moveL
   6: 2276+7	9202  FE53    					CP		'S'
   7: 2283+7+5	9204  2808    					JR		Z,moveD
   8: 2290+12	9206  1812    					JR		moveR
   9:				
  10:     -	9208          	moveU:			
  11: 2302+7	9208  0A      					LD		A, (BC)
  12: 2309+4	9209  3D      					DEC		A
  13: 2313+7	920A  E61F    					AND		00011111B
  14: 2320+7	920C  02      					LD		(BC),A
  15: 2327+10	920D  C9      					RET
  16:     -	920E          	moveD:			
  17: 2337+7	920E  0A      					LD		A, (BC)
  18: 2344+4	920F  3C      					INC		A
  19: 2348+7	9210  E61F    					AND		00011111B
  20: 2355+7	9212  02      					LD		(BC),A
  21: 2362+10	9213  C9      					RET
  22:     -	9214          	moveL:			
  23: 2372+7	9214  1A      					LD		A, (DE)
  24: 2379+4	9215  3D      					DEC		A
  25: 2383+7	9216  E61F    					AND		00011111B
  26: 2390+7	9218  12      					LD		(DE),A
  27: 2397+10	9219  C9      					RET
  28:     -	921A          	moveR:			
  29: 2407+7	921A  1A      					LD		A, (DE)
  30: 2414+4	921B  3C      					INC		A
  31: 2418+7	921C  E61F    					AND		00011111B
  32: 2425+7	921E  12      					LD		(DE),A
  33: 2432+10	921F  C9      					RET
  34:     -	9220          	isMoveValid:
  35: 2442+7	9220  FE57    					CP		'W'
  36: 2449+7+5	9222  280A    					JR		Z,moveUValid
  37: 2456+7	9224  FE41    					CP		'A'
  38: 2463+7+5	9226  280C    					JR		Z,moveLValid
  39: 2470+7	9228  FE53    					CP		'S'
  40: 2477+7+5	922A  2805    					JR		Z,moveDValid
  41: 2484+12	922C  1809    					JR		moveRValid
  42:     -	922E          	moveUValid:			
  43: 2496+8	922E  CB42    					BIT		upBit,D
  44: 2504+10	9230  C9      					RET
  45:     -	9231          	moveDValid:			
  46: 2514+8	9231  CB4A    					BIT		downBit,D
  47: 2522+10	9233  C9      					RET
  48:     -	9234          	moveLValid:			
  49: 2532+8	9234  CB52    					BIT		leftBit,D
  50: 2540+10	9236  C9      					RET
  51:     -	9237          	moveRValid:			
  52: 2550+8	9237  CB5A    					BIT		rightBit,D
**** main.asm ****
  63: 2558+10	9239  C9      					RET
  64:				include	mapLibs.asm	
**** mapLibs.asm ****
   1:     -	0030          	pathFindDepth   .EQU	30H
   2:				
   3:				;------- Get Map Data ----;
   4:				; C - X
   5:				; B	- Y
   6:     -	923A          	getMapAddress:
   7: 2568+11	923A  C5      					push	bc
   8: 2579+8	923B  CB00    					rlc		b			;Shift b left 5
   9: 2587+8	923D  CB00    					rlc		b			;Shift b left 5
  10: 2595+8	923F  CB00    					rlc		b			;Shift b left 5
  11: 2603+8	9241  CB00    					rlc		b			;Shift b left 5
  12: 2611+8	9243  CB00    					rlc		b			;Shift b left 5
  13: 2619+4	9245  78      					ld		a,b
  14: 2623+7	9246  E6E0    					and		11100000b	;Mask lower adress
  15: 2630+4	9248  B1      					or		c			;Combine with C
  16: 2634+4	9249  6F      					ld		l,a			;A is now low byte of adress
  17: 2638+4	924A  78      					ld		a,b
  18: 2642+7	924B  E603    					and		00000011b	;Mask upper adress
  19: 2649+7	924D  F6E0    					or		0E0H		;Start of map
  20: 2656+4	924F  67      					ld		h,a
  21: 2660+10	9250  C1      					pop		bc
  22: 2670+10	9251  C9      					ret
  23:				
  24:				;------- Get Path Find Map Address----;
  25:				; C - X
  26:				; B	- Y
  27:     -	9252          	getAddressPF:
  28: 2680+11	9252  C5      					push	bc
  29: 2691+8	9253  CB00    					rlc		b			;Shift b left 5
  30: 2699+8	9255  CB00    					rlc		b			;Shift b left 5
  31: 2707+8	9257  CB00    					rlc		b			;Shift b left 5
  32: 2715+8	9259  CB00    					rlc		b			;Shift b left 5
  33: 2723+8	925B  CB00    					rlc		b			;Shift b left 5
  34: 2731+4	925D  78      					ld		a,b
  35: 2735+7	925E  E6E0    					and		11100000b	;Mask lower adress
  36: 2742+4	9260  B1      					or		c			;Combine with C
  37: 2746+4	9261  6F      					ld		l,a			;A is now low byte of adress
  38: 2750+4	9262  78      					ld		a,b
  39: 2754+7	9263  E603    					and		00000011b	;Mask upper adress
  40: 2761+7	9265  F6D0    					or		0D0H		;Start of map
  41: 2768+4	9267  67      					ld		h,a
  42: 2772+10	9268  C1      					pop		bc
  43: 2782+10	9269  C9      					ret
  44:				
  45:				
  46:				;--------- Map print -------- ;
  47:				; C - X
  48:				; B	- Y
  49:     -	926A          	printMapAt:	
  50: 2792+11	926A  C5      				PUSH	BC
  51: 2803+4	926B  0C      				INC		C
  52: 2807+4	926C  69      				LD		L,C
  53: 2811+7	926D  2600    				LD		H, $00			;We dont care about msb
  54: 2818+11	926F  E5      				PUSH	HL
  55: 2829+4	9270  04      				INC		B
  56: 2833+4	9271  68      				LD		L,B
  57: 2837+7	9272  2600    				LD		H, $00			;Again we dont care
  58: 2844+11	9274  E5      				PUSH	HL
  59: 2855+17	9275  CDDB93  				CALL	moveCursor
  60: 2872+10	9278  C1      				POP 	BC
  61: 2882+17	9279  CD3A92  				CALL	getMapAddress
  62: 2899+7	927C  7E      				LD		A,(HL)
  63: 2906+17	927D  CD9C92  				CALL	pmChar
  64: 2923+10	9280  C9      				RET
  65:				
  66:     -	9281          	printMap:
  67: 2933+7	9281  3E20    					ld		a,32
  68: 2940+4	9283  47      					ld		b,a			; 32 chars per line
  69: 2944+4	9284  4F      					ld		c,a			; 32 lines per map
  70: 2948+10	9285  2100E0  					ld		hl,map
  71: 2958+7	9288  7E      	pmLoop:			ld		a,(hl)		; get char
  72: 2965+17	9289  CD9C92  					call	pmChar		; decode what to print
  73: 2982+6	928C  23      					inc		hl			; next char
  74: 2988+8+5	928D  10F9    					djnz	pmLoop		; if were not at the end of a line, print next char
  75: 2996+17	928F  CDD293  					call	newline		; if we are, print a new line
  76: 3013+4	9292  41      					ld		b,c			;are we at the end of a block
  77: 3017+8+5	9293  1001    					djnz	pmNextLine
  78: 3025+10	9295  C9      					ret
  79:     -	9296          	pmNextLine:	
  80: 3035+4	9296  48      					ld		c,b			;copy decremented b back to c
  81: 3039+7	9297  3E20    					ld 		a,32		;refill b withj 32
  82: 3046+4	9299  47      					ld		b,a
  83: 3050+12	929A  18EC    					jr		pmLoop		;draw next char
  84:				
  85:				
  86:     -	929C          	pmChar:		;-- Print map char a
  87: 3062+11	929C  E5      					push	hl
  88: 3073+8	929D  CB67    					bit		powerpBit,a
  89: 3081+7+5	929F  200E    					jr		nz,printPP
  90: 3088+8	92A1  CB6F    					bit		pelletBit,a
  91: 3096+7+5	92A3  2012    					jr		nz,printP
  92: 3103+8	92A5  CB77    					bit		wallBit,a
  93: 3111+7+5	92A7  2016    					jr		nz,printWall
  94: 3118+8	92A9  CB7F    					bit		sfBit,a
  95: 3126+7+5	92AB  201A    					jr		nz,printSF
  96: 3133+12	92AD  1820    					jr	 	printVoid
  97:							
  98:     -	92AF          	printPP:
  99: 3145+10	92AF  216894  					ld		hl,powerPellet
 100: 3155+17	92B2  CD4B94  					call	print
 101: 3172+12	92B5  1820    					jr		pmCharRet
 102:     -	92B7          	printP:
 103: 3184+10	92B7  217394  					ld		hl,pellet
 104: 3194+17	92BA  CD4B94  					call	print
 105: 3211+12	92BD  1818    					jr		pmCharRet
 106:     -	92BF          	printWall:
 107: 3223+10	92BF  215D94  					ld		hl,wall
 108: 3233+17	92C2  CD4B94  					call	print
 109: 3250+12	92C5  1810    					jr		pmCharRet
 110:     -	92C7          	printSF:
 111: 3262+10	92C7  217E94  					ld		hl,superFruit
 112: 3272+17	92CA  CD4B94  					call	print
 113: 3289+12	92CD  1808    					jr		pmCharRet
 114:     -	92CF          	printVoid:
 115: 3301+10	92CF  219C94  					ld		hl,void
 116: 3311+17	92D2  CD4B94  					call	print
 117: 3328+12	92D5  1800    					jr		pmCharRet
 118:     -	92D7          	pmCharRet:	
 119: 3340+10	92D7  E1      					pop 	hl
 120: 3350+10	92D8  C9      					ret
 121:								
 122:				;-------- Path Find Map -------;
 123:				;Initi Path Find Map
 124:     -	92D9          	initPathFind:
 125: 3360+7	92D9  3E20    					ld		a,32
 126: 3367+4	92DB  47      					ld		b,a			; 32 chars per line
 127: 3371+4	92DC  4F      					ld		c,a			; 32 lines per map
 128: 3375+10	92DD  2100D0  					ld		hl,pathFindMap
 129: 3385+7	92E0  16FF    	initpPFLoop:	ld		D,0FFH		; set char
 130: 3392+7	92E2  72      					LD		(HL),D
 131: 3399+6	92E3  23      					inc		hl			; next char
 132: 3405+8+5	92E4  10FA    					djnz	initpPFLoop		; if were not at the end of a line, print next char
 133: 3413+4	92E6  41      					ld		b,c			;are we at the end of a block
 134: 3417+8+5	92E7  1001    					djnz	pfNextRow
 135: 3425+10	92E9  C9      					ret
 136:     -	92EA          	pfNextRow:	
 137: 3435+4	92EA  48      					ld		c,b			;copy decremented b back to c
 138: 3439+7	92EB  3E20    					ld 		a,32		;refill b withj 32
 139: 3446+4	92ED  47      					ld		b,a
 140: 3450+10	92EE  C3E092  					jp		initpPFLoop		;draw next char
 141:				
 142:				;Calculate Map
 143:     -	92F1          	calculatePathMap:
 144: 3460+10	92F1  01FFFF  					ld		BC,0FFFFH		;Push Stack terminator		
 145: 3470+11	92F4  C5      					PUSH	BC
 146: 3481+13	92F5  3A0081  					LD		A, (pacx)		;Push X to stack
 147: 3494+4	92F8  4F      					LD		C,A
 148: 3498+13	92F9  3A0181  					LD		A, (pacy)		;Push Y to stack
 149: 3511+4	92FC  47      					LD		B,A
 150: 3515+17	92FD  CD5292  					CALL	getAddressPF
 151: 3532+10	9300  3600    					LD		(HL),00H
 152: 3542+11	9302  C5      					PUSH	BC
 153:     -	9303          	calculatePathMapLoop:
 154: 3553+10	9303  C1      					POP		BC			;Get node to visit
 155: 3563+4	9304  78      					LD		A,B			;Check Its not FFFF
 156: 3567+4	9305  B7      					OR		A
 157: 3571+7	9306  FEFF    					CP		0FFH
 158: 3578+5+6	9308  C8      					RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
 159: 3583+20	9309  ED43F289					LD		(originalBC),BC
 160: 3603+17	930D  CD5292  					CALL	getAddressPF
 161: 3620+7	9310  7E      					LD		A,(HL)
 162: 3627+4	9311  3C      					INC		A
 163: 3631+7	9312  FE30    	                CP      pathFindDepth
 164: 3638+10	9314  CA0393  					JP 		Z,calculatePathMapLoop	;Skip if wer getting too long
 165: 3648+4	9317  5F      					LD		E,A			;Keep the distance were working with safe
 166: 3652+17	9318  CD3A92  					CALL	getMapAddress
 167: 3669+7	931B  56      					LD		D,(HL)
 168: 3676+7	931C  3E57    					LD		A,	'W'			;check up
 169: 3683+17	931E  CD2092  					CALL	isMoveValid
 170: 3700+10+7	9321  C43F93  					CALL	NZ,calculateMapU
 171: 3710+7	9324  3E53    					LD		A,	'S'			;down
 172: 3717+17	9326  CD2092  					CALL	isMoveValid
 173: 3734+10+7	9329  C44B93  					CALL	NZ,calculateMapD
 174: 3744+7	932C  3E41    					LD		A,	'A'			;left
 175: 3751+17	932E  CD2092  					CALL	isMoveValid
 176: 3768+10+7	9331  C45793  					CALL	NZ,calculateMapL
 177: 3778+7	9334  3E44    					LD		A,	'D'			;right
 178: 3785+17	9336  CD2092  					CALL	isMoveValid
 179: 3802+10+7	9339  C46393  					CALL	NZ,calculateMapR
 180: 3812+10	933C  C30393  					JP		calculatePathMapLoop
 181:								
 182:     -	933F          	calculateMapU:	
 183: 3822+20	933F  ED4BF289					LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
 184: 3842+4	9343  78      					LD		A, B				;Make modifications to corod
 185: 3846+4	9344  3D      					DEC		A
 186: 3850+7	9345  E61F    					AND		00011111B			;Mask for looping
 187: 3857+4	9347  47      					LD		B,A
 188: 3861+10	9348  C36F93  					JP		calculateMapCell
 189:     -	934B          	calculateMapD:	
 190: 3871+20	934B  ED4BF289					LD		BC,(originalBC)	
 191: 3891+4	934F  78      					LD		A, B
 192: 3895+4	9350  3C      					INC		A
 193: 3899+7	9351  E61F    					AND		00011111B
 194: 3906+4	9353  47      					LD		B,A
 195: 3910+10	9354  C36F93  					JP		calculateMapCell
 196:     -	9357          	calculateMapL:	
 197: 3920+20	9357  ED4BF289					LD		BC,(originalBC)
 198: 3940+4	935B  79      					LD		A, C
 199: 3944+4	935C  3D      					DEC		A
 200: 3948+7	935D  E61F    					AND		00011111B
 201: 3955+4	935F  4F      					LD		C,A
 202: 3959+10	9360  C36F93  					JP		calculateMapCell
 203:     -	9363          	calculateMapR:
 204: 3969+20	9363  ED4BF289					LD		BC,(originalBC)
 205: 3989+4	9367  79      					LD		A, C
 206: 3993+4	9368  3C      					INC		A
 207: 3997+7	9369  E61F    					AND		00011111B
 208: 4004+4	936B  4F      					LD		C,A
 209: 4008+10	936C  C36F93  					JP		calculateMapCell
 210:				
 211:     -	936F          	calculateMapCell:
 212: 4018+17	936F  CD5292  					CALL	getAddressPF
 213: 4035+7	9372  7E      					LD		A,(HL)
 214:				
 215: 4042+4	9373  BB      					CP		E			;Compare current data (A) with E (the path were looking at)
 216: 4046+5+6	9374  D8      					RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
 217: 4051+5+6	9375  C8      					RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
 218: 4056+7	9376  73      					LD		(HL),E
 219: 4063+10	9377  E1      					POP		HL			;We need the return adress on the top of the stack
 220: 4073+11	9378  C5      					PUSH	BC			;Push Cell so it can be visited
 221: 4084+11	9379  E5      					PUSH	HL
 222: 4095+10	937A  C9      					RET
 223:				
 224:     -	937B          	printPFMap:
 225: 4105+10	937B  210100  	                LD		HL, $01
 226: 4115+11	937E  E5      					PUSH	HL
 227: 4126+10	937F  211A00  					LD		HL, $1A
 228: 4136+11	9382  E5      					PUSH	HL
 229: 4147+17	9383  CDDB93  					CALL	moveCursor
 230: 4164+7	9386  3E20    					ld		a,32
 231: 4171+4	9388  47      					ld		b,a			; 32 chars per line
 232: 4175+7	9389  3E1A    	                ld		a,$1A
 233: 4182+4	938B  4F      					ld		c,a			; 32 lines per map
 234: 4186+10	938C  2100D0  					ld		hl,pathFindMap
 235: 4196+7	938F  7E      	pmPFLoop:		ld		a,(hl)		; get char
 236: 4203+7	9390  FEFF    	                cp      0FFH
 237: 4210+10	9392  CAAB93  	                JP      Z,pmPFSkip
 238: 4220+17	9395  CD1D94  					call	NumToHex	; decode what to print
 239: 4237+7	9398  3E20    	pmPFAfterSkip:  ld      a,' '
 240: 4244+11	939A  CF      	                rst     08H
 241: 4255+6	939B  23      					inc		hl			; next char
 242: 4261+8+5	939C  10F1    					djnz	pmPFLoop		; if were not at the end of a line, print next char
 243: 4269+17	939E  CDD293  					call	newline		; if we are, print a new line
 244: 4286+4	93A1  41      					ld		b,c			;are we at the end of a block
 245: 4290+8+5	93A2  1001    					djnz	pmPFNextLine
 246: 4298+10	93A4  C9      					ret
 247:     -	93A5          	pmPFNextLine:	
 248: 4308+4	93A5  48      					ld		c,b			;copy decremented b back to c
 249: 4312+7	93A6  3E20    					ld 		a,32		;refill b withj 32
 250: 4319+4	93A8  47      					ld		b,a
 251: 4323+12	93A9  18E4    					jr		pmPFLoop	;draw next char
 252:     -	93AB          	pmPFSkip:       
 253: 4335+7	93AB  3E20    	                ld      a,' '
 254: 4342+11	93AD  CF      	                rst     08H
 255: 4353+7	93AE  3E20    	                ld      a,' '
 256: 4360+11	93B0  CF      	                rst     08H
**** main.asm ****
  65: 4371+10	93B1  C39893  	                JP      pmPFAfterSkip
  66:				
  67:				;------HUD;
  68:				include hud.asm
**** hud.asm ****
   1:     -	8900          	score			.EQU	8900H		;Score
   2:				
   3:     -	93B4          	printScore:					
   4: 4381+10	93B4  210200  					LD		HL, $02
   5: 4391+11	93B7  E5      					PUSH	HL
   6: 4402+10	93B8  212300  					LD		HL, $23
   7: 4412+11	93BB  E5      					PUSH	HL
   8: 4423+17	93BC  CDDB93  					CALL	moveCursor
   9: 4440+10	93BF  218994  					LD		HL, scoreHUD
  10: 4450+17	93C2  CD4B94  					CALL 	print
  11: 4467+16	93C5  2A0089  					LD		HL, (score)
  12: 4483+17	93C8  CDF293  					CALL	HLToDec
  13: 4500+7	93CB  3E0A    					LD		A,LF
  14: 4507+11	93CD  CF      					RST     08H
  15: 4518+7	93CE  3E0D    					LD		A,CR
  16: 4525+11	93D0  CF      					RST     08H
**** main.asm ****
  69: 4536+10	93D1  C9      					RET
  70:							
  71:				;------- Libs ------------;
  72:				include libs.asm
**** libs.asm ****
   1:     -	8888          	seed			.EQU	8888H		;Random seed
   2:				
   3:     -	93D2          	newline:			
   4: 4546+11	93D2  F5      					push 	af
   5: 4557+7	93D3  3E0D    					ld		a, CR
   6: 4564+11	93D5  CF      					rst 	08H
   7: 4575+7	93D6  3E0A    					ld		a, LF
   8: 4582+11	93D8  CF      					rst 	08H
   9: 4593+10	93D9  F1      					pop 	af
  10: 4603+10	93DA  C9      					ret
  11:							
  12:				;move cursor to (sp,sp-2)				
  13:     -	93DB          	moveCursor:		
  14: 4613+10	93DB  D1      					POP		DE
  15: 4623+7	93DC  3E1B    					LD		A,$1B
  16: 4630+11	93DE  CF      					RST     08H
  17: 4641+7	93DF  3E5B    					LD		A,'['
  18: 4648+11	93E1  CF      					RST     08H
  19: 4659+10	93E2  E1      					POP		HL
  20: 4669+17	93E3  CDF293  					CALL	HLToDec
  21: 4686+7	93E6  3E3B    					LD		A,$3B
  22: 4693+11	93E8  CF      					RST     08H
  23: 4704+10	93E9  E1      					POP		HL
  24: 4714+17	93EA  CDF293  					CALL	HLToDec
  25: 4731+7	93ED  3E66    					LD		A,'f'
  26: 4738+11	93EF  CF      					RST     08H
  27: 4749+11	93F0  D5      					PUSH	DE
  28: 4760+10	93F1  C9      					RET
  29:				
  30:				;Prints	hl as decimal			
  31:     -	93F2          	HLToDec:
  32: 4770+11	93F2  F5      					PUSH	AF
  33: 4781+11	93F3  C5      					PUSH	BC
  34: 4792+17	93F4  CDFA93  					CALL	DispHL
  35: 4809+10	93F7  C1      					POP		BC
  36: 4819+10	93F8  F1      					POP		AF
  37: 4829+10	93F9  C9      					RET
  38:     -	93FA          	DispHL:
  39: 4839+10	93FA  01F0D8  					ld		bc,-10000
  40: 4849+17	93FD  CD1394  					call	Num1
  41: 4866+10	9400  0118FC  					ld		bc,-1000
  42: 4876+17	9403  CD1394  					call	Num1
  43: 4893+10	9406  019CFF  					ld		bc,-100
  44: 4903+17	9409  CD1394  					call	Num1
  45: 4920+7	940C  0EF6    					ld		c,-10
  46: 4927+17	940E  CD1394  					call	Num1
  47: 4944+7	9411  0EFF    					ld		c,-1
  48: 4951+7	9413  3E2F    	Num1:			ld		a,'0'-1
  49: 4958+4	9415  3C      	Num2:			inc		a
  50: 4962+11	9416  09      					add		hl,bc
  51: 4973+7+5	9417  38FC    					jr		c,Num2
  52: 4980+15	9419  ED42    					sbc		hl,bc
  53: 4995+11	941B  CF      					RST     08H
  54: 5006+10	941C  C9      					ret
  55:				;Print A as HEX				
  56:     -	941D          	NumToHex:    	
  57: 5016+11	941D  C5      					push	bc
  58: 5027+4	941E  4F      					ld 		c, a   		; a = number to convert
  59: 5031+17	941F  CD2A94  	            	call 	Num1H
  60: 5048+11	9422  CF      	            	RST     08H
  61: 5059+4	9423  79      	            	ld 		a, c
  62: 5063+17	9424  CD2E94  	            	call 	Num2H
  63: 5080+11	9427  CF      	            	RST     08H
  64: 5091+10	9428  C1      					pop		bc
  65: 5101+10	9429  C9      	            	ret
  66:				
  67: 5111+4	942A  1F      	Num1H:        	rra
  68: 5115+4	942B  1F      	            	rra
  69: 5119+4	942C  1F      	            	rra
  70: 5123+4	942D  1F      	           		rra
  71: 5127+7	942E  F6F0    	Num2H:        	or 		$F0
  72: 5134+4	9430  27      	            	daa
  73: 5138+7	9431  C6A0    	            	add 	a, $A0
  74: 5145+7	9433  CE40    	            	adc 	a, $40 		; Ascii hex at this point (0 to F)   
  75: 5152+10	9435  C9      	            	ret
  76:				
  77:				;Get ABS of A
  78:     -	9436          	absA:
  79: 5162+4	9436  B7      	     or a
  80: 5166+5+6	9437  F0      	     ret p
  81: 5171+8	9438  ED44    	     neg
  82: 5179+10	943A  C9      	     ret
  83:				
  84:				;getArAndomA	 
  85:     -	943B          	randomA:				
  86: 5189+13	943B  3A8888  					ld a, 	(seed)
  87: 5202+4	943E  47      					ld b, 	a 
  88:				
  89: 5206+4	943F  0F      					rrca ; multiply by 32
  90: 5210+4	9440  0F      					rrca
  91: 5214+4	9441  0F      					rrca
  92: 5218+7	9442  EE1F    					xor $1f
  93:				
  94: 5225+4	9444  80      					add 	a, b
  95: 5229+7	9445  DEFF    					sbc a, 255 ; carry
  96:				
  97: 5236+13	9447  328888  					ld (seed), a
  98: 5249+10	944A  C9      					ret
  99:				
 100:				;------- Print string
 101: 5259+11	944B  F5      	print:			PUSH 	AF				; Preserve AF				
 102: 5270+7	944C  7E      	printLoop:      LD      A,(HL)          ; Get character
 103: 5277+4	944D  B7      	                OR      A               ; Is it $00 ?
 104: 5281+7+5	944E  2804    	                JR     	Z,printRet      ; Then RETurn on terminator
 105: 5288+11	9450  CF      	                RST     08H             ; Print it
 106: 5299+6	9451  23      	                INC     HL              ; Next Character
 107: 5305+12	9452  18F8    	                JR      printLoop       ; Continue until $00
 108:								
 109:				;delay loop
 110:     -	9454          	printRet:		
 111: 5317+10	9454  F1      					POP		AF
 112: 5327+10	9455  C9      					RET
 113:     -	9456          	delay:
 114: 5337+4	9456  00      					NOP
 115: 5341+6	9457  0B      					DEC 	BC
 116: 5347+4	9458  78      					LD 		A,B
 117: 5351+4	9459  B1      					OR 		C
 118: 5355+5+6	945A  C8      					RET 	Z
**** main.asm ****
  73: 5360+12	945B  18F9    					JR 		delay
  74:				
  75:				;Strings
  76:     -	945D  1B5B3334	wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
	              6D231B5B
	              306D00
  77:     -	9468  1B5B3937	powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
	              6D6F1B5B
	              306D00
  78:     -	9473  1B5B3337	pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
	              6D2A1B5B
	              306D00
  79:     -	947E  1B5B3331	superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
	              6D401B5B
	              306D00
  80:				
  81:     -	9489  53636F72	scoreHUD:     	.BYTE "Score: ",0
	              653A2000
  82:				
  83:     -	9491  1B5B3933	pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
	              6D431B5B
	              306D00
  84:				
  85:     -	949C  2000    	void:			.BYTE	" ",0
  86:				
  87:     -	949E  1B5B481B	cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
	              5B324A00
  88:				;-----Path find map
  89:     -	D000          		.ORG 0D000H
  90:     -	D000          	pathFindMap:
  91:				;----- Map ------		
  92:     -	E000          		.ORG 0E000H
**** main.asm ****
  93:					include map.asm
**** map.asm ****
   1:				;----- Map data bit positions
   2:     -	0000          	upBit			.EQU	0
   3:     -	0001          	downBit			.EQU	1
   4:     -	0002          	leftBit			.EQU	2
   5:     -	0003          	rightBit		.EQU	3
   6:     -	0004          	powerpBit		.EQU	4
   7:     -	0005          	pelletBit		.EQU	5
   8:     -	0006          	wallBit			.EQU	6
   9:     -	0007          	sfBit			.EQU	7
  10:				
  11:				;----Pellet
  12:     -	0040          	ww 		.EQU	40H
  13:				
  14:     -	002C          	hp 		.EQU	2CH		;left 	right	pellet
  15:     -	0023          	gp		.EQU	23H		;up		down	pellet
  16:				
  17:     -	0026          	lp		.EQU	26H		;down 	left 	pellet
  18:     -	002A          	rp		.EQU	2AH		;down 	right	pellet
  19:     -	0025          	up		.EQU	25H		;up 	left	pellet
  20:     -	0029          	dp		.EQU	29H		;up 	right	pellet
  21:				
  22:     -	002B          	bp		.EQU	2BH		;up		down	right	pellet
  23:     -	0027          	cp		.EQU	27H		;up		down	left	pellet
  24:     -	002E          	vp		.EQU	2EH		;down	left	right	pellet
  25:     -	002D          	kp		.EQU	2DH		;up		left	right	pellet
  26:				
  27:     -	002F          	xp		.EQU	2FH		;all	pellet
  28:				;------- No pellet
  29:     -	000C          	hn 		.EQU	0CH		;left 	right	pellet
  30:     -	0003          	gn		.EQU	03H		;up		down	pellet
  31:				
  32:     -	0006          	ln		.EQU	06H		;down 	left 	pellet
  33:     -	000A          	rn		.EQU	0AH		;down 	right	pellet
  34:     -	0005          	un		.EQU	05H		;up 	left	pellet
  35:     -	0009          	dn		.EQU	09H		;up 	right	pellet
  36:				
  37:     -	000B          	bn		.EQU	0BH		;up		down	right	pellet
  38:     -	0007          	cn		.EQU	07H		;up		down	left	pellet
  39:     -	000E          	vn		.EQU	0EH		;down	left	right	pellet
  40:     -	000D          	kn		.EQU	0DH		;up		left	right	pellet
  41:				
  42:     -	000F          	xn		.EQU	0FH		;all	pellet
  43:				;--------Power Pellet
  44:     -	001C          	hs 		.EQU	1CH		;left 	right	pellet
  45:     -	0013          	gs		.EQU	13H		;up		down	pellet
  46:				
  47:     -	0016          	ls		.EQU	16H		;down 	left 	pellet
  48:     -	001A          	rs		.EQU	1AH		;down 	right	pellet
  49:     -	0015          	us		.EQU	15H		;up 	left	pellet
  50:     -	0019          	ds		.EQU	19H		;up 	right	pellet
  51:				
  52:     -	001B          	bs		.EQU	1BH		;up		down	right	pellet
  53:     -	0017          	cs		.EQU	17H		;up		down	left	pellet
  54:     -	001E          	vs		.EQU	1EH		;down	left	right	pellet
  55:     -	001D          	ks		.EQU	1DH		;up		left	right	pellet
  56:				
  57:     -	001F          	xs		.EQU	1FH		;all	pellet
  58:				
  59:				
  60:     -	E000  00004040	map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  61:     -	E020  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2E2C2C2C
	              2C2C2640
	              402A2C2C
	              2C2C2C2E
	              2C2C2C2C
	              26400000
  62:     -	E040  00004013			.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              13400000
  63:     -	E060  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  64:     -	E080  0000402B			.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
	              2C2C2C2C
	              2F2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C2F
	              2C2C2C2C
	              27400000
  65:     -	E0A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404023
	              40404040
	              40404040
	              23404023
	              40404040
	              23400000
  66:     -	E0C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              27404029
	              2C2C2640
	              402A2C2C
	              2540402B
	              2C2C2C2C
	              25400000
  67:     -	E0E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404040
	              40400340
	              40034040
	              40404023
	              40404040
	              40400000
  68:     -	E100  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400A
	              0C0C0D0C
	              0C0D0C0C
	              06404023
	              40000000
	              00000000
  69:     -	E120  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404000
	              00404040
	              03404023
	              40000000
	              00000000
  70:     -	E140  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  71:     -	E160  0C0C0C0C			.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
	              0C0C0C0C
	              2F0C0C07
	              40000000
	              00000040
	              0B0C0C2F
	              0C0C0C0C
	              0C0C0C0C
  72:     -	E180  40404040			.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
	              40404040
	              23404003
	              40000000
	              00000040
	              03404023
	              40404040
	              40404040
  73:     -	E1A0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              23404003
	              40404040
	              40404040
	              03404023
	              40000000
	              00000000
  74:     -	E1C0  00000000			.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
	              00000040
	              2340400B
	              0C0C0C0C
	              0C0C0C0C
	              07404023
	              40000000
	              00000000
  75:     -	E1E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              23404003
	              40404040
	              40404040
	              03404023
	              40404040
	              40400000
  76:     -	E200  0000402A			.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
	              2C2C2C2C
	              2F2C2C2D
	              2C2C2640
	              402A2C2C
	              2D2C2C2F
	              2C2C2C2C
	              26400000
  77:     -	E220  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              23404040
	              40402340
	              40234040
	              40404023
	              40404040
	              23400000
  78:     -	E240  00004019			.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
	              2C264040
	              2B2C2C2E
	              2C2C2D2C
	              2C2D2C2C
	              2E2C2C27
	              40402A2C
	              15400000
  79:     -	E260  00004040			.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
	              40234040
	              23404023
	              40404040
	              40404040
	              23404023
	              40402340
	              40400000
  80:     -	E280  0000402A			.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
	              2C2D2C2C
	              25404029
	              2C2C2640
	              402A2C2C
	              25404029
	              2C2C2D2C
	              26400000
  81:     -	E2A0  00004023			.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
	              40404040
	              40404040
	              40402340
	              40234040
	              40404040
	              40404040
	              23400000
  82:     -	E2C0  00004029			.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
	              2C2C2C2C
	              2C2C2C2C
	              2C2C2D2C
	              2C2D2C2C
	              2C2C2C2C
	              2C2C2C2C
	              25400000
  83:     -	E2E0  00004040			.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40404040
	              40400000
  84:     -	E300  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  85:     -	E320  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  86:     -	E340  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  87:     -	E360  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  88:     -	E380  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  89:     -	E3A0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
  90:     -	E3C0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
**** main.asm ****
  94:     -	E3E0  00000000			.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000
	              00000000



Statistics:

     4	passes
     0	jr promotions
   160	symbols
  2214	bytes



Symbol Table:

absa            9436     
blueghost       91e4     
bn             =   b     
bp             =  2b     
bs             =  1b     
calcnextmove    90e3     
calculatemapcell 936f     
calculatemapd   934b     
calculatemapl   9357     
calculatemapr   9363     
calculatemapu   933f     
calculatepathmap 92f1     
calculatepathmaploop 9303     
checkh          90ed     
checkv          90fb     
clearpm         907f     
clearredghost   9117     
cls             949e     
cn             =   7     
cp             =  27     
cr             =   d     
cs             =  17     
delay           9456     
disphl          93fa     
dn             =   9     
downbit        =   1     
dp             =  29     
ds             =  19     
eatpellet       90b2     
eatspellet      90ba     
gameloop        9032     
getaddresspf    9252     
getmapaddress   923a     
getmove         90c7     
getpmmapdata    90a5     
getredghostmapdata 913d     
getredghostnextmove 9156     
ghostdis       =8113     
gn             =   3     
gp             =  23     
greenghost      91d9     
gs             =  13     
hltodec         93f2     
hn             =   c     
hp             =  2c     
hs             =  1c     
initoghostx    =  14     
initoghosty    =   1     
initpacx       =   e     
initpacy       =   e     
initpathfind    92d9     
initppfloop     92e0     
initredghostx  =  14     
initredghosty  =   1     
input           9065     
ismovevalid     9220     
kn             =   d     
kp             =  2d     
ks             =  1d     
leftbit        =   2     
lf             =   a     
ln             =   6     
lp             =  26     
ls             =  16     
map             e000     
move            91fa     
movecursor      93db     
moved           920e     
movedvalid      9231     
movel           9214     
movelvalid      9234     
movepm          910b     
mover           921a     
moveredghost    914a     
movervalid      9237     
moveu           9208     
moveuvalid      922e     
newline         93d2     
nextmovevalid   90dc     
num1            9413     
num1h           942a     
num2            9415     
num2h           942e     
numtohex        941d     
oldstackpointer=89f0     
originalbc     =89f2     
paccdir        =8102     
pacman          9491     
pacndir        =8103     
pacx           =8100     
pacy           =8101     
pathfinddepth  =  30     
pathfindmap     d000     
pellet          9473     
pelletbit      =   5     
pfnextrow       92ea     
pinkghost       91ef     
pmchar          929c     
pmcharret       92d7     
pmloop          9288     
pmnextline      9296     
pmpfafterskip   9398     
pmpfloop        938f     
pmpfnextline    93a5     
pmpfskip        93ab     
powerpbit      =   4     
powerpellet     9468     
print           944b     
printloop       944c     
printmap        9281     
printmapat      926a     
printp          92b7     
printpfmap      937b     
printpm         908b     
printpp         92af     
printredghost   9123     
printret        9454     
printscore      93b4     
printsf         92c7     
printvoid       92cf     
printwall       92bf     
randoma         943b     
redghost        91ce     
redghostcheckd  918e     
redghostcheckl  919c     
redghostcheckr  91aa     
redghostchecku  9180     
redghostdir    =8112     
redghostpathfind 91b8     
redghostsetnewdir 91c5     
redghostx      =8110     
redghosty      =8111     
rightbit       =   3     
rn             =   a     
rp             =  2a     
rs             =  1a     
score          =8900     
scorehud        9489     
seed           =8888     
sfbit          =   7     
storeoghostx   =   f     
storeoghosty   =   f     
storeredghostx =   f     
storeredghosty =   f     
superfruit      947e     
un             =   5     
up             =  25     
upbit          =   0     
us             =  15     
validinput      907b     
vn             =   e     
void            949c     
vp             =  2e     
vs             =  1e     
wall            945d     
wallbit        =   6     
ww             =  40     
xn             =   f     
xp             =  2f     
xs             =  1f     
