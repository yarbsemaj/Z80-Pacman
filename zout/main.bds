binary-debuggable-source
0000 0000 f main.asm
0000 0000 s CR              .EQU     0DH
0000 0000 s LF              .EQU     0AH
0000 0000 s 
0000 0000 s ;----- Map data bit positions
0000 0000 s upBit			.EQU	0
0000 0000 s downBit			.EQU	1
0000 0000 s leftBit			.EQU	2
0000 0000 s rightBit		.EQU	3
0000 0000 s powerpBit		.EQU	4
0000 0000 s pelletBit		.EQU	5
0000 0000 s wallBit			.EQU	6
0000 0000 s sfBit			.EQU	7
0000 0000 s ;--------Initial Stats
0000 0000 s initPacx		.EQU	14
0000 0000 s initPacy		.EQU	14
0000 0000 s 
0000 0000 s ;-----Varr
0000 0000 s ;Packman
0000 0000 s pacx			.EQU	8100H
0000 0000 s pacy			.EQU	8101H
0000 0000 s pacCDir			.EQU	8102H		;Pacmans current direction
0000 0000 s pacNDir			.EQU	8103H		;Pacman next direction (from key press)
0000 0000 s 
0000 0000 s ;RedGhost
0000 0000 s redGhostX		.EQU	8110H		
0000 0000 s redGhostY		.EQU	8111H
0000 0000 s redGhostDir		.EQU	8112H
0000 0000 s ghostDis		.EQU	8113H		;Red ghost move distance from pacman
0000 0000 s 
0000 0000 s seed			.EQU	8888H		;Random seed
0000 0000 s 
0000 0000 s score			.EQU	8900H		;Score
0000 0000 s 
0000 0000 s oldStackPointer	.EQU	89F0H		;Old Stack Location 	
0000 0000 s originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
0000 0000 s 
0000 0000 s 
0000 0000 s 
0000 0000 s 
9000 9000 s 	.ORG 9000H
9000 9000 d ed73f089
9000 9000 s 			ld		(oldStackPointer), SP
9004 9004 d 31ffff
9004 9004 s 			ld		sp,0FFFFH
9007 9007 d 3e0e
9007 9007 s 			ld		a, initPacx		;set Pacman Pos
9009 9009 d 320081
9009 9009 s 			ld		(pacx),a
900c 900c d 3e0e
900c 900c s 			ld		a, initPacy
900e 900e d 320181
900e 900e s 			ld		(pacy),a
9011 9011 d 3e44
9011 9011 s 			ld		a, 'D'			;Set start direction
9013 9013 d 320281
9013 9013 s 			ld		(pacCDir),A
9016 9016 d 320381
9016 9016 s 			ld		(pacNDir),A
9019 9019 d 210000
9019 9019 s 			ld		HL, 0H
901c 901c d 220089
901c 901c s 			LD		(score), HL
901f 901f d 3e14
901f 901f s 			ld		a, initRedGhostX	;set RedGhost Pos
9021 9021 d 321081
9021 9021 s 			ld		(redGhostX),a
9024 9024 d 3e01
9024 9024 s 			ld		a, initRedGhostY
9026 9026 d 321181
9026 9026 s 			ld		(redGhostY),a
9029 9029 d 216194
9029 9029 s 			LD		HL, cls			;Clear screen
902c 902c d cd0e94
902c 902c s 			CALL	print
902f 902f d cd8492
902f 902f s 			call 	printMap
9032 9032 s gameLoop:		
9032 9032 d cd6890
9032 9032 s 			call	input
9035 9035 d cdca90
9035 9035 s 			call 	getMove
9038 9038 d cd8290
9038 9038 s 			call 	clearPM
903b 903b d cd0e91
903b 903b s 			call	movePM
903e 903e d cd8e90
903e 903e s 			call 	printPM
9041 9041 d cdb590
9041 9041 s 			call	eatPellet
9044 9044 s 
9044 9044 d cddc92
9044 9044 s 			call	initPathFind
9047 9047 d cdf392
9047 9047 s 			call	calculatePathMap
904a 904a s 
904a 904a d cd5991
904a 904a s 			call	getRedGhostNextMove
904d 904d d cd1a91
904d 904d s 			call	clearRedGhost
9050 9050 d cd4d91
9050 9050 s 			call	moveRedGhost
9053 9053 d cd2691
9053 9053 s 			call	printRedGhost
9056 9056 s 			
9056 9056 d cd7793
9056 9056 s 			call 	printScore
9059 9059 d 06ff
9059 9059 s 			LD 		B,0FFH   ;delay
905b 905b d 0eff
905b 905b s 			LD		C,0FFH
905d 905d d cd1994
905d 905d s 			CALL 	DELAY
9060 9060 d c33290
9060 9060 s 			JP		gameLoop
9063 9063 d ed7bf089
9063 9063 s 			LD		SP,(oldStackPointer)
9067 9067 d c9
9067 9067 s 			ret
9068 9068 s 		
9068 9068 s ;-------------- Input --------------------------					
9068 9068 s include input.asm	
9068 9068 f input.asm
9068 9068 s input:
9068 9068 d df
9068 9068 s 				RST		18H
9069 9069 d c8
9069 9069 s 				RET		Z
906a 906a d d7
906a 906a s 				RST		10H
906b 906b d e6df
906b 906b s 				AND     11011111b       ; lower to uppercase
906d 906d d fe57
906d 906d s 				CP		'W'
906f 906f d 280d
906f 906f s 				JR		Z,validInput
9071 9071 d fe41
9071 9071 s 				CP		'A'
9073 9073 d 2809
9073 9073 s 				JR		Z,validInput
9075 9075 d fe53
9075 9075 s 				CP		'S'
9077 9077 d 2805
9077 9077 s 				JR		Z,validInput
9079 9079 d fe44
9079 9079 s 				CP		'D'
907b 907b d 2801
907b 907b s 				JR		Z,validInput
907d 907d d c9
907d 907d s 				RET
907e 907e s validInput:		
907e 907e d 320381
907e 907e s 				LD		(pacNDir), A
9081 9081 f main.asm
9081 9081 d c9
9081 9081 s 				RET
9082 9082 s ;----------Pacman------;
9082 9082 s include	pacman.asm
9082 9082 f pacman.asm
9082 9082 s clearPM:
9082 9082 d 3a0081
9082 9082 s 				LD		A, (pacx)		;Push X to stack
9085 9085 d 4f
9085 9085 s 				LD		C,A
9086 9086 d 3a0181
9086 9086 s 				LD		A, (pacy)		;Push Y to stack
9089 9089 d 47
9089 9089 s 				LD		B,A
908a 908a d cd6d92
908a 908a s 				CALL 	printMapAt
908d 908d d c9
908d 908d s 				RET
908e 908e s 				
908e 908e s printPM:
908e 908e d 3a0081
908e 908e s 				LD		A, (pacx)		;Push X to stack
9091 9091 d 3c
9091 9091 s 				INC		A
9092 9092 d 6f
9092 9092 s 				LD		L,A
9093 9093 d 2600
9093 9093 s 				LD		H, $00			;We dont care about msb
9095 9095 d e5
9095 9095 s 				PUSH	HL
9096 9096 d 3a0181
9096 9096 s 				LD		A, (pacy)		;Push Y to stack
9099 9099 d 3c
9099 9099 s 				INC		A
909a 909a d 6f
909a 909a s 				LD		L,A
909b 909b d 2600
909b 909b s 				LD		H, $00			;Again we dont care
909d 909d d e5
909d 909d s 				PUSH	HL
909e 909e d cd9e93
909e 909e s 				CALL	moveCursor
90a1 90a1 d 215494
90a1 90a1 s 				LD		HL, pacman
90a4 90a4 d cd0e94
90a4 90a4 s 				CALL 	print
90a7 90a7 d c9
90a7 90a7 s 				RET
90a8 90a8 s getPMMapData:	
90a8 90a8 d 3a0081
90a8 90a8 s 				LD		A, (pacx)
90ab 90ab d 4f
90ab 90ab s 				LD		C,A
90ac 90ac d 3a0181
90ac 90ac s 				LD		A, (pacy)
90af 90af d 47
90af 90af s 				LD		B,A
90b0 90b0 d cd3d92
90b0 90b0 s 				CALL	getMapAddress
90b3 90b3 d 7e
90b3 90b3 s                 LD      A,(HL)
90b4 90b4 d c9
90b4 90b4 s 				ret
90b5 90b5 s eatPellet:		;Eat pellet at packman location
90b5 90b5 d cda890
90b5 90b5 s 				CALL 	getPMMapData
90b8 90b8 d cb6f
90b8 90b8 s 				BIT		pelletBit,A
90ba 90ba d 2001
90ba 90ba s 				JR		NZ,eatSPellet
90bc 90bc d c9
90bc 90bc s 				RET
90bd 90bd s 				
90bd 90bd s eatSPellet:		
90bd 90bd d e5
90bd 90bd s 				PUSH	HL		
90be 90be d 2a0089
90be 90be s 				LD		HL,(score)
90c1 90c1 d 23
90c1 90c1 s 				INC		HL
90c2 90c2 d 23
90c2 90c2 s 				INC		HL
90c3 90c3 d 220089
90c3 90c3 s 				LD		(score),HL
90c6 90c6 d e1
90c6 90c6 s 				POP		HL
90c7 90c7 d cbae
90c7 90c7 s 				RES		pelletBit,(HL)
90c9 90c9 d c9
90c9 90c9 s 				RET
90ca 90ca s 				
90ca 90ca s getMove:		;Sets the current move var
90ca 90ca d cda890
90ca 90ca s 				CALL	getPMMapData
90cd 90cd d 57
90cd 90cd s 				LD		D,A
90ce 90ce d 3a0381
90ce 90ce s 				LD		A,(pacNDir)			;Is the next move valid
90d1 90d1 d cd2392
90d1 90d1 s 				CALL	isMoveValid
90d4 90d4 d 2009
90d4 90d4 s 				JR		NZ,nextMoveValid
90d6 90d6 d 3a0281
90d6 90d6 s 				LD		A,(pacCDir)			;Is the current move valid
90d9 90d9 d cd2392
90d9 90d9 s 				CALL	isMoveValid
90dc 90dc d c0
90dc 90dc s 				RET		NZ
90dd 90dd d 1807
90dd 90dd s 				JR		calcNextMove
90df 90df s 				
90df 90df s nextMoveValid:
90df 90df d 320281
90df 90df s 				LD		(pacCDir),A
90e2 90e2 d 320381
90e2 90e2 s 				LD		(pacNDir),A
90e5 90e5 d c9
90e5 90e5 s 				RET
90e6 90e6 s 				
90e6 90e6 s calcNextMove:	
90e6 90e6 d fe41
90e6 90e6 s 				CP		'A'
90e8 90e8 d 2814
90e8 90e8 s 				JR		Z,checkV
90ea 90ea d fe44
90ea 90ea s 				CP		'D'
90ec 90ec d 2810
90ec 90ec s 				JR		Z,checkV
90ee 90ee d 1800
90ee 90ee s 				JR		checkH
90f0 90f0 s checkH:
90f0 90f0 d 3e41
90f0 90f0 s 				LD		A,'A'
90f2 90f2 d cd2392
90f2 90f2 s 				CALL	isMoveValid
90f5 90f5 d 20e8
90f5 90f5 s 				JR		NZ,nextMoveValid
90f7 90f7 d 3e44
90f7 90f7 s 				LD		A,'D'
90f9 90f9 d cd2392
90f9 90f9 s 				CALL	isMoveValid
90fc 90fc d 20e1
90fc 90fc s 				JR		NZ,nextMoveValid
90fe 90fe s checkV:
90fe 90fe d 3e57
90fe 90fe s 				LD		A,'W'
9100 9100 d cd2392
9100 9100 s 				CALL	isMoveValid
9103 9103 d 20da
9103 9103 s 				JR		NZ,nextMoveValid
9105 9105 d 3e53
9105 9105 s 				LD		A,'S'
9107 9107 d cd2392
9107 9107 s 				CALL	isMoveValid
910a 910a d 20d3
910a 910a s 				JR		NZ,nextMoveValid
910c 910c d 18e2
910c 910c s 				JR		checkH
910e 910e s ;Move
910e 910e s movePM:
910e 910e d 3a0281
910e 910e s 				LD		A,(pacCDir)
9111 9111 d 110081
9111 9111 s 				LD		DE,pacx
9114 9114 d 010181
9114 9114 s 				LD		BC,pacy
9117 9117 f main.asm
9117 9117 d c3fd91
9117 9117 s 				JP		move
911a 911a s ;------------Ghost
911a 911a s include ghosts.asm
911a 911a f ghosts.asm
911a 911a s ;Ghost
911a 911a s ;Red
911a 911a s initRedGhostX	.EQU	20
911a 911a s initRedGhostY	.EQU	1
911a 911a s storeRedGhostX	.EQU	15
911a 911a s storeRedGhostX	.EQU	15
911a 911a s 
911a 911a s ;Orange
911a 911a s initRedGhostX	.EQU	20
911a 911a s initRedGhostY	.EQU	1
911a 911a s storeRedGhostX	.EQU	15
911a 911a s storeRedGhostX	.EQU	15
911a 911a s 
911a 911a s ;Teal
911a 911a s initRedGhostX	.EQU	20
911a 911a s initRedGhostY	.EQU	1
911a 911a s storeRedGhostX	.EQU	15
911a 911a s storeRedGhostX	.EQU	15
911a 911a s 
911a 911a s ;Prink
911a 911a s initRedGhostX	.EQU	20
911a 911a s initRedGhostY	.EQU	1
911a 911a s storeRedGhostX	.EQU	15
911a 911a s storeRedGhostX	.EQU	15
911a 911a s 
911a 911a s 
911a 911a s ;Red
911a 911a s clearRedGhost:
911a 911a d 3a1081
911a 911a s 				LD		A, (redGhostX)		;Push X to stack
911d 911d d 4f
911d 911d s 				LD		C,A
911e 911e d 3a1181
911e 911e s 				LD		A, (redGhostY)		;Push Y to stack
9121 9121 d 47
9121 9121 s 				LD		B,A
9122 9122 d cd6d92
9122 9122 s 				CALL 	printMapAt
9125 9125 d c9
9125 9125 s 				RET
9126 9126 s 				
9126 9126 s printRedGhost:
9126 9126 d 3a1081
9126 9126 s 				LD		A, (redGhostX)		;Push X to stack
9129 9129 d 3c
9129 9129 s 				INC		A
912a 912a d 6f
912a 912a s 				LD		L,A
912b 912b d 2600
912b 912b s 				LD		H, $00			;We dont care about msb
912d 912d d e5
912d 912d s 				PUSH	HL
912e 912e d 3a1181
912e 912e s 				LD		A, (redGhostY)		;Push Y to stack
9131 9131 d 3c
9131 9131 s 				INC		A
9132 9132 d 6f
9132 9132 s 				LD		L,A
9133 9133 d 2600
9133 9133 s 				LD		H, $00			;Again we dont care
9135 9135 d e5
9135 9135 s 				PUSH	HL
9136 9136 d cd9e93
9136 9136 s 				CALL	moveCursor
9139 9139 d 21d191
9139 9139 s 				LD		HL, redGhost
913c 913c d cd0e94
913c 913c s 				CALL 	print
913f 913f d c9
913f 913f s 				RET
9140 9140 s getRedGhostMapData:	
9140 9140 d 3a1081
9140 9140 s 				LD		A, (redGhostX)
9143 9143 d 4f
9143 9143 s 				LD		C,A
9144 9144 d 3a1181
9144 9144 s 				LD		A, (redGhostY)
9147 9147 d 47
9147 9147 s 				LD		B,A
9148 9148 d cd3d92
9148 9148 s 				CALL	getMapAddress
914b 914b d 7e
914b 914b s                 LD      A,(HL)
914c 914c d c9
914c 914c s 				ret
914d 914d s ;Move
914d 914d s moveRedGhost:
914d 914d d 3a1281
914d 914d s 				LD		A,(redGhostDir)
9150 9150 d 111081
9150 9150 s 				LD		DE,redGhostX
9153 9153 d 011181
9153 9153 s 				LD		BC,redGhostY
9156 9156 d c3fd91
9156 9156 s 				JP		move
9159 9159 s getRedGhostNextMove:
9159 9159 d 3eff
9159 9159 s 				LD		A, 0FFH
915b 915b d 321381
915b 915b s 				LD		(ghostDis),A
915e 915e d cd4091
915e 915e s 				CALL	getRedGhostMapData
9161 9161 d 57
9161 9161 s 				LD		D,A
9162 9162 d 3e57
9162 9162 s 				LD		A,	'W'			;check up
9164 9164 d cd2392
9164 9164 s 				CALL	isMoveValid
9167 9167 d c48391
9167 9167 s 				CALL	NZ,redGhostCheckU
916a 916a d 3e53
916a 916a s 				LD		A,	'S'			;down
916c 916c d cd2392
916c 916c s 				CALL	isMoveValid
916f 916f d c49191
916f 916f s 				CALL	NZ,redGhostCheckD
9172 9172 d 3e41
9172 9172 s 				LD		A,	'A'			;left
9174 9174 d cd2392
9174 9174 s 				CALL	isMoveValid
9177 9177 d c49f91
9177 9177 s 				CALL	NZ,redGhostCheckL
917a 917a d 3e44
917a 917a s 				LD		A,	'D'			;right
917c 917c d cd2392
917c 917c s 				CALL	isMoveValid
917f 917f d c4ad91
917f 917f s 				CALL	NZ,redGhostCheckR
9182 9182 d c9
9182 9182 s 				RET
9183 9183 s 				
9183 9183 s redGhostCheckU:	
9183 9183 d f5
9183 9183 s 				PUSH	AF
9184 9184 d 3a1181
9184 9184 s 				LD		A, (redGhostY)
9187 9187 d 3d
9187 9187 s 				DEC		A
9188 9188 d e61f
9188 9188 s 				AND		00011111B
918a 918a d 47
918a 918a s 				LD		B,A
918b 918b d 3a1081
918b 918b s 				LD		A,(redGhostX)
918e 918e d 4f
918e 918e s 				LD		C,A
918f 918f d 182a
918f 918f s 				JR		redGhostPathFind
9191 9191 s redGhostCheckD:			
9191 9191 d f5
9191 9191 s 				PUSH	AF
9192 9192 d 3a1181
9192 9192 s 				LD		A, (redGhostY)
9195 9195 d 3c
9195 9195 s 				INC		A
9196 9196 d e61f
9196 9196 s 				AND		00011111B
9198 9198 d 47
9198 9198 s 				LD		B,A
9199 9199 d 3a1081
9199 9199 s 				LD		A,(redGhostX)
919c 919c d 4f
919c 919c s 				LD		C,A
919d 919d d 181c
919d 919d s 				JR		redGhostPathFind
919f 919f s redGhostCheckL:		
919f 919f d f5
919f 919f s 				PUSH	AF	
91a0 91a0 d 3a1081
91a0 91a0 s 				LD		A, (redGhostX)
91a3 91a3 d 3d
91a3 91a3 s 				DEC		A
91a4 91a4 d e61f
91a4 91a4 s 				AND		00011111B
91a6 91a6 d 4f
91a6 91a6 s 				LD		C,A
91a7 91a7 d 3a1181
91a7 91a7 s 				LD		A,(redGhostY)
91aa 91aa d 47
91aa 91aa s 				LD		B,A
91ab 91ab d 180e
91ab 91ab s 				JR		redGhostPathFind
91ad 91ad s redGhostCheckR:
91ad 91ad d f5
91ad 91ad s 				PUSH	AF	
91ae 91ae d 3a1081
91ae 91ae s 				LD		A, (redGhostX)
91b1 91b1 d 3c
91b1 91b1 s 				INC		A
91b2 91b2 d e61f
91b2 91b2 s 				AND		00011111B
91b4 91b4 d 4f
91b4 91b4 s 				LD		C,A
91b5 91b5 d 3a1181
91b5 91b5 s 				LD		A,(redGhostY)
91b8 91b8 d 47
91b8 91b8 s 				LD		B,A
91b9 91b9 d 1800
91b9 91b9 s 				JR		redGhostPathFind
91bb 91bb s 
91bb 91bb s redGhostPathFind:
91bb 91bb d cd5592
91bb 91bb s 				CALL	getAddressPF
91be 91be d 3a1381
91be 91be s 				LD		A,(ghostDis)
91c1 91c1 d 5e
91c1 91c1 s 				LD		E,(HL)
91c2 91c2 d bb
91c2 91c2 s 				CP		E
91c3 91c3 d d2c891
91c3 91c3 s 				JP		NC,redGhostSetNewDir
91c6 91c6 d f1
91c6 91c6 s 				POP		AF
91c7 91c7 d c9
91c7 91c7 s 				RET
91c8 91c8 s redGhostSetNewDir:
91c8 91c8 d 7b
91c8 91c8 s 				LD		A,E
91c9 91c9 d 321381
91c9 91c9 s 				LD		(ghostDis),A
91cc 91cc d f1
91cc 91cc s 				POP		AF
91cd 91cd d 321281
91cd 91cd s 				LD		(redGhostDir),A
91d0 91d0 d c9
91d0 91d0 s 				RET
91d1 91d1 s 
91d1 91d1 s 
91d1 91d1 d 1b5b39316d4d1b5b306d00
91d1 91d1 s redGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
91dc 91dc d 1b5b39326d4d1b5b306d00
91dc 91dc s greenGhost:		.BYTE	1BH,"[92mM",1BH,"[0m",0
91e7 91e7 d 1b5b33366d4d1b5b306d00
91e7 91e7 s blueGhost:		.BYTE	1BH,"[36mM",1BH,"[0m",0
91f2 91f2 f main.asm
91f2 91f2 d 1b5b39356d4d1b5b306d00
91f2 91f2 s pinkGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
91fd 91fd s ;-----------Spesific Libs -----;
91fd 91fd s include movelibs.asm	
91fd 91fd f movelibs.asm
91fd 91fd s move:
91fd 91fd d fe57
91fd 91fd s 				CP		'W'
91ff 91ff d 280a
91ff 91ff s 				JR		Z,moveU
9201 9201 d fe41
9201 9201 s 				CP		'A'
9203 9203 d 2812
9203 9203 s 				JR		Z,moveL
9205 9205 d fe53
9205 9205 s 				CP		'S'
9207 9207 d 2808
9207 9207 s 				JR		Z,moveD
9209 9209 d 1812
9209 9209 s 				JR		moveR
920b 920b s 
920b 920b s moveU:			
920b 920b d 0a
920b 920b s 				LD		A, (BC)
920c 920c d 3d
920c 920c s 				DEC		A
920d 920d d e61f
920d 920d s 				AND		00011111B
920f 920f d 02
920f 920f s 				LD		(BC),A
9210 9210 d c9
9210 9210 s 				RET
9211 9211 s moveD:			
9211 9211 d 0a
9211 9211 s 				LD		A, (BC)
9212 9212 d 3c
9212 9212 s 				INC		A
9213 9213 d e61f
9213 9213 s 				AND		00011111B
9215 9215 d 02
9215 9215 s 				LD		(BC),A
9216 9216 d c9
9216 9216 s 				RET
9217 9217 s moveL:			
9217 9217 d 1a
9217 9217 s 				LD		A, (DE)
9218 9218 d 3d
9218 9218 s 				DEC		A
9219 9219 d e61f
9219 9219 s 				AND		00011111B
921b 921b d 12
921b 921b s 				LD		(DE),A
921c 921c d c9
921c 921c s 				RET
921d 921d s moveR:			
921d 921d d 1a
921d 921d s 				LD		A, (DE)
921e 921e d 3c
921e 921e s 				INC		A
921f 921f d e61f
921f 921f s 				AND		00011111B
9221 9221 d 12
9221 9221 s 				LD		(DE),A
9222 9222 d c9
9222 9222 s 				RET
9223 9223 s isMoveValid:
9223 9223 d fe57
9223 9223 s 				CP		'W'
9225 9225 d 280a
9225 9225 s 				JR		Z,moveUValid
9227 9227 d fe41
9227 9227 s 				CP		'A'
9229 9229 d 280c
9229 9229 s 				JR		Z,moveLValid
922b 922b d fe53
922b 922b s 				CP		'S'
922d 922d d 2805
922d 922d s 				JR		Z,moveDValid
922f 922f d 1809
922f 922f s 				JR		moveRValid
9231 9231 s moveUValid:			
9231 9231 d cb42
9231 9231 s 				BIT		upBit,D
9233 9233 d c9
9233 9233 s 				RET
9234 9234 s moveDValid:			
9234 9234 d cb4a
9234 9234 s 				BIT		downBit,D
9236 9236 d c9
9236 9236 s 				RET
9237 9237 s moveLValid:			
9237 9237 d cb52
9237 9237 s 				BIT		leftBit,D
9239 9239 d c9
9239 9239 s 				RET
923a 923a s moveRValid:			
923a 923a d cb5a
923a 923a s 				BIT		rightBit,D
923c 923c f main.asm
923c 923c d c9
923c 923c s 				RET
923d 923d s include	mapLibs.asm	
923d 923d f mapLibs.asm
923d 923d s ;------- Get Map Data ----;
923d 923d s ; C - X
923d 923d s ; B	- Y
923d 923d s getMapAddress:
923d 923d d c5
923d 923d s 				push	bc
923e 923e d cb00
923e 923e s 				rlc		b			;Shift b left 5
9240 9240 d cb00
9240 9240 s 				rlc		b			;Shift b left 5
9242 9242 d cb00
9242 9242 s 				rlc		b			;Shift b left 5
9244 9244 d cb00
9244 9244 s 				rlc		b			;Shift b left 5
9246 9246 d cb00
9246 9246 s 				rlc		b			;Shift b left 5
9248 9248 d 78
9248 9248 s 				ld		a,b
9249 9249 d e6e0
9249 9249 s 				and		11100000b	;Mask lower adress
924b 924b d b1
924b 924b s 				or		c			;Combine with C
924c 924c d 6f
924c 924c s 				ld		l,a			;A is now low byte of adress
924d 924d d 78
924d 924d s 				ld		a,b
924e 924e d e603
924e 924e s 				and		00000011b	;Mask upper adress
9250 9250 d f6e0
9250 9250 s 				or		0E0H		;Start of map
9252 9252 d 67
9252 9252 s 				ld		h,a
9253 9253 d c1
9253 9253 s 				pop		bc
9254 9254 d c9
9254 9254 s 				ret
9255 9255 s 
9255 9255 s ;------- Get Path Find Map Address----;
9255 9255 s ; C - X
9255 9255 s ; B	- Y
9255 9255 s getAddressPF:
9255 9255 d c5
9255 9255 s 				push	bc
9256 9256 d cb00
9256 9256 s 				rlc		b			;Shift b left 5
9258 9258 d cb00
9258 9258 s 				rlc		b			;Shift b left 5
925a 925a d cb00
925a 925a s 				rlc		b			;Shift b left 5
925c 925c d cb00
925c 925c s 				rlc		b			;Shift b left 5
925e 925e d cb00
925e 925e s 				rlc		b			;Shift b left 5
9260 9260 d 78
9260 9260 s 				ld		a,b
9261 9261 d e6e0
9261 9261 s 				and		11100000b	;Mask lower adress
9263 9263 d b1
9263 9263 s 				or		c			;Combine with C
9264 9264 d 6f
9264 9264 s 				ld		l,a			;A is now low byte of adress
9265 9265 d 78
9265 9265 s 				ld		a,b
9266 9266 d e603
9266 9266 s 				and		00000011b	;Mask upper adress
9268 9268 d f6d0
9268 9268 s 				or		0D0H		;Start of map
926a 926a d 67
926a 926a s 				ld		h,a
926b 926b d c1
926b 926b s 				pop		bc
926c 926c d c9
926c 926c s 				ret
926d 926d s 
926d 926d s 
926d 926d s ;--------- Map print -------- ;
926d 926d s ; C - X
926d 926d s ; B	- Y
926d 926d s printMapAt:	
926d 926d d c5
926d 926d s 			PUSH	BC
926e 926e d 0c
926e 926e s 			INC		C
926f 926f d 69
926f 926f s 			LD		L,C
9270 9270 d 2600
9270 9270 s 			LD		H, $00			;We dont care about msb
9272 9272 d e5
9272 9272 s 			PUSH	HL
9273 9273 d 04
9273 9273 s 			INC		B
9274 9274 d 68
9274 9274 s 			LD		L,B
9275 9275 d 2600
9275 9275 s 			LD		H, $00			;Again we dont care
9277 9277 d e5
9277 9277 s 			PUSH	HL
9278 9278 d cd9e93
9278 9278 s 			CALL	moveCursor
927b 927b d c1
927b 927b s 			POP 	BC
927c 927c d cd3d92
927c 927c s 			CALL	getMapAddress
927f 927f d 7e
927f 927f s 			LD		A,(HL)
9280 9280 d cd9f92
9280 9280 s 			CALL	pmChar
9283 9283 d c9
9283 9283 s 			RET
9284 9284 s 
9284 9284 s printMap:
9284 9284 d 3e20
9284 9284 s 				ld		a,32
9286 9286 d 47
9286 9286 s 				ld		b,a			; 32 chars per line
9287 9287 d 4f
9287 9287 s 				ld		c,a			; 32 lines per map
9288 9288 d 2100e0
9288 9288 s 				ld		hl,map
928b 928b d 7e
928b 928b s pmLoop:			ld		a,(hl)		; get char
928c 928c d cd9f92
928c 928c s 				call	pmChar		; decode what to print
928f 928f d 23
928f 928f s 				inc		hl			; next char
9290 9290 d 10f9
9290 9290 s 				djnz	pmLoop		; if were not at the end of a line, print next char
9292 9292 d cd9593
9292 9292 s 				call	newline		; if we are, print a new line
9295 9295 d 41
9295 9295 s 				ld		b,c			;are we at the end of a block
9296 9296 d 1001
9296 9296 s 				djnz	pmNextLine
9298 9298 d c9
9298 9298 s 				ret
9299 9299 s pmNextLine:	
9299 9299 d 48
9299 9299 s 				ld		c,b			;copy decremented b back to c
929a 929a d 3e20
929a 929a s 				ld 		a,32		;refill b withj 32
929c 929c d 47
929c 929c s 				ld		b,a
929d 929d d 18ec
929d 929d s 				jr		pmLoop		;draw next char
929f 929f s 
929f 929f s 
929f 929f s pmChar:		;-- Print map char a
929f 929f d e5
929f 929f s 				push	hl
92a0 92a0 d cb67
92a0 92a0 s 				bit		powerpBit,a
92a2 92a2 d 200e
92a2 92a2 s 				jr		nz,printPP
92a4 92a4 d cb6f
92a4 92a4 s 				bit		pelletBit,a
92a6 92a6 d 2012
92a6 92a6 s 				jr		nz,printP
92a8 92a8 d cb77
92a8 92a8 s 				bit		wallBit,a
92aa 92aa d 2016
92aa 92aa s 				jr		nz,printWall
92ac 92ac d cb7f
92ac 92ac s 				bit		sfBit,a
92ae 92ae d 201a
92ae 92ae s 				jr		nz,printSF
92b0 92b0 d 1820
92b0 92b0 s 				jr	 	printVoid
92b2 92b2 s 			
92b2 92b2 s printPP:
92b2 92b2 d 212b94
92b2 92b2 s 				ld		hl,powerPellet
92b5 92b5 d cd0e94
92b5 92b5 s 				call	print
92b8 92b8 d 1820
92b8 92b8 s 				jr		pmCharRet
92ba 92ba s printP:
92ba 92ba d 213694
92ba 92ba s 				ld		hl,pellet
92bd 92bd d cd0e94
92bd 92bd s 				call	print
92c0 92c0 d 1818
92c0 92c0 s 				jr		pmCharRet
92c2 92c2 s printWall:
92c2 92c2 d 212094
92c2 92c2 s 				ld		hl,wall
92c5 92c5 d cd0e94
92c5 92c5 s 				call	print
92c8 92c8 d 1810
92c8 92c8 s 				jr		pmCharRet
92ca 92ca s printSF:
92ca 92ca d 214194
92ca 92ca s 				ld		hl,superFruit
92cd 92cd d cd0e94
92cd 92cd s 				call	print
92d0 92d0 d 1808
92d0 92d0 s 				jr		pmCharRet
92d2 92d2 s printVoid:
92d2 92d2 d 215f94
92d2 92d2 s 				ld		hl,void
92d5 92d5 d cd0e94
92d5 92d5 s 				call	print
92d8 92d8 d 1800
92d8 92d8 s 				jr		pmCharRet
92da 92da s pmCharRet:	
92da 92da d e1
92da 92da s 				pop 	hl
92db 92db d c9
92db 92db s 				ret
92dc 92dc s 				
92dc 92dc s ;-------- Path Find Map -------;
92dc 92dc s ;Initi Path Find Map
92dc 92dc s initPathFind:
92dc 92dc d 3e20
92dc 92dc s 				ld		a,32
92de 92de d 47
92de 92de s 				ld		b,a			; 32 chars per line
92df 92df d 4f
92df 92df s 				ld		c,a			; 32 lines per map
92e0 92e0 d 2100d0
92e0 92e0 s 				ld		hl,pathFindMap
92e3 92e3 d 16ff
92e3 92e3 s initpPFLoop:	ld		D,0FFH		; set char
92e5 92e5 d 72
92e5 92e5 s 				LD		(HL),D
92e6 92e6 d 23
92e6 92e6 s 				inc		hl			; next char
92e7 92e7 d 10fa
92e7 92e7 s 				djnz	initpPFLoop		; if were not at the end of a line, print next char
92e9 92e9 d 41
92e9 92e9 s 				ld		b,c			;are we at the end of a block
92ea 92ea d 1001
92ea 92ea s 				djnz	pfNextRow
92ec 92ec d c9
92ec 92ec s 				ret
92ed 92ed s pfNextRow:	
92ed 92ed d 48
92ed 92ed s 				ld		c,b			;copy decremented b back to c
92ee 92ee d 3e20
92ee 92ee s 				ld 		a,32		;refill b withj 32
92f0 92f0 d 47
92f0 92f0 s 				ld		b,a
92f1 92f1 d 18f0
92f1 92f1 s 				jr		initpPFLoop		;draw next char
92f3 92f3 s 
92f3 92f3 s ;Calculate Map
92f3 92f3 s calculatePathMap:
92f3 92f3 d 01ffff
92f3 92f3 s 				ld		BC,0FFFFH		;Push Stack terminator		
92f6 92f6 d c5
92f6 92f6 s 				PUSH	BC
92f7 92f7 d 3a0081
92f7 92f7 s 				LD		A, (pacx)		;Push X to stack
92fa 92fa d 4f
92fa 92fa s 				LD		C,A
92fb 92fb d 3a0181
92fb 92fb s 				LD		A, (pacy)		;Push Y to stack
92fe 92fe d 47
92fe 92fe s 				LD		B,A
92ff 92ff d cd5592
92ff 92ff s 				CALL	getAddressPF
9302 9302 d 3600
9302 9302 s 				LD		(HL),00H
9304 9304 d c5
9304 9304 s 				PUSH	BC
9305 9305 s calculatePathMapLoop:
9305 9305 d c1
9305 9305 s 				POP		BC			;Get node to visit
9306 9306 d 78
9306 9306 s 				LD		A,B			;Check Its not FFFF
9307 9307 d b7
9307 9307 s 				OR		A
9308 9308 d feff
9308 9308 s 				CP		0FFH
930a 930a d c8
930a 930a s 				RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
930b 930b d ed43f289
930b 930b s 				LD		(originalBC),BC
930f 930f d cd5592
930f 930f s 				CALL	getAddressPF
9312 9312 d 7e
9312 9312 s 				LD		A,(HL)
9313 9313 d 3c
9313 9313 s 				INC		A
9314 9314 d ea0593
9314 9314 s 				JP 		PE,calculatePathMapLoop	;Skip again if inc overflows
9317 9317 d 5f
9317 9317 s 				LD		E,A			;Keep the distance were working with safe
9318 9318 d cd3d92
9318 9318 s 				CALL	getMapAddress
931b 931b d 56
931b 931b s 				LD		D,(HL)
931c 931c d 3e57
931c 931c s 				LD		A,	'W'			;check up
931e 931e d cd2392
931e 931e s 				CALL	isMoveValid
9321 9321 d c43f93
9321 9321 s 				CALL	NZ,calculateMapU
9324 9324 d 3e53
9324 9324 s 				LD		A,	'S'			;down
9326 9326 d cd2392
9326 9326 s 				CALL	isMoveValid
9329 9329 d c44a93
9329 9329 s 				CALL	NZ,calculateMapD
932c 932c d 3e41
932c 932c s 				LD		A,	'A'			;left
932e 932e d cd2392
932e 932e s 				CALL	isMoveValid
9331 9331 d c45593
9331 9331 s 				CALL	NZ,calculateMapL
9334 9334 d 3e44
9334 9334 s 				LD		A,	'D'			;right
9336 9336 d cd2392
9336 9336 s 				CALL	isMoveValid
9339 9339 d c46093
9339 9339 s 				CALL	NZ,calculateMapR
933c 933c d c30593
933c 933c s 				JP		calculatePathMapLoop
933f 933f s 				
933f 933f s calculateMapU:	
933f 933f d ed4bf289
933f 933f s 				LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
9343 9343 d 78
9343 9343 s 				LD		A, B				;Make modifications to corod
9344 9344 d 3d
9344 9344 s 				DEC		A
9345 9345 d e61f
9345 9345 s 				AND		00011111B			;Mask for looping
9347 9347 d 47
9347 9347 s 				LD		B,A
9348 9348 d 1821
9348 9348 s 				JR		calculateMapCell
934a 934a s calculateMapD:	
934a 934a d ed4bf289
934a 934a s 				LD		BC,(originalBC)	
934e 934e d 78
934e 934e s 				LD		A, B
934f 934f d 3c
934f 934f s 				INC		A
9350 9350 d e61f
9350 9350 s 				AND		00011111B
9352 9352 d 47
9352 9352 s 				LD		B,A
9353 9353 d 1816
9353 9353 s 				JR		calculateMapCell
9355 9355 s calculateMapL:	
9355 9355 d ed4bf289
9355 9355 s 				LD		BC,(originalBC)
9359 9359 d 79
9359 9359 s 				LD		A, C
935a 935a d 0d
935a 935a s 				DEC		C
935b 935b d e61f
935b 935b s 				AND		00011111B
935d 935d d 4f
935d 935d s 				LD		C,A
935e 935e d 180b
935e 935e s 				JR		calculateMapCell
9360 9360 s calculateMapR:
9360 9360 d ed4bf289
9360 9360 s 				LD		BC,(originalBC)
9364 9364 d 79
9364 9364 s 				LD		A, C
9365 9365 d 3c
9365 9365 s 				INC		A
9366 9366 d e61f
9366 9366 s 				AND		00011111B
9368 9368 d 4f
9368 9368 s 				LD		C,A
9369 9369 d 1800
9369 9369 s 				JR		calculateMapCell
936b 936b s 
936b 936b s calculateMapCell:
936b 936b d cd5592
936b 936b s 				CALL	getAddressPF
936e 936e d 7e
936e 936e s 				LD		A,(HL)
936f 936f s 
936f 936f d bb
936f 936f s 				CP		E			;Compare current data (A) with E (the path were looking at)
9370 9370 d d8
9370 9370 s 				RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
9371 9371 d c8
9371 9371 s 				RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
9372 9372 d 73
9372 9372 s 				LD		(HL),E
9373 9373 d e1
9373 9373 s 				POP		HL			;We need the return adress on the top of the stack
9374 9374 d c5
9374 9374 s 				PUSH	BC			;Push Cell so it can be visited
9375 9375 d e5
9375 9375 s 				PUSH	HL
9376 9376 f main.asm
9376 9376 d c9
9376 9376 s 				RET	
9377 9377 s 
9377 9377 s ;------HUD;
9377 9377 s include hud.asm
9377 9377 f hud.asm
9377 9377 s printScore:					
9377 9377 d 210200
9377 9377 s 				LD		HL, $02
937a 937a d e5
937a 937a s 				PUSH	HL
937b 937b d 212300
937b 937b s 				LD		HL, $23
937e 937e d e5
937e 937e s 				PUSH	HL
937f 937f d cd9e93
937f 937f s 				CALL	moveCursor
9382 9382 d 214c94
9382 9382 s 				LD		HL, scoreHUD
9385 9385 d cd0e94
9385 9385 s 				CALL 	print
9388 9388 d 2a0089
9388 9388 s 				LD		HL, (score)
938b 938b d cdb593
938b 938b s 				CALL	HLToDec
938e 938e d 3e0a
938e 938e s 				LD		A,LF
9390 9390 d cf
9390 9390 s 				RST     08H
9391 9391 d 3e0d
9391 9391 s 				LD		A,CR
9393 9393 d cf
9393 9393 s 				RST     08H
9394 9394 f main.asm
9394 9394 d c9
9394 9394 s 				RET
9395 9395 s 			
9395 9395 s ;------- Libs ------------;
9395 9395 s include libs.asm
9395 9395 f libs.asm
9395 9395 s newline:			
9395 9395 d f5
9395 9395 s 				push 	af
9396 9396 d 3e0d
9396 9396 s 				ld		a, CR
9398 9398 d cf
9398 9398 s 				rst 	08H
9399 9399 d 3e0a
9399 9399 s 				ld		a, LF
939b 939b d cf
939b 939b s 				rst 	08H
939c 939c d f1
939c 939c s 				pop 	af
939d 939d d c9
939d 939d s 				ret
939e 939e s 			
939e 939e s ;move cursor to (sp,sp-2)				
939e 939e s moveCursor:		
939e 939e d d1
939e 939e s 				POP		DE
939f 939f d 3e1b
939f 939f s 				LD		A,$1B
93a1 93a1 d cf
93a1 93a1 s 				RST     08H
93a2 93a2 d 3e5b
93a2 93a2 s 				LD		A,'['
93a4 93a4 d cf
93a4 93a4 s 				RST     08H
93a5 93a5 d e1
93a5 93a5 s 				POP		HL
93a6 93a6 d cdb593
93a6 93a6 s 				CALL	HLToDec
93a9 93a9 d 3e3b
93a9 93a9 s 				LD		A,$3B
93ab 93ab d cf
93ab 93ab s 				RST     08H
93ac 93ac d e1
93ac 93ac s 				POP		HL
93ad 93ad d cdb593
93ad 93ad s 				CALL	HLToDec
93b0 93b0 d 3e66
93b0 93b0 s 				LD		A,'f'
93b2 93b2 d cf
93b2 93b2 s 				RST     08H
93b3 93b3 d d5
93b3 93b3 s 				PUSH	DE
93b4 93b4 d c9
93b4 93b4 s 				RET
93b5 93b5 s 
93b5 93b5 s ;Prints	hl as decimal			
93b5 93b5 s HLToDec:
93b5 93b5 d f5
93b5 93b5 s 				PUSH	AF
93b6 93b6 d c5
93b6 93b6 s 				PUSH	BC
93b7 93b7 d cdbd93
93b7 93b7 s 				CALL	DispHL
93ba 93ba d c1
93ba 93ba s 				POP		BC
93bb 93bb d f1
93bb 93bb s 				POP		AF
93bc 93bc d c9
93bc 93bc s 				RET
93bd 93bd s DispHL:
93bd 93bd d 01f0d8
93bd 93bd s 				ld		bc,-10000
93c0 93c0 d cdd693
93c0 93c0 s 				call	Num1
93c3 93c3 d 0118fc
93c3 93c3 s 				ld		bc,-1000
93c6 93c6 d cdd693
93c6 93c6 s 				call	Num1
93c9 93c9 d 019cff
93c9 93c9 s 				ld		bc,-100
93cc 93cc d cdd693
93cc 93cc s 				call	Num1
93cf 93cf d 0ef6
93cf 93cf s 				ld		c,-10
93d1 93d1 d cdd693
93d1 93d1 s 				call	Num1
93d4 93d4 d 0eff
93d4 93d4 s 				ld		c,-1
93d6 93d6 d 3e2f
93d6 93d6 s Num1:			ld		a,'0'-1
93d8 93d8 d 3c
93d8 93d8 s Num2:			inc		a
93d9 93d9 d 09
93d9 93d9 s 				add		hl,bc
93da 93da d 38fc
93da 93da s 				jr		c,Num2
93dc 93dc d ed42
93dc 93dc s 				sbc		hl,bc
93de 93de d cf
93de 93de s 				RST     08H
93df 93df d c9
93df 93df s 				ret
93e0 93e0 s ;Print A as HEX				
93e0 93e0 s NumToHex:    	
93e0 93e0 d c5
93e0 93e0 s 				push	bc
93e1 93e1 d 4f
93e1 93e1 s 				ld 		c, a   		; a = number to convert
93e2 93e2 d cded93
93e2 93e2 s             	call 	Num1H
93e5 93e5 d cf
93e5 93e5 s             	RST     08H
93e6 93e6 d 79
93e6 93e6 s             	ld 		a, c
93e7 93e7 d cdf193
93e7 93e7 s             	call 	Num2H
93ea 93ea d cf
93ea 93ea s             	RST     08H
93eb 93eb d c1
93eb 93eb s 				pop		bc
93ec 93ec d c9
93ec 93ec s             	ret
93ed 93ed s 
93ed 93ed d 1f
93ed 93ed s Num1H:        	rra
93ee 93ee d 1f
93ee 93ee s             	rra
93ef 93ef d 1f
93ef 93ef s             	rra
93f0 93f0 d 1f
93f0 93f0 s            		rra
93f1 93f1 d f6f0
93f1 93f1 s Num2H:        	or 		$F0
93f3 93f3 d 27
93f3 93f3 s             	daa
93f4 93f4 d c6a0
93f4 93f4 s             	add 	a, $A0
93f6 93f6 d ce40
93f6 93f6 s             	adc 	a, $40 		; Ascii hex at this point (0 to F)   
93f8 93f8 d c9
93f8 93f8 s             	ret
93f9 93f9 s 
93f9 93f9 s ;Get ABS of A
93f9 93f9 s absA:
93f9 93f9 d b7
93f9 93f9 s      or a
93fa 93fa d f0
93fa 93fa s      ret p
93fb 93fb d ed44
93fb 93fb s      neg
93fd 93fd d c9
93fd 93fd s      ret
93fe 93fe s 
93fe 93fe s ;getArAndomA	 
93fe 93fe s randomA:				
93fe 93fe d 3a8888
93fe 93fe s 				ld a, 	(seed)
9401 9401 d 47
9401 9401 s 				ld b, 	a 
9402 9402 s 
9402 9402 d 0f
9402 9402 s 				rrca ; multiply by 32
9403 9403 d 0f
9403 9403 s 				rrca
9404 9404 d 0f
9404 9404 s 				rrca
9405 9405 d ee1f
9405 9405 s 				xor $1f
9407 9407 s 
9407 9407 d 80
9407 9407 s 				add 	a, b
9408 9408 d deff
9408 9408 s 				sbc a, 255 ; carry
940a 940a s 
940a 940a d 328888
940a 940a s 				ld (seed), a
940d 940d d c9
940d 940d s 				ret
940e 940e s 
940e 940e s ;------- Print string
940e 940e d f5
940e 940e s print:			PUSH 	AF				; Preserve AF				
940f 940f d 7e
940f 940f s printLoop:      LD      A,(HL)          ; Get character
9410 9410 d b7
9410 9410 s                 OR      A               ; Is it $00 ?
9411 9411 d 2804
9411 9411 s                 JR     	Z,printRet      ; Then RETurn on terminator
9413 9413 d cf
9413 9413 s                 RST     08H             ; Print it
9414 9414 d 23
9414 9414 s                 INC     HL              ; Next Character
9415 9415 d 18f8
9415 9415 s                 JR      printLoop       ; Continue until $00
9417 9417 s 				
9417 9417 s ;delay loop
9417 9417 s printRet:		
9417 9417 d f1
9417 9417 s 				POP		AF
9418 9418 d c9
9418 9418 s 				RET
9419 9419 s delay:
9419 9419 d 00
9419 9419 s 				NOP
941a 941a d 0b
941a 941a s 				DEC 	BC
941b 941b d 78
941b 941b s 				LD 		A,B
941c 941c d b1
941c 941c s 				OR 		C
941d 941d d c8
941d 941d s 				RET 	Z
941e 941e f main.asm
941e 941e d 18f9
941e 941e s 				JR 		delay
9420 9420 s 
9420 9420 s ;Strings
9420 9420 d 1b5b33346d231b5b306d00
9420 9420 s wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
942b 942b d 1b5b39376d6f1b5b306d00
942b 942b s powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
9436 9436 d 1b5b33376d2a1b5b306d00
9436 9436 s pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
9441 9441 d 1b5b33316d401b5b306d00
9441 9441 s superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
944c 944c s 
944c 944c d 53636f72653a2000
944c 944c s scoreHUD:     	.BYTE "Score: ",0
9454 9454 s 
9454 9454 d 1b5b39336d431b5b306d00
9454 9454 s pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
945f 945f s 
945f 945f d 2000
945f 945f s void:			.BYTE	" ",0
9461 9461 s 
9461 9461 d 1b5b481b5b324a00
9461 9461 s cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
9469 9469 s ;-----Path find map
d000 d000 s 	.ORG 0D000H
d000 d000 s pathFindMap:
d000 d000 s ;----- Map ------		
e000 e000 s 	.ORG 0E000H
e000 e000 f main.asm
e000 e000 s 	include map.asm
e000 e000 f map.asm
e000 e000 s ;----Pellet
e000 e000 s ww 		.EQU	40H
e000 e000 s 
e000 e000 s hp 		.EQU	2CH		;left 	right	pellet
e000 e000 s gp		.EQU	23H		;up		down	pellet
e000 e000 s 
e000 e000 s lp		.EQU	26H		;down 	left 	pellet
e000 e000 s rp		.EQU	2AH		;down 	right	pellet
e000 e000 s up		.EQU	25H		;up 	left	pellet
e000 e000 s dp		.EQU	29H		;up 	right	pellet
e000 e000 s 
e000 e000 s bp		.EQU	2BH		;up		down	right	pellet
e000 e000 s cp		.EQU	27H		;up		down	left	pellet
e000 e000 s vp		.EQU	2EH		;down	left	right	pellet
e000 e000 s kp		.EQU	2DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xp		.EQU	2FH		;all	pellet
e000 e000 s ;------- No pellet
e000 e000 s hn 		.EQU	0CH		;left 	right	pellet
e000 e000 s gn		.EQU	03H		;up		down	pellet
e000 e000 s 
e000 e000 s ln		.EQU	06H		;down 	left 	pellet
e000 e000 s rn		.EQU	0AH		;down 	right	pellet
e000 e000 s un		.EQU	05H		;up 	left	pellet
e000 e000 s dn		.EQU	09H		;up 	right	pellet
e000 e000 s 
e000 e000 s bn		.EQU	0BH		;up		down	right	pellet
e000 e000 s cn		.EQU	07H		;up		down	left	pellet
e000 e000 s vn		.EQU	0EH		;down	left	right	pellet
e000 e000 s kn		.EQU	0DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xn		.EQU	0FH		;all	pellet
e000 e000 s ;--------Power Pellet
e000 e000 s hs 		.EQU	1CH		;left 	right	pellet
e000 e000 s gs		.EQU	13H		;up		down	pellet
e000 e000 s 
e000 e000 s ls		.EQU	16H		;down 	left 	pellet
e000 e000 s rs		.EQU	1AH		;down 	right	pellet
e000 e000 s us		.EQU	15H		;up 	left	pellet
e000 e000 s ds		.EQU	19H		;up 	right	pellet
e000 e000 s 
e000 e000 s bs		.EQU	1BH		;up		down	right	pellet
e000 e000 s cs		.EQU	17H		;up		down	left	pellet
e000 e000 s vs		.EQU	1EH		;down	left	right	pellet
e000 e000 s ks		.EQU	1DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xs		.EQU	1FH		;all	pellet
e000 e000 s 
e000 e000 s 
e000 e000 d 0000404040404040404040404040404040404040404040404040404040400000
e000 e000 s map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
e020 e020 d 0000402a2c2c2c2c2e2c2c2c2c2c2640402a2c2c2c2c2c2e2c2c2c2c26400000
e020 e020 s 		.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
e040 e040 d 0000401340404040234040404040234040234040404040234040404013400000
e040 e040 s 		.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
e060 e060 d 0000402340404040234040404040234040234040404040234040404023400000
e060 e060 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e080 e080 d 0000402b2c2c2c2c2f2c2c2e2c2c2d2c2c2d2c2c2e2c2c2f2c2c2c2c27400000
e080 e080 s 		.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
e0a0 e0a0 d 0000402340404040234040234040404040404040234040234040404023400000
e0a0 e0a0 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e0c0 e0c0 d 000040292c2c2c2c274040292c2c2640402a2c2c2540402b2c2c2c2c25400000
e0c0 e0c0 s 		.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
e0e0 e0e0 d 0000404040404040234040404040034040034040404040234040404040400000
e0e0 e0e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
e100 e100 d 00000000000000402340400a0c0c0d0c0c0d0c0c064040234000000000000000
e100 e100 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
e120 e120 d 0000000000000040234040034040400000404040034040234000000000000000
e120 e120 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
e140 e140 d 4040404040404040234040034000000000000040034040234040404040404040
e140 e140 s 		.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
e160 e160 d 0c0c0c0c0c0c0c0c2f0c0c0740000000000000400b0c0c2f0c0c0c0c0c0c0c0c
e160 e160 s 		.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
e180 e180 d 4040404040404040234040034000000000000040034040234040404040404040
e180 e180 s 		.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
e1a0 e1a0 d 0000000000000040234040034040404040404040034040234000000000000000
e1a0 e1a0 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
e1c0 e1c0 d 00000000000000402340400b0c0c0c0c0c0c0c0c074040234000000000000000
e1c0 e1c0 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
e1e0 e1e0 d 0000404040404040234040034040404040404040034040234040404040400000
e1e0 e1e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
e200 e200 d 0000402a2c2c2c2c2f2c2c2d2c2c2640402a2c2c2d2c2c2f2c2c2c2c26400000
e200 e200 s 		.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
e220 e220 d 0000402340404040234040404040234040234040404040234040404023400000
e220 e220 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e240 e240 d 000040192c2640402b2c2c2e2c2c2d2c2c2d2c2c2e2c2c2740402a2c15400000
e240 e240 s 		.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
e260 e260 d 0000404040234040234040234040404040404040234040234040234040400000
e260 e260 s 		.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
e280 e280 d 0000402a2c2d2c2c254040292c2c2640402a2c2c254040292c2c2d2c26400000
e280 e280 s 		.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
e2a0 e2a0 d 0000402340404040404040404040234040234040404040404040404023400000
e2a0 e2a0 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
e2c0 e2c0 d 000040292c2c2c2c2c2c2c2c2c2c2d2c2c2d2c2c2c2c2c2c2c2c2c2c25400000
e2c0 e2c0 s 		.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
e2e0 e2e0 d 0000404040404040404040404040404040404040404040404040404040400000
e2e0 e2e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
e300 e300 d 0000000000000000000000000000000000000000000000000000000000000000
e300 e300 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e320 e320 d 0000000000000000000000000000000000000000000000000000000000000000
e320 e320 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e340 e340 d 0000000000000000000000000000000000000000000000000000000000000000
e340 e340 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e360 e360 d 0000000000000000000000000000000000000000000000000000000000000000
e360 e360 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e380 e380 d 0000000000000000000000000000000000000000000000000000000000000000
e380 e380 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3a0 e3a0 d 0000000000000000000000000000000000000000000000000000000000000000
e3a0 e3a0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3c0 e3c0 d 0000000000000000000000000000000000000000000000000000000000000000
e3c0 e3c0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3e0 e3e0 f main.asm
e3e0 e3e0 d 0000000000000000000000000000000000000000000000000000000000000000
e3e0 e3e0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
000b v bn
0007 v cn
000a v lf
002b v bp
0029 v dp
000d v cr
0027 v cp
0023 v gp
002c v hp
000c v hn
0003 v gn
002d v kp
0026 v lp
0006 v ln
0009 v dn
000d v kn
000a v rn
001c v hs
002a v rp
0005 v un
0025 v up
002e v vp
000e v vn
002f v xp
000f v xn
0013 v gs
0016 v ls
001a v rs
0015 v us
0040 v ww
0019 v ds
001b v bs
0017 v cs
001e v vs
001d v ks
001f v xs
e000 a map
9461 a cls
93d6 a num1
93d8 a num2
93f9 a absa
8888 v seed
8100 v pacx
8101 v pacy
9420 a wall
945f a void
91fd a move
93ed a num1h
93f1 a num2h
9419 a delay
0007 v sfbit
9211 a moved
8900 v score
9217 a movel
0000 v upbit
921d a mover
920b a moveu
940e a print
9068 a input
90f0 a checkh
9454 a pacman
90fe a checkv
929f a pmchar
93bd a disphl
9436 a pellet
910e a movepm
928b a pmloop
92ba a printp
8102 v paccdir
8103 v pacndir
93fe a randoma
93b5 a hltodec
9082 a clearpm
0002 v leftbit
0006 v wallbit
9395 a newline
0001 v downbit
90ca a getmove
92ca a printsf
908e a printpm
92b2 a printpp
9032 a gameloop
0003 v rightbit
944c a scorehud
000e v initpacx
000e v initpacy
91d1 a redghost
8113 v ghostdis
9284 a printmap
93e0 a numtohex
9417 a printret
90b5 a eatpellet
0005 v pelletbit
92da a pmcharret
91e7 a blueghost
91f2 a pinkghost
8110 v redghostx
8111 v redghosty
0004 v powerpbit
92c2 a printwall
92d2 a printvoid
940f a printloop
92ed a pfnextrow
89f2 v originalbc
9234 a movedvalid
90bd a eatspellet
9237 a movelvalid
91dc a greenghost
923a a movervalid
9231 a moveuvalid
907e a validinput
926d a printmapat
9299 a pmnextline
9377 a printscore
939e a movecursor
9441 a superfruit
d000 a pathfindmap
8112 v redghostdir
9223 a ismovevalid
942b a powerpellet
92e3 a initppfloop
90a8 a getpmmapdata
9255 a getaddresspf
92dc a initpathfind
90e6 a calcnextmove
914d a moveredghost
934a a calculatemapd
9355 a calculatemapl
9360 a calculatemapr
933f a calculatemapu
923d a getmapaddress
911a a clearredghost
90df a nextmovevalid
0014 v initredghostx
0001 v initredghosty
9126 a printredghost
9191 a redghostcheckd
919f a redghostcheckl
91ad a redghostcheckr
9183 a redghostchecku
000f v storeredghostx
89f0 v oldstackpointer
936b a calculatemapcell
92f3 a calculatepathmap
91bb a redghostpathfind
91c8 a redghostsetnewdir
9140 a getredghostmapdata
9159 a getredghostnextmove
9305 a calculatepathmaploop
