binary-debuggable-source
0000 0000 f main.asm
0000 0000 s CR              .EQU     0DH
0000 0000 s LF              .EQU     0AH
0000 0000 s 
0000 0000 s oldStackPointer	.EQU	89F0H		;Old Stack Location 	
0000 0000 s originalBC		.EQU	89F2H		;BC before manipulation, used for calculating board position
0000 0000 s 
9000 9000 s 	.ORG 9000H
9000 9000 d ed73f089
9000 9000 s 			ld		(oldStackPointer), SP
9004 9004 d 31ffff
9004 9004 s 			ld		sp,0FFFFH
9007 9007 d 3e0e
9007 9007 s 			ld		a, initPacx		;set Pacman Pos
9009 9009 d 320081
9009 9009 s 			ld		(pacx),a
900c 900c d 3e0e
900c 900c s 			ld		a, initPacy
900e 900e d 320181
900e 900e s 			ld		(pacy),a
9011 9011 d 3e44
9011 9011 s 			ld		a, 'D'			;Set start direction
9013 9013 d 320281
9013 9013 s 			ld		(pacCDir),A
9016 9016 d 320381
9016 9016 s 			ld		(pacNDir),A
9019 9019 d 210000
9019 9019 s 			ld		HL, 0H
901c 901c d 220089
901c 901c s 			LD		(score), HL
901f 901f d 3e14
901f 901f s 			ld		a, initRedGhostX	;set RedGhost Pos
9021 9021 d 321081
9021 9021 s 			ld		(redGhostX),a
9024 9024 d 3e01
9024 9024 s 			ld		a, initRedGhostY
9026 9026 d 321181
9026 9026 s 			ld		(redGhostY),a
9029 9029 d 219e94
9029 9029 s 			LD		HL, cls			;Clear screen
902c 902c d cd4b94
902c 902c s 			CALL	print
902f 902f d cd8192
902f 902f s 			call 	printMap
9032 9032 s gameLoop:		
9032 9032 d cd6590
9032 9032 s 			call	input
9035 9035 d cdc790
9035 9035 s 			call 	getMove
9038 9038 d cd7f90
9038 9038 s 			call 	clearPM
903b 903b d cd0b91
903b 903b s 			call	movePM
903e 903e d cd8b90
903e 903e s 			call 	printPM
9041 9041 d cdb290
9041 9041 s 			call	eatPellet
9044 9044 s 
9044 9044 d cdd992
9044 9044 s 			call	initPathFind
9047 9047 d cdf192
9047 9047 s 			call	calculatePathMap
904a 904a s 
904a 904a d cd5691
904a 904a s 			call	getRedGhostNextMove
904d 904d d cd1791
904d 904d s 			call	clearRedGhost
9050 9050 d cd4a91
9050 9050 s 			call	moveRedGhost
9053 9053 d cd2391
9053 9053 s 			call	printRedGhost
9056 9056 s 
9056 9056 s 			;call 	printPFMap
9056 9056 s 			
9056 9056 d cdb493
9056 9056 s 			call 	printScore
9059 9059 d 06ff
9059 9059 s 			LD 		B,0FFH   ;delay
905b 905b d 0eff
905b 905b s 			LD		C,0FFH
905d 905d s 			;CALL 	DELAY
905d 905d d c33290
905d 905d s 			JP		gameLoop
9060 9060 d ed7bf089
9060 9060 s 			LD		SP,(oldStackPointer)
9064 9064 d c9
9064 9064 s 			ret
9065 9065 s 		
9065 9065 s ;-------------- Input --------------------------					
9065 9065 s include input.asm	
9065 9065 f input.asm
9065 9065 s input:
9065 9065 d df
9065 9065 s 				RST		18H
9066 9066 d c8
9066 9066 s 				RET		Z
9067 9067 d d7
9067 9067 s 				RST		10H
9068 9068 d e6df
9068 9068 s 				AND     11011111b       ; lower to uppercase
906a 906a d fe57
906a 906a s 				CP		'W'
906c 906c d 280d
906c 906c s 				JR		Z,validInput
906e 906e d fe41
906e 906e s 				CP		'A'
9070 9070 d 2809
9070 9070 s 				JR		Z,validInput
9072 9072 d fe53
9072 9072 s 				CP		'S'
9074 9074 d 2805
9074 9074 s 				JR		Z,validInput
9076 9076 d fe44
9076 9076 s 				CP		'D'
9078 9078 d 2801
9078 9078 s 				JR		Z,validInput
907a 907a d c9
907a 907a s 				RET
907b 907b s validInput:		
907b 907b d 320381
907b 907b s 				LD		(pacNDir), A
907e 907e f main.asm
907e 907e d c9
907e 907e s 				RET
907f 907f s ;----------Pacman------;
907f 907f s include	pacman.asm
907f 907f f pacman.asm
907f 907f s ;Packman
907f 907f s pacx			.EQU	8100H
907f 907f s pacy			.EQU	8101H
907f 907f s pacCDir			.EQU	8102H		;Pacmans current direction
907f 907f s pacNDir			.EQU	8103H		;Pacman next direction (from key press)
907f 907f s 
907f 907f s initPacx		.EQU	14
907f 907f s initPacy		.EQU	14
907f 907f s 
907f 907f s clearPM:
907f 907f d 3a0081
907f 907f s 				LD		A, (pacx)		;Push X to stack
9082 9082 d 4f
9082 9082 s 				LD		C,A
9083 9083 d 3a0181
9083 9083 s 				LD		A, (pacy)		;Push Y to stack
9086 9086 d 47
9086 9086 s 				LD		B,A
9087 9087 d cd6a92
9087 9087 s 				CALL 	printMapAt
908a 908a d c9
908a 908a s 				RET
908b 908b s 				
908b 908b s printPM:
908b 908b d 3a0081
908b 908b s 				LD		A, (pacx)		;Push X to stack
908e 908e d 3c
908e 908e s 				INC		A
908f 908f d 6f
908f 908f s 				LD		L,A
9090 9090 d 2600
9090 9090 s 				LD		H, $00			;We dont care about msb
9092 9092 d e5
9092 9092 s 				PUSH	HL
9093 9093 d 3a0181
9093 9093 s 				LD		A, (pacy)		;Push Y to stack
9096 9096 d 3c
9096 9096 s 				INC		A
9097 9097 d 6f
9097 9097 s 				LD		L,A
9098 9098 d 2600
9098 9098 s 				LD		H, $00			;Again we dont care
909a 909a d e5
909a 909a s 				PUSH	HL
909b 909b d cddb93
909b 909b s 				CALL	moveCursor
909e 909e d 219194
909e 909e s 				LD		HL, pacman
90a1 90a1 d cd4b94
90a1 90a1 s 				CALL 	print
90a4 90a4 d c9
90a4 90a4 s 				RET
90a5 90a5 s getPMMapData:	
90a5 90a5 d 3a0081
90a5 90a5 s 				LD		A, (pacx)
90a8 90a8 d 4f
90a8 90a8 s 				LD		C,A
90a9 90a9 d 3a0181
90a9 90a9 s 				LD		A, (pacy)
90ac 90ac d 47
90ac 90ac s 				LD		B,A
90ad 90ad d cd3a92
90ad 90ad s 				CALL	getMapAddress
90b0 90b0 d 7e
90b0 90b0 s                 LD      A,(HL)
90b1 90b1 d c9
90b1 90b1 s 				ret
90b2 90b2 s eatPellet:		;Eat pellet at packman location
90b2 90b2 d cda590
90b2 90b2 s 				CALL 	getPMMapData
90b5 90b5 d cb6f
90b5 90b5 s 				BIT		pelletBit,A
90b7 90b7 d 2001
90b7 90b7 s 				JR		NZ,eatSPellet
90b9 90b9 d c9
90b9 90b9 s 				RET
90ba 90ba s 				
90ba 90ba s eatSPellet:		
90ba 90ba d e5
90ba 90ba s 				PUSH	HL		
90bb 90bb d 2a0089
90bb 90bb s 				LD		HL,(score)
90be 90be d 23
90be 90be s 				INC		HL
90bf 90bf d 23
90bf 90bf s 				INC		HL
90c0 90c0 d 220089
90c0 90c0 s 				LD		(score),HL
90c3 90c3 d e1
90c3 90c3 s 				POP		HL
90c4 90c4 d cbae
90c4 90c4 s 				RES		pelletBit,(HL)
90c6 90c6 d c9
90c6 90c6 s 				RET
90c7 90c7 s 				
90c7 90c7 s getMove:		;Sets the current move var
90c7 90c7 d cda590
90c7 90c7 s 				CALL	getPMMapData
90ca 90ca d 57
90ca 90ca s 				LD		D,A
90cb 90cb d 3a0381
90cb 90cb s 				LD		A,(pacNDir)			;Is the next move valid
90ce 90ce d cd2092
90ce 90ce s 				CALL	isMoveValid
90d1 90d1 d 2009
90d1 90d1 s 				JR		NZ,nextMoveValid
90d3 90d3 d 3a0281
90d3 90d3 s 				LD		A,(pacCDir)			;Is the current move valid
90d6 90d6 d cd2092
90d6 90d6 s 				CALL	isMoveValid
90d9 90d9 d c0
90d9 90d9 s 				RET		NZ
90da 90da d 1807
90da 90da s 				JR		calcNextMove
90dc 90dc s 				
90dc 90dc s nextMoveValid:
90dc 90dc d 320281
90dc 90dc s 				LD		(pacCDir),A
90df 90df d 320381
90df 90df s 				LD		(pacNDir),A
90e2 90e2 d c9
90e2 90e2 s 				RET
90e3 90e3 s 				
90e3 90e3 s calcNextMove:	
90e3 90e3 d fe41
90e3 90e3 s 				CP		'A'
90e5 90e5 d 2814
90e5 90e5 s 				JR		Z,checkV
90e7 90e7 d fe44
90e7 90e7 s 				CP		'D'
90e9 90e9 d 2810
90e9 90e9 s 				JR		Z,checkV
90eb 90eb d 1800
90eb 90eb s 				JR		checkH
90ed 90ed s checkH:
90ed 90ed d 3e41
90ed 90ed s 				LD		A,'A'
90ef 90ef d cd2092
90ef 90ef s 				CALL	isMoveValid
90f2 90f2 d 20e8
90f2 90f2 s 				JR		NZ,nextMoveValid
90f4 90f4 d 3e44
90f4 90f4 s 				LD		A,'D'
90f6 90f6 d cd2092
90f6 90f6 s 				CALL	isMoveValid
90f9 90f9 d 20e1
90f9 90f9 s 				JR		NZ,nextMoveValid
90fb 90fb s checkV:
90fb 90fb d 3e57
90fb 90fb s 				LD		A,'W'
90fd 90fd d cd2092
90fd 90fd s 				CALL	isMoveValid
9100 9100 d 20da
9100 9100 s 				JR		NZ,nextMoveValid
9102 9102 d 3e53
9102 9102 s 				LD		A,'S'
9104 9104 d cd2092
9104 9104 s 				CALL	isMoveValid
9107 9107 d 20d3
9107 9107 s 				JR		NZ,nextMoveValid
9109 9109 d 18e2
9109 9109 s 				JR		checkH
910b 910b s ;Move
910b 910b s movePM:
910b 910b d 3a0281
910b 910b s 				LD		A,(pacCDir)
910e 910e d 110081
910e 910e s 				LD		DE,pacx
9111 9111 d 010181
9111 9111 s 				LD		BC,pacy
9114 9114 f main.asm
9114 9114 d c3fa91
9114 9114 s 				JP		move
9117 9117 s ;------------Ghost
9117 9117 s include ghosts.asm
9117 9117 f ghosts.asm
9117 9117 s ghostDis		.EQU	8113H		;ghost move distance from pacman
9117 9117 s 
9117 9117 s ;Ghost
9117 9117 s ;Red
9117 9117 s initRedGhostX	.EQU	20
9117 9117 s initRedGhostY	.EQU	1
9117 9117 s storeRedGhostX	.EQU	15
9117 9117 s storeRedGhostY	.EQU	15
9117 9117 s 
9117 9117 s redGhostX		.EQU	8110H		
9117 9117 s redGhostY		.EQU	8111H
9117 9117 s redGhostDir		.EQU	8112H
9117 9117 s 
9117 9117 s ;Orange
9117 9117 s initOGhostX     .EQU	20
9117 9117 s initOGhostY	    .EQU	1
9117 9117 s storeOGhostX	.EQU	15
9117 9117 s storeOGhostY	.EQU	15
9117 9117 s 
9117 9117 s ;Teal
9117 9117 s initRedGhostX	.EQU	20
9117 9117 s initRedGhostY	.EQU	1
9117 9117 s storeRedGhostX	.EQU	15
9117 9117 s storeRedGhostY	.EQU	15
9117 9117 s 
9117 9117 s ;Prink
9117 9117 s initRedGhostX	.EQU	20
9117 9117 s initRedGhostY	.EQU	1
9117 9117 s storeRedGhostX	.EQU	15
9117 9117 s storeRedGhostY	.EQU	15
9117 9117 s 
9117 9117 s 
9117 9117 s ;Red
9117 9117 s clearRedGhost:
9117 9117 d 3a1081
9117 9117 s 				LD		A, (redGhostX)		;Push X to stack
911a 911a d 4f
911a 911a s 				LD		C,A
911b 911b d 3a1181
911b 911b s 				LD		A, (redGhostY)		;Push Y to stack
911e 911e d 47
911e 911e s 				LD		B,A
911f 911f d cd6a92
911f 911f s 				CALL 	printMapAt
9122 9122 d c9
9122 9122 s 				RET
9123 9123 s 				
9123 9123 s printRedGhost:
9123 9123 d 3a1081
9123 9123 s 				LD		A, (redGhostX)		;Push X to stack
9126 9126 d 3c
9126 9126 s 				INC		A
9127 9127 d 6f
9127 9127 s 				LD		L,A
9128 9128 d 2600
9128 9128 s 				LD		H, $00			;We dont care about msb
912a 912a d e5
912a 912a s 				PUSH	HL
912b 912b d 3a1181
912b 912b s 				LD		A, (redGhostY)		;Push Y to stack
912e 912e d 3c
912e 912e s 				INC		A
912f 912f d 6f
912f 912f s 				LD		L,A
9130 9130 d 2600
9130 9130 s 				LD		H, $00			;Again we dont care
9132 9132 d e5
9132 9132 s 				PUSH	HL
9133 9133 d cddb93
9133 9133 s 				CALL	moveCursor
9136 9136 d 21ce91
9136 9136 s 				LD		HL, redGhost
9139 9139 d cd4b94
9139 9139 s 				CALL 	print
913c 913c d c9
913c 913c s 				RET
913d 913d s getRedGhostMapData:	
913d 913d d 3a1081
913d 913d s 				LD		A, (redGhostX)
9140 9140 d 4f
9140 9140 s 				LD		C,A
9141 9141 d 3a1181
9141 9141 s 				LD		A, (redGhostY)
9144 9144 d 47
9144 9144 s 				LD		B,A
9145 9145 d cd3a92
9145 9145 s 				CALL	getMapAddress
9148 9148 d 7e
9148 9148 s                 LD      A,(HL)
9149 9149 d c9
9149 9149 s 				ret
914a 914a s ;Move
914a 914a s moveRedGhost:
914a 914a d 3a1281
914a 914a s 				LD		A,(redGhostDir)
914d 914d d 111081
914d 914d s 				LD		DE,redGhostX
9150 9150 d 011181
9150 9150 s 				LD		BC,redGhostY
9153 9153 d c3fa91
9153 9153 s 				JP		move
9156 9156 s getRedGhostNextMove:
9156 9156 d 3eff
9156 9156 s 				LD		A, 0FFH
9158 9158 d 321381
9158 9158 s 				LD		(ghostDis),A
915b 915b d cd3d91
915b 915b s 				CALL	getRedGhostMapData
915e 915e d 57
915e 915e s 				LD		D,A
915f 915f d 3e57
915f 915f s 				LD		A,	'W'			;check up
9161 9161 d cd2092
9161 9161 s 				CALL	isMoveValid
9164 9164 d c48091
9164 9164 s 				CALL	NZ,redGhostCheckU
9167 9167 d 3e53
9167 9167 s 				LD		A,	'S'			;down
9169 9169 d cd2092
9169 9169 s 				CALL	isMoveValid
916c 916c d c48e91
916c 916c s 				CALL	NZ,redGhostCheckD
916f 916f d 3e41
916f 916f s 				LD		A,	'A'			;left
9171 9171 d cd2092
9171 9171 s 				CALL	isMoveValid
9174 9174 d c49c91
9174 9174 s 				CALL	NZ,redGhostCheckL
9177 9177 d 3e44
9177 9177 s 				LD		A,	'D'			;right
9179 9179 d cd2092
9179 9179 s 				CALL	isMoveValid
917c 917c d c4aa91
917c 917c s 				CALL	NZ,redGhostCheckR
917f 917f d c9
917f 917f s 				RET
9180 9180 s 				
9180 9180 s redGhostCheckU:	
9180 9180 d f5
9180 9180 s 				PUSH	AF
9181 9181 d 3a1181
9181 9181 s 				LD		A, (redGhostY)
9184 9184 d 3d
9184 9184 s 				DEC		A
9185 9185 d e61f
9185 9185 s 				AND		00011111B
9187 9187 d 47
9187 9187 s 				LD		B,A
9188 9188 d 3a1081
9188 9188 s 				LD		A,(redGhostX)
918b 918b d 4f
918b 918b s 				LD		C,A
918c 918c d 182a
918c 918c s 				JR		redGhostPathFind
918e 918e s redGhostCheckD:			
918e 918e d f5
918e 918e s 				PUSH	AF
918f 918f d 3a1181
918f 918f s 				LD		A, (redGhostY)
9192 9192 d 3c
9192 9192 s 				INC		A
9193 9193 d e61f
9193 9193 s 				AND		00011111B
9195 9195 d 47
9195 9195 s 				LD		B,A
9196 9196 d 3a1081
9196 9196 s 				LD		A,(redGhostX)
9199 9199 d 4f
9199 9199 s 				LD		C,A
919a 919a d 181c
919a 919a s 				JR		redGhostPathFind
919c 919c s redGhostCheckL:		
919c 919c d f5
919c 919c s 				PUSH	AF	
919d 919d d 3a1081
919d 919d s 				LD		A, (redGhostX)
91a0 91a0 d 3d
91a0 91a0 s 				DEC		A
91a1 91a1 d e61f
91a1 91a1 s 				AND		00011111B
91a3 91a3 d 4f
91a3 91a3 s 				LD		C,A
91a4 91a4 d 3a1181
91a4 91a4 s 				LD		A,(redGhostY)
91a7 91a7 d 47
91a7 91a7 s 				LD		B,A
91a8 91a8 d 180e
91a8 91a8 s 				JR		redGhostPathFind
91aa 91aa s redGhostCheckR:
91aa 91aa d f5
91aa 91aa s 				PUSH	AF	
91ab 91ab d 3a1081
91ab 91ab s 				LD		A, (redGhostX)
91ae 91ae d 3c
91ae 91ae s 				INC		A
91af 91af d e61f
91af 91af s 				AND		00011111B
91b1 91b1 d 4f
91b1 91b1 s 				LD		C,A
91b2 91b2 d 3a1181
91b2 91b2 s 				LD		A,(redGhostY)
91b5 91b5 d 47
91b5 91b5 s 				LD		B,A
91b6 91b6 d 1800
91b6 91b6 s 				JR		redGhostPathFind
91b8 91b8 s 
91b8 91b8 s redGhostPathFind:
91b8 91b8 d cd5292
91b8 91b8 s 				CALL	getAddressPF
91bb 91bb d 3a1381
91bb 91bb s 				LD		A,(ghostDis)
91be 91be d 5e
91be 91be s 				LD		E,(HL)
91bf 91bf d bb
91bf 91bf s 				CP		E
91c0 91c0 d d2c591
91c0 91c0 s 				JP		NC,redGhostSetNewDir
91c3 91c3 d f1
91c3 91c3 s 				POP		AF
91c4 91c4 d c9
91c4 91c4 s 				RET
91c5 91c5 s redGhostSetNewDir:
91c5 91c5 d 7b
91c5 91c5 s 				LD		A,E
91c6 91c6 d 321381
91c6 91c6 s 				LD		(ghostDis),A
91c9 91c9 d f1
91c9 91c9 s 				POP		AF
91ca 91ca d 321281
91ca 91ca s 				LD		(redGhostDir),A
91cd 91cd d c9
91cd 91cd s 				RET
91ce 91ce s 
91ce 91ce s 
91ce 91ce d 1b5b39316d4d1b5b306d00
91ce 91ce s redGhost:		.BYTE	1BH,"[91mM",1BH,"[0m",0
91d9 91d9 d 1b5b39326d4d1b5b306d00
91d9 91d9 s greenGhost:		.BYTE	1BH,"[92mM",1BH,"[0m",0
91e4 91e4 d 1b5b33366d4d1b5b306d00
91e4 91e4 s blueGhost:		.BYTE	1BH,"[36mM",1BH,"[0m",0
91ef 91ef f main.asm
91ef 91ef d 1b5b39356d4d1b5b306d00
91ef 91ef s pinkGhost:		.BYTE	1BH,"[95mM",1BH,"[0m",0
91fa 91fa s ;-----------Spesific Libs -----;
91fa 91fa s include movelibs.asm	
91fa 91fa f movelibs.asm
91fa 91fa s move:
91fa 91fa d fe57
91fa 91fa s 				CP		'W'
91fc 91fc d 280a
91fc 91fc s 				JR		Z,moveU
91fe 91fe d fe41
91fe 91fe s 				CP		'A'
9200 9200 d 2812
9200 9200 s 				JR		Z,moveL
9202 9202 d fe53
9202 9202 s 				CP		'S'
9204 9204 d 2808
9204 9204 s 				JR		Z,moveD
9206 9206 d 1812
9206 9206 s 				JR		moveR
9208 9208 s 
9208 9208 s moveU:			
9208 9208 d 0a
9208 9208 s 				LD		A, (BC)
9209 9209 d 3d
9209 9209 s 				DEC		A
920a 920a d e61f
920a 920a s 				AND		00011111B
920c 920c d 02
920c 920c s 				LD		(BC),A
920d 920d d c9
920d 920d s 				RET
920e 920e s moveD:			
920e 920e d 0a
920e 920e s 				LD		A, (BC)
920f 920f d 3c
920f 920f s 				INC		A
9210 9210 d e61f
9210 9210 s 				AND		00011111B
9212 9212 d 02
9212 9212 s 				LD		(BC),A
9213 9213 d c9
9213 9213 s 				RET
9214 9214 s moveL:			
9214 9214 d 1a
9214 9214 s 				LD		A, (DE)
9215 9215 d 3d
9215 9215 s 				DEC		A
9216 9216 d e61f
9216 9216 s 				AND		00011111B
9218 9218 d 12
9218 9218 s 				LD		(DE),A
9219 9219 d c9
9219 9219 s 				RET
921a 921a s moveR:			
921a 921a d 1a
921a 921a s 				LD		A, (DE)
921b 921b d 3c
921b 921b s 				INC		A
921c 921c d e61f
921c 921c s 				AND		00011111B
921e 921e d 12
921e 921e s 				LD		(DE),A
921f 921f d c9
921f 921f s 				RET
9220 9220 s isMoveValid:
9220 9220 d fe57
9220 9220 s 				CP		'W'
9222 9222 d 280a
9222 9222 s 				JR		Z,moveUValid
9224 9224 d fe41
9224 9224 s 				CP		'A'
9226 9226 d 280c
9226 9226 s 				JR		Z,moveLValid
9228 9228 d fe53
9228 9228 s 				CP		'S'
922a 922a d 2805
922a 922a s 				JR		Z,moveDValid
922c 922c d 1809
922c 922c s 				JR		moveRValid
922e 922e s moveUValid:			
922e 922e d cb42
922e 922e s 				BIT		upBit,D
9230 9230 d c9
9230 9230 s 				RET
9231 9231 s moveDValid:			
9231 9231 d cb4a
9231 9231 s 				BIT		downBit,D
9233 9233 d c9
9233 9233 s 				RET
9234 9234 s moveLValid:			
9234 9234 d cb52
9234 9234 s 				BIT		leftBit,D
9236 9236 d c9
9236 9236 s 				RET
9237 9237 s moveRValid:			
9237 9237 d cb5a
9237 9237 s 				BIT		rightBit,D
9239 9239 f main.asm
9239 9239 d c9
9239 9239 s 				RET
923a 923a s include	mapLibs.asm	
923a 923a f mapLibs.asm
923a 923a s pathFindDepth   .EQU	30H
923a 923a s 
923a 923a s ;------- Get Map Data ----;
923a 923a s ; C - X
923a 923a s ; B	- Y
923a 923a s getMapAddress:
923a 923a d c5
923a 923a s 				push	bc
923b 923b d cb00
923b 923b s 				rlc		b			;Shift b left 5
923d 923d d cb00
923d 923d s 				rlc		b			;Shift b left 5
923f 923f d cb00
923f 923f s 				rlc		b			;Shift b left 5
9241 9241 d cb00
9241 9241 s 				rlc		b			;Shift b left 5
9243 9243 d cb00
9243 9243 s 				rlc		b			;Shift b left 5
9245 9245 d 78
9245 9245 s 				ld		a,b
9246 9246 d e6e0
9246 9246 s 				and		11100000b	;Mask lower adress
9248 9248 d b1
9248 9248 s 				or		c			;Combine with C
9249 9249 d 6f
9249 9249 s 				ld		l,a			;A is now low byte of adress
924a 924a d 78
924a 924a s 				ld		a,b
924b 924b d e603
924b 924b s 				and		00000011b	;Mask upper adress
924d 924d d f6e0
924d 924d s 				or		0E0H		;Start of map
924f 924f d 67
924f 924f s 				ld		h,a
9250 9250 d c1
9250 9250 s 				pop		bc
9251 9251 d c9
9251 9251 s 				ret
9252 9252 s 
9252 9252 s ;------- Get Path Find Map Address----;
9252 9252 s ; C - X
9252 9252 s ; B	- Y
9252 9252 s getAddressPF:
9252 9252 d c5
9252 9252 s 				push	bc
9253 9253 d cb00
9253 9253 s 				rlc		b			;Shift b left 5
9255 9255 d cb00
9255 9255 s 				rlc		b			;Shift b left 5
9257 9257 d cb00
9257 9257 s 				rlc		b			;Shift b left 5
9259 9259 d cb00
9259 9259 s 				rlc		b			;Shift b left 5
925b 925b d cb00
925b 925b s 				rlc		b			;Shift b left 5
925d 925d d 78
925d 925d s 				ld		a,b
925e 925e d e6e0
925e 925e s 				and		11100000b	;Mask lower adress
9260 9260 d b1
9260 9260 s 				or		c			;Combine with C
9261 9261 d 6f
9261 9261 s 				ld		l,a			;A is now low byte of adress
9262 9262 d 78
9262 9262 s 				ld		a,b
9263 9263 d e603
9263 9263 s 				and		00000011b	;Mask upper adress
9265 9265 d f6d0
9265 9265 s 				or		0D0H		;Start of map
9267 9267 d 67
9267 9267 s 				ld		h,a
9268 9268 d c1
9268 9268 s 				pop		bc
9269 9269 d c9
9269 9269 s 				ret
926a 926a s 
926a 926a s 
926a 926a s ;--------- Map print -------- ;
926a 926a s ; C - X
926a 926a s ; B	- Y
926a 926a s printMapAt:	
926a 926a d c5
926a 926a s 			PUSH	BC
926b 926b d 0c
926b 926b s 			INC		C
926c 926c d 69
926c 926c s 			LD		L,C
926d 926d d 2600
926d 926d s 			LD		H, $00			;We dont care about msb
926f 926f d e5
926f 926f s 			PUSH	HL
9270 9270 d 04
9270 9270 s 			INC		B
9271 9271 d 68
9271 9271 s 			LD		L,B
9272 9272 d 2600
9272 9272 s 			LD		H, $00			;Again we dont care
9274 9274 d e5
9274 9274 s 			PUSH	HL
9275 9275 d cddb93
9275 9275 s 			CALL	moveCursor
9278 9278 d c1
9278 9278 s 			POP 	BC
9279 9279 d cd3a92
9279 9279 s 			CALL	getMapAddress
927c 927c d 7e
927c 927c s 			LD		A,(HL)
927d 927d d cd9c92
927d 927d s 			CALL	pmChar
9280 9280 d c9
9280 9280 s 			RET
9281 9281 s 
9281 9281 s printMap:
9281 9281 d 3e20
9281 9281 s 				ld		a,32
9283 9283 d 47
9283 9283 s 				ld		b,a			; 32 chars per line
9284 9284 d 4f
9284 9284 s 				ld		c,a			; 32 lines per map
9285 9285 d 2100e0
9285 9285 s 				ld		hl,map
9288 9288 d 7e
9288 9288 s pmLoop:			ld		a,(hl)		; get char
9289 9289 d cd9c92
9289 9289 s 				call	pmChar		; decode what to print
928c 928c d 23
928c 928c s 				inc		hl			; next char
928d 928d d 10f9
928d 928d s 				djnz	pmLoop		; if were not at the end of a line, print next char
928f 928f d cdd293
928f 928f s 				call	newline		; if we are, print a new line
9292 9292 d 41
9292 9292 s 				ld		b,c			;are we at the end of a block
9293 9293 d 1001
9293 9293 s 				djnz	pmNextLine
9295 9295 d c9
9295 9295 s 				ret
9296 9296 s pmNextLine:	
9296 9296 d 48
9296 9296 s 				ld		c,b			;copy decremented b back to c
9297 9297 d 3e20
9297 9297 s 				ld 		a,32		;refill b withj 32
9299 9299 d 47
9299 9299 s 				ld		b,a
929a 929a d 18ec
929a 929a s 				jr		pmLoop		;draw next char
929c 929c s 
929c 929c s 
929c 929c s pmChar:		;-- Print map char a
929c 929c d e5
929c 929c s 				push	hl
929d 929d d cb67
929d 929d s 				bit		powerpBit,a
929f 929f d 200e
929f 929f s 				jr		nz,printPP
92a1 92a1 d cb6f
92a1 92a1 s 				bit		pelletBit,a
92a3 92a3 d 2012
92a3 92a3 s 				jr		nz,printP
92a5 92a5 d cb77
92a5 92a5 s 				bit		wallBit,a
92a7 92a7 d 2016
92a7 92a7 s 				jr		nz,printWall
92a9 92a9 d cb7f
92a9 92a9 s 				bit		sfBit,a
92ab 92ab d 201a
92ab 92ab s 				jr		nz,printSF
92ad 92ad d 1820
92ad 92ad s 				jr	 	printVoid
92af 92af s 			
92af 92af s printPP:
92af 92af d 216894
92af 92af s 				ld		hl,powerPellet
92b2 92b2 d cd4b94
92b2 92b2 s 				call	print
92b5 92b5 d 1820
92b5 92b5 s 				jr		pmCharRet
92b7 92b7 s printP:
92b7 92b7 d 217394
92b7 92b7 s 				ld		hl,pellet
92ba 92ba d cd4b94
92ba 92ba s 				call	print
92bd 92bd d 1818
92bd 92bd s 				jr		pmCharRet
92bf 92bf s printWall:
92bf 92bf d 215d94
92bf 92bf s 				ld		hl,wall
92c2 92c2 d cd4b94
92c2 92c2 s 				call	print
92c5 92c5 d 1810
92c5 92c5 s 				jr		pmCharRet
92c7 92c7 s printSF:
92c7 92c7 d 217e94
92c7 92c7 s 				ld		hl,superFruit
92ca 92ca d cd4b94
92ca 92ca s 				call	print
92cd 92cd d 1808
92cd 92cd s 				jr		pmCharRet
92cf 92cf s printVoid:
92cf 92cf d 219c94
92cf 92cf s 				ld		hl,void
92d2 92d2 d cd4b94
92d2 92d2 s 				call	print
92d5 92d5 d 1800
92d5 92d5 s 				jr		pmCharRet
92d7 92d7 s pmCharRet:	
92d7 92d7 d e1
92d7 92d7 s 				pop 	hl
92d8 92d8 d c9
92d8 92d8 s 				ret
92d9 92d9 s 				
92d9 92d9 s ;-------- Path Find Map -------;
92d9 92d9 s ;Initi Path Find Map
92d9 92d9 s initPathFind:
92d9 92d9 d 3e20
92d9 92d9 s 				ld		a,32
92db 92db d 47
92db 92db s 				ld		b,a			; 32 chars per line
92dc 92dc d 4f
92dc 92dc s 				ld		c,a			; 32 lines per map
92dd 92dd d 2100d0
92dd 92dd s 				ld		hl,pathFindMap
92e0 92e0 d 16ff
92e0 92e0 s initpPFLoop:	ld		D,0FFH		; set char
92e2 92e2 d 72
92e2 92e2 s 				LD		(HL),D
92e3 92e3 d 23
92e3 92e3 s 				inc		hl			; next char
92e4 92e4 d 10fa
92e4 92e4 s 				djnz	initpPFLoop		; if were not at the end of a line, print next char
92e6 92e6 d 41
92e6 92e6 s 				ld		b,c			;are we at the end of a block
92e7 92e7 d 1001
92e7 92e7 s 				djnz	pfNextRow
92e9 92e9 d c9
92e9 92e9 s 				ret
92ea 92ea s pfNextRow:	
92ea 92ea d 48
92ea 92ea s 				ld		c,b			;copy decremented b back to c
92eb 92eb d 3e20
92eb 92eb s 				ld 		a,32		;refill b withj 32
92ed 92ed d 47
92ed 92ed s 				ld		b,a
92ee 92ee d c3e092
92ee 92ee s 				jp		initpPFLoop		;draw next char
92f1 92f1 s 
92f1 92f1 s ;Calculate Map
92f1 92f1 s calculatePathMap:
92f1 92f1 d 01ffff
92f1 92f1 s 				ld		BC,0FFFFH		;Push Stack terminator		
92f4 92f4 d c5
92f4 92f4 s 				PUSH	BC
92f5 92f5 d 3a0081
92f5 92f5 s 				LD		A, (pacx)		;Push X to stack
92f8 92f8 d 4f
92f8 92f8 s 				LD		C,A
92f9 92f9 d 3a0181
92f9 92f9 s 				LD		A, (pacy)		;Push Y to stack
92fc 92fc d 47
92fc 92fc s 				LD		B,A
92fd 92fd d cd5292
92fd 92fd s 				CALL	getAddressPF
9300 9300 d 3600
9300 9300 s 				LD		(HL),00H
9302 9302 d c5
9302 9302 s 				PUSH	BC
9303 9303 s calculatePathMapLoop:
9303 9303 d c1
9303 9303 s 				POP		BC			;Get node to visit
9304 9304 d 78
9304 9304 s 				LD		A,B			;Check Its not FFFF
9305 9305 d b7
9305 9305 s 				OR		A
9306 9306 d feff
9306 9306 s 				CP		0FFH
9308 9308 d c8
9308 9308 s 				RET		Z			;We only have to check half the byte as its imposable to have a cord more than 20h
9309 9309 d ed43f289
9309 9309 s 				LD		(originalBC),BC
930d 930d d cd5292
930d 930d s 				CALL	getAddressPF
9310 9310 d 7e
9310 9310 s 				LD		A,(HL)
9311 9311 d 3c
9311 9311 s 				INC		A
9312 9312 d fe30
9312 9312 s                 CP      pathFindDepth
9314 9314 d ca0393
9314 9314 s 				JP 		Z,calculatePathMapLoop	;Skip if wer getting too long
9317 9317 d 5f
9317 9317 s 				LD		E,A			;Keep the distance were working with safe
9318 9318 d cd3a92
9318 9318 s 				CALL	getMapAddress
931b 931b d 56
931b 931b s 				LD		D,(HL)
931c 931c d 3e57
931c 931c s 				LD		A,	'W'			;check up
931e 931e d cd2092
931e 931e s 				CALL	isMoveValid
9321 9321 d c43f93
9321 9321 s 				CALL	NZ,calculateMapU
9324 9324 d 3e53
9324 9324 s 				LD		A,	'S'			;down
9326 9326 d cd2092
9326 9326 s 				CALL	isMoveValid
9329 9329 d c44b93
9329 9329 s 				CALL	NZ,calculateMapD
932c 932c d 3e41
932c 932c s 				LD		A,	'A'			;left
932e 932e d cd2092
932e 932e s 				CALL	isMoveValid
9331 9331 d c45793
9331 9331 s 				CALL	NZ,calculateMapL
9334 9334 d 3e44
9334 9334 s 				LD		A,	'D'			;right
9336 9336 d cd2092
9336 9336 s 				CALL	isMoveValid
9339 9339 d c46393
9339 9339 s 				CALL	NZ,calculateMapR
933c 933c d c30393
933c 933c s 				JP		calculatePathMapLoop
933f 933f s 				
933f 933f s calculateMapU:	
933f 933f d ed4bf289
933f 933f s 				LD		BC,(originalBC)			;We want to preserve the OG BC Through this process so it can be used again in sub directions		
9343 9343 d 78
9343 9343 s 				LD		A, B				;Make modifications to corod
9344 9344 d 3d
9344 9344 s 				DEC		A
9345 9345 d e61f
9345 9345 s 				AND		00011111B			;Mask for looping
9347 9347 d 47
9347 9347 s 				LD		B,A
9348 9348 d c36f93
9348 9348 s 				JP		calculateMapCell
934b 934b s calculateMapD:	
934b 934b d ed4bf289
934b 934b s 				LD		BC,(originalBC)	
934f 934f d 78
934f 934f s 				LD		A, B
9350 9350 d 3c
9350 9350 s 				INC		A
9351 9351 d e61f
9351 9351 s 				AND		00011111B
9353 9353 d 47
9353 9353 s 				LD		B,A
9354 9354 d c36f93
9354 9354 s 				JP		calculateMapCell
9357 9357 s calculateMapL:	
9357 9357 d ed4bf289
9357 9357 s 				LD		BC,(originalBC)
935b 935b d 79
935b 935b s 				LD		A, C
935c 935c d 3d
935c 935c s 				DEC		A
935d 935d d e61f
935d 935d s 				AND		00011111B
935f 935f d 4f
935f 935f s 				LD		C,A
9360 9360 d c36f93
9360 9360 s 				JP		calculateMapCell
9363 9363 s calculateMapR:
9363 9363 d ed4bf289
9363 9363 s 				LD		BC,(originalBC)
9367 9367 d 79
9367 9367 s 				LD		A, C
9368 9368 d 3c
9368 9368 s 				INC		A
9369 9369 d e61f
9369 9369 s 				AND		00011111B
936b 936b d 4f
936b 936b s 				LD		C,A
936c 936c d c36f93
936c 936c s 				JP		calculateMapCell
936f 936f s 
936f 936f s calculateMapCell:
936f 936f d cd5292
936f 936f s 				CALL	getAddressPF
9372 9372 d 7e
9372 9372 s 				LD		A,(HL)
9373 9373 s 
9373 9373 d bb
9373 9373 s 				CP		E			;Compare current data (A) with E (the path were looking at)
9374 9374 d d8
9374 9374 s 				RET		C			;If carry is set (A < E)(whats there already < our path) then this route is a dud
9375 9375 d c8
9375 9375 s 				RET		Z			;If its equal we dont want to continue as we alreay have an equally fast route
9376 9376 d 73
9376 9376 s 				LD		(HL),E
9377 9377 d e1
9377 9377 s 				POP		HL			;We need the return adress on the top of the stack
9378 9378 d c5
9378 9378 s 				PUSH	BC			;Push Cell so it can be visited
9379 9379 d e5
9379 9379 s 				PUSH	HL
937a 937a d c9
937a 937a s 				RET
937b 937b s 
937b 937b s printPFMap:
937b 937b d 210100
937b 937b s                 LD		HL, $01
937e 937e d e5
937e 937e s 				PUSH	HL
937f 937f d 211a00
937f 937f s 				LD		HL, $1A
9382 9382 d e5
9382 9382 s 				PUSH	HL
9383 9383 d cddb93
9383 9383 s 				CALL	moveCursor
9386 9386 d 3e20
9386 9386 s 				ld		a,32
9388 9388 d 47
9388 9388 s 				ld		b,a			; 32 chars per line
9389 9389 d 3e1a
9389 9389 s                 ld		a,$1A
938b 938b d 4f
938b 938b s 				ld		c,a			; 32 lines per map
938c 938c d 2100d0
938c 938c s 				ld		hl,pathFindMap
938f 938f d 7e
938f 938f s pmPFLoop:		ld		a,(hl)		; get char
9390 9390 d feff
9390 9390 s                 cp      0FFH
9392 9392 d caab93
9392 9392 s                 JP      Z,pmPFSkip
9395 9395 d cd1d94
9395 9395 s 				call	NumToHex	; decode what to print
9398 9398 d 3e20
9398 9398 s pmPFAfterSkip:  ld      a,' '
939a 939a d cf
939a 939a s                 rst     08H
939b 939b d 23
939b 939b s 				inc		hl			; next char
939c 939c d 10f1
939c 939c s 				djnz	pmPFLoop		; if were not at the end of a line, print next char
939e 939e d cdd293
939e 939e s 				call	newline		; if we are, print a new line
93a1 93a1 d 41
93a1 93a1 s 				ld		b,c			;are we at the end of a block
93a2 93a2 d 1001
93a2 93a2 s 				djnz	pmPFNextLine
93a4 93a4 d c9
93a4 93a4 s 				ret
93a5 93a5 s pmPFNextLine:	
93a5 93a5 d 48
93a5 93a5 s 				ld		c,b			;copy decremented b back to c
93a6 93a6 d 3e20
93a6 93a6 s 				ld 		a,32		;refill b withj 32
93a8 93a8 d 47
93a8 93a8 s 				ld		b,a
93a9 93a9 d 18e4
93a9 93a9 s 				jr		pmPFLoop	;draw next char
93ab 93ab s pmPFSkip:       
93ab 93ab d 3e20
93ab 93ab s                 ld      a,' '
93ad 93ad d cf
93ad 93ad s                 rst     08H
93ae 93ae d 3e20
93ae 93ae s                 ld      a,' '
93b0 93b0 d cf
93b0 93b0 s                 rst     08H
93b1 93b1 f main.asm
93b1 93b1 d c39893
93b1 93b1 s                 JP      pmPFAfterSkip
93b4 93b4 s 
93b4 93b4 s ;------HUD;
93b4 93b4 s include hud.asm
93b4 93b4 f hud.asm
93b4 93b4 s score			.EQU	8900H		;Score
93b4 93b4 s 
93b4 93b4 s printScore:					
93b4 93b4 d 210200
93b4 93b4 s 				LD		HL, $02
93b7 93b7 d e5
93b7 93b7 s 				PUSH	HL
93b8 93b8 d 212300
93b8 93b8 s 				LD		HL, $23
93bb 93bb d e5
93bb 93bb s 				PUSH	HL
93bc 93bc d cddb93
93bc 93bc s 				CALL	moveCursor
93bf 93bf d 218994
93bf 93bf s 				LD		HL, scoreHUD
93c2 93c2 d cd4b94
93c2 93c2 s 				CALL 	print
93c5 93c5 d 2a0089
93c5 93c5 s 				LD		HL, (score)
93c8 93c8 d cdf293
93c8 93c8 s 				CALL	HLToDec
93cb 93cb d 3e0a
93cb 93cb s 				LD		A,LF
93cd 93cd d cf
93cd 93cd s 				RST     08H
93ce 93ce d 3e0d
93ce 93ce s 				LD		A,CR
93d0 93d0 d cf
93d0 93d0 s 				RST     08H
93d1 93d1 f main.asm
93d1 93d1 d c9
93d1 93d1 s 				RET
93d2 93d2 s 			
93d2 93d2 s ;------- Libs ------------;
93d2 93d2 s include libs.asm
93d2 93d2 f libs.asm
93d2 93d2 s seed			.EQU	8888H		;Random seed
93d2 93d2 s 
93d2 93d2 s newline:			
93d2 93d2 d f5
93d2 93d2 s 				push 	af
93d3 93d3 d 3e0d
93d3 93d3 s 				ld		a, CR
93d5 93d5 d cf
93d5 93d5 s 				rst 	08H
93d6 93d6 d 3e0a
93d6 93d6 s 				ld		a, LF
93d8 93d8 d cf
93d8 93d8 s 				rst 	08H
93d9 93d9 d f1
93d9 93d9 s 				pop 	af
93da 93da d c9
93da 93da s 				ret
93db 93db s 			
93db 93db s ;move cursor to (sp,sp-2)				
93db 93db s moveCursor:		
93db 93db d d1
93db 93db s 				POP		DE
93dc 93dc d 3e1b
93dc 93dc s 				LD		A,$1B
93de 93de d cf
93de 93de s 				RST     08H
93df 93df d 3e5b
93df 93df s 				LD		A,'['
93e1 93e1 d cf
93e1 93e1 s 				RST     08H
93e2 93e2 d e1
93e2 93e2 s 				POP		HL
93e3 93e3 d cdf293
93e3 93e3 s 				CALL	HLToDec
93e6 93e6 d 3e3b
93e6 93e6 s 				LD		A,$3B
93e8 93e8 d cf
93e8 93e8 s 				RST     08H
93e9 93e9 d e1
93e9 93e9 s 				POP		HL
93ea 93ea d cdf293
93ea 93ea s 				CALL	HLToDec
93ed 93ed d 3e66
93ed 93ed s 				LD		A,'f'
93ef 93ef d cf
93ef 93ef s 				RST     08H
93f0 93f0 d d5
93f0 93f0 s 				PUSH	DE
93f1 93f1 d c9
93f1 93f1 s 				RET
93f2 93f2 s 
93f2 93f2 s ;Prints	hl as decimal			
93f2 93f2 s HLToDec:
93f2 93f2 d f5
93f2 93f2 s 				PUSH	AF
93f3 93f3 d c5
93f3 93f3 s 				PUSH	BC
93f4 93f4 d cdfa93
93f4 93f4 s 				CALL	DispHL
93f7 93f7 d c1
93f7 93f7 s 				POP		BC
93f8 93f8 d f1
93f8 93f8 s 				POP		AF
93f9 93f9 d c9
93f9 93f9 s 				RET
93fa 93fa s DispHL:
93fa 93fa d 01f0d8
93fa 93fa s 				ld		bc,-10000
93fd 93fd d cd1394
93fd 93fd s 				call	Num1
9400 9400 d 0118fc
9400 9400 s 				ld		bc,-1000
9403 9403 d cd1394
9403 9403 s 				call	Num1
9406 9406 d 019cff
9406 9406 s 				ld		bc,-100
9409 9409 d cd1394
9409 9409 s 				call	Num1
940c 940c d 0ef6
940c 940c s 				ld		c,-10
940e 940e d cd1394
940e 940e s 				call	Num1
9411 9411 d 0eff
9411 9411 s 				ld		c,-1
9413 9413 d 3e2f
9413 9413 s Num1:			ld		a,'0'-1
9415 9415 d 3c
9415 9415 s Num2:			inc		a
9416 9416 d 09
9416 9416 s 				add		hl,bc
9417 9417 d 38fc
9417 9417 s 				jr		c,Num2
9419 9419 d ed42
9419 9419 s 				sbc		hl,bc
941b 941b d cf
941b 941b s 				RST     08H
941c 941c d c9
941c 941c s 				ret
941d 941d s ;Print A as HEX				
941d 941d s NumToHex:    	
941d 941d d c5
941d 941d s 				push	bc
941e 941e d 4f
941e 941e s 				ld 		c, a   		; a = number to convert
941f 941f d cd2a94
941f 941f s             	call 	Num1H
9422 9422 d cf
9422 9422 s             	RST     08H
9423 9423 d 79
9423 9423 s             	ld 		a, c
9424 9424 d cd2e94
9424 9424 s             	call 	Num2H
9427 9427 d cf
9427 9427 s             	RST     08H
9428 9428 d c1
9428 9428 s 				pop		bc
9429 9429 d c9
9429 9429 s             	ret
942a 942a s 
942a 942a d 1f
942a 942a s Num1H:        	rra
942b 942b d 1f
942b 942b s             	rra
942c 942c d 1f
942c 942c s             	rra
942d 942d d 1f
942d 942d s            		rra
942e 942e d f6f0
942e 942e s Num2H:        	or 		$F0
9430 9430 d 27
9430 9430 s             	daa
9431 9431 d c6a0
9431 9431 s             	add 	a, $A0
9433 9433 d ce40
9433 9433 s             	adc 	a, $40 		; Ascii hex at this point (0 to F)   
9435 9435 d c9
9435 9435 s             	ret
9436 9436 s 
9436 9436 s ;Get ABS of A
9436 9436 s absA:
9436 9436 d b7
9436 9436 s      or a
9437 9437 d f0
9437 9437 s      ret p
9438 9438 d ed44
9438 9438 s      neg
943a 943a d c9
943a 943a s      ret
943b 943b s 
943b 943b s ;getArAndomA	 
943b 943b s randomA:				
943b 943b d 3a8888
943b 943b s 				ld a, 	(seed)
943e 943e d 47
943e 943e s 				ld b, 	a 
943f 943f s 
943f 943f d 0f
943f 943f s 				rrca ; multiply by 32
9440 9440 d 0f
9440 9440 s 				rrca
9441 9441 d 0f
9441 9441 s 				rrca
9442 9442 d ee1f
9442 9442 s 				xor $1f
9444 9444 s 
9444 9444 d 80
9444 9444 s 				add 	a, b
9445 9445 d deff
9445 9445 s 				sbc a, 255 ; carry
9447 9447 s 
9447 9447 d 328888
9447 9447 s 				ld (seed), a
944a 944a d c9
944a 944a s 				ret
944b 944b s 
944b 944b s ;------- Print string
944b 944b d f5
944b 944b s print:			PUSH 	AF				; Preserve AF				
944c 944c d 7e
944c 944c s printLoop:      LD      A,(HL)          ; Get character
944d 944d d b7
944d 944d s                 OR      A               ; Is it $00 ?
944e 944e d 2804
944e 944e s                 JR     	Z,printRet      ; Then RETurn on terminator
9450 9450 d cf
9450 9450 s                 RST     08H             ; Print it
9451 9451 d 23
9451 9451 s                 INC     HL              ; Next Character
9452 9452 d 18f8
9452 9452 s                 JR      printLoop       ; Continue until $00
9454 9454 s 				
9454 9454 s ;delay loop
9454 9454 s printRet:		
9454 9454 d f1
9454 9454 s 				POP		AF
9455 9455 d c9
9455 9455 s 				RET
9456 9456 s delay:
9456 9456 d 00
9456 9456 s 				NOP
9457 9457 d 0b
9457 9457 s 				DEC 	BC
9458 9458 d 78
9458 9458 s 				LD 		A,B
9459 9459 d b1
9459 9459 s 				OR 		C
945a 945a d c8
945a 945a s 				RET 	Z
945b 945b f main.asm
945b 945b d 18f9
945b 945b s 				JR 		delay
945d 945d s 
945d 945d s ;Strings
945d 945d d 1b5b33346d231b5b306d00
945d 945d s wall:			.BYTE	1BH,"[34m#",1BH,"[0m",0
9468 9468 d 1b5b39376d6f1b5b306d00
9468 9468 s powerPellet:	.BYTE	1BH,"[97mo",1BH,"[0m",0
9473 9473 d 1b5b33376d2a1b5b306d00
9473 9473 s pellet:			.BYTE	1BH,"[37m*",1BH,"[0m",0
947e 947e d 1b5b33316d401b5b306d00
947e 947e s superFruit:		.BYTE	1BH,"[31m@",1BH,"[0m",0
9489 9489 s 
9489 9489 d 53636f72653a2000
9489 9489 s scoreHUD:     	.BYTE "Score: ",0
9491 9491 s 
9491 9491 d 1b5b39336d431b5b306d00
9491 9491 s pacman:			.BYTE	1BH,"[93mC",1BH,"[0m",0
949c 949c s 
949c 949c d 2000
949c 949c s void:			.BYTE	" ",0
949e 949e s 
949e 949e d 1b5b481b5b324a00
949e 949e s cls:      	  	.BYTE 1BH,"[H",1BH,"[2J",0
94a6 94a6 s ;-----Path find map
d000 d000 s 	.ORG 0D000H
d000 d000 s pathFindMap:
d000 d000 s ;----- Map ------		
e000 e000 s 	.ORG 0E000H
e000 e000 f main.asm
e000 e000 s 	include map.asm
e000 e000 f map.asm
e000 e000 s ;----- Map data bit positions
e000 e000 s upBit			.EQU	0
e000 e000 s downBit			.EQU	1
e000 e000 s leftBit			.EQU	2
e000 e000 s rightBit		.EQU	3
e000 e000 s powerpBit		.EQU	4
e000 e000 s pelletBit		.EQU	5
e000 e000 s wallBit			.EQU	6
e000 e000 s sfBit			.EQU	7
e000 e000 s 
e000 e000 s ;----Pellet
e000 e000 s ww 		.EQU	40H
e000 e000 s 
e000 e000 s hp 		.EQU	2CH		;left 	right	pellet
e000 e000 s gp		.EQU	23H		;up		down	pellet
e000 e000 s 
e000 e000 s lp		.EQU	26H		;down 	left 	pellet
e000 e000 s rp		.EQU	2AH		;down 	right	pellet
e000 e000 s up		.EQU	25H		;up 	left	pellet
e000 e000 s dp		.EQU	29H		;up 	right	pellet
e000 e000 s 
e000 e000 s bp		.EQU	2BH		;up		down	right	pellet
e000 e000 s cp		.EQU	27H		;up		down	left	pellet
e000 e000 s vp		.EQU	2EH		;down	left	right	pellet
e000 e000 s kp		.EQU	2DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xp		.EQU	2FH		;all	pellet
e000 e000 s ;------- No pellet
e000 e000 s hn 		.EQU	0CH		;left 	right	pellet
e000 e000 s gn		.EQU	03H		;up		down	pellet
e000 e000 s 
e000 e000 s ln		.EQU	06H		;down 	left 	pellet
e000 e000 s rn		.EQU	0AH		;down 	right	pellet
e000 e000 s un		.EQU	05H		;up 	left	pellet
e000 e000 s dn		.EQU	09H		;up 	right	pellet
e000 e000 s 
e000 e000 s bn		.EQU	0BH		;up		down	right	pellet
e000 e000 s cn		.EQU	07H		;up		down	left	pellet
e000 e000 s vn		.EQU	0EH		;down	left	right	pellet
e000 e000 s kn		.EQU	0DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xn		.EQU	0FH		;all	pellet
e000 e000 s ;--------Power Pellet
e000 e000 s hs 		.EQU	1CH		;left 	right	pellet
e000 e000 s gs		.EQU	13H		;up		down	pellet
e000 e000 s 
e000 e000 s ls		.EQU	16H		;down 	left 	pellet
e000 e000 s rs		.EQU	1AH		;down 	right	pellet
e000 e000 s us		.EQU	15H		;up 	left	pellet
e000 e000 s ds		.EQU	19H		;up 	right	pellet
e000 e000 s 
e000 e000 s bs		.EQU	1BH		;up		down	right	pellet
e000 e000 s cs		.EQU	17H		;up		down	left	pellet
e000 e000 s vs		.EQU	1EH		;down	left	right	pellet
e000 e000 s ks		.EQU	1DH		;up		left	right	pellet
e000 e000 s 
e000 e000 s xs		.EQU	1FH		;all	pellet
e000 e000 s 
e000 e000 s 
e000 e000 d 0000404040404040404040404040404040404040404040404040404040400000
e000 e000 s map:	.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
e020 e020 d 0000402a2c2c2c2c2e2c2c2c2c2c2640402a2c2c2c2c2c2e2c2c2c2c26400000
e020 e020 s 		.BYTE	00,00,ww,rp,hp,hp,hp,hp,vp,hp,hp,hp,hp,hp,lp,ww,ww,rp,hp,hp,hp,hp,hp,vp,hp,hp,hp,hp,lp,ww,00,00
e040 e040 d 0000401340404040234040404040234040234040404040234040404013400000
e040 e040 s 		.BYTE	00,00,ww,gs,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gs,ww,00,00
e060 e060 d 0000402340404040234040404040234040234040404040234040404023400000
e060 e060 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e080 e080 d 0000402b2c2c2c2c2f2c2c2e2c2c2d2c2c2d2c2c2e2c2c2f2c2c2c2c27400000
e080 e080 s 		.BYTE	00,00,ww,bp,hp,hp,hp,hp,xp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,xp,hp,hp,hp,hp,cp,ww,00,00
e0a0 e0a0 d 0000402340404040234040234040404040404040234040234040404023400000
e0a0 e0a0 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e0c0 e0c0 d 000040292c2c2c2c274040292c2c2640402a2c2c2540402b2c2c2c2c25400000
e0c0 e0c0 s 		.BYTE	00,00,ww,dp,hp,hp,hp,hp,cp,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,bp,hp,hp,hp,hp,up,ww,00,00
e0e0 e0e0 d 0000404040404040234040404040034040034040404040234040404040400000
e0e0 e0e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gn,ww,ww,gn,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
e100 e100 d 00000000000000402340400a0c0c0d0c0c0d0c0c064040234000000000000000
e100 e100 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,rn,hn,hn,kn,hn,hn,kn,hn,hn,ln,ww,ww,gp,ww,00,00,00,00,00,00,00
e120 e120 d 0000000000000040234040034040400000404040034040234000000000000000
e120 e120 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,00,00,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
e140 e140 d 4040404040404040234040034000000000000040034040234040404040404040
e140 e140 s 		.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
e160 e160 d 0c0c0c0c0c0c0c0c2f0c0c0740000000000000400b0c0c2f0c0c0c0c0c0c0c0c
e160 e160 s 		.BYTE	hn,hn,hn,hn,hn,hn,hn,hn,xp,hn,hn,cn,ww,00,00,00,00,00,00,ww,bn,hn,hn,xp,hn,hn,hn,hn,hn,hn,hn,hn
e180 e180 d 4040404040404040234040034000000000000040034040234040404040404040
e180 e180 s 		.BYTE	ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,00,00,00,00,00,00,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww
e1a0 e1a0 d 0000000000000040234040034040404040404040034040234000000000000000
e1a0 e1a0 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,00,00,00,00,00,00,00
e1c0 e1c0 d 00000000000000402340400b0c0c0c0c0c0c0c0c074040234000000000000000
e1c0 e1c0 s 		.BYTE	00,00,00,00,00,00,00,ww,gp,ww,ww,bn,hn,hn,hn,hn,hn,hn,hn,hn,cn,ww,ww,gp,ww,00,00,00,00,00,00,00
e1e0 e1e0 d 0000404040404040234040034040404040404040034040234040404040400000
e1e0 e1e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,gp,ww,ww,gn,ww,ww,ww,ww,ww,ww,ww,ww,gn,ww,ww,gp,ww,ww,ww,ww,ww,ww,00,00
e200 e200 d 0000402a2c2c2c2c2f2c2c2d2c2c2640402a2c2c2d2c2c2f2c2c2c2c26400000
e200 e200 s 		.BYTE	00,00,ww,rp,hp,hp,hp,hp,xp,hp,hp,kp,hp,hp,lp,ww,ww,rp,hp,hp,kp,hp,hp,xp,hp,hp,hp,hp,lp,ww,00,00
e220 e220 d 0000402340404040234040404040234040234040404040234040404023400000
e220 e220 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,gp,ww,ww,ww,ww,gp,ww,00,00
e240 e240 d 000040192c2640402b2c2c2e2c2c2d2c2c2d2c2c2e2c2c2740402a2c15400000
e240 e240 s 		.BYTE	00,00,ww,ds,hp,lp,ww,ww,bp,hp,hp,vp,hp,hp,kp,hp,hp,kp,hp,hp,vp,hp,hp,cp,ww,ww,rp,hp,us,ww,00,00
e260 e260 d 0000404040234040234040234040404040404040234040234040234040400000
e260 e260 s 		.BYTE	00,00,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,gp,ww,ww,ww,00,00
e280 e280 d 0000402a2c2d2c2c254040292c2c2640402a2c2c254040292c2c2d2c26400000
e280 e280 s 		.BYTE	00,00,ww,rp,hp,kp,hp,hp,up,ww,ww,dp,hp,hp,lp,ww,ww,rp,hp,hp,up,ww,ww,dp,hp,hp,kp,hp,lp,ww,00,00
e2a0 e2a0 d 0000402340404040404040404040234040234040404040404040404023400000
e2a0 e2a0 s 		.BYTE	00,00,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,ww,gp,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,gp,ww,00,00
e2c0 e2c0 d 000040292c2c2c2c2c2c2c2c2c2c2d2c2c2d2c2c2c2c2c2c2c2c2c2c25400000
e2c0 e2c0 s 		.BYTE	00,00,ww,dp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,kp,hp,hp,kp,hp,hp,hp,hp,hp,hp,hp,hp,hp,hp,up,ww,00,00
e2e0 e2e0 d 0000404040404040404040404040404040404040404040404040404040400000
e2e0 e2e0 s 		.BYTE	00,00,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,ww,00,00
e300 e300 d 0000000000000000000000000000000000000000000000000000000000000000
e300 e300 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e320 e320 d 0000000000000000000000000000000000000000000000000000000000000000
e320 e320 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e340 e340 d 0000000000000000000000000000000000000000000000000000000000000000
e340 e340 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e360 e360 d 0000000000000000000000000000000000000000000000000000000000000000
e360 e360 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e380 e380 d 0000000000000000000000000000000000000000000000000000000000000000
e380 e380 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3a0 e3a0 d 0000000000000000000000000000000000000000000000000000000000000000
e3a0 e3a0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3c0 e3c0 d 0000000000000000000000000000000000000000000000000000000000000000
e3c0 e3c0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
e3e0 e3e0 f main.asm
e3e0 e3e0 d 0000000000000000000000000000000000000000000000000000000000000000
e3e0 e3e0 s 		.BYTE	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
000b v bn
0007 v cn
000a v lf
002b v bp
0029 v dp
000d v cr
0027 v cp
0023 v gp
002c v hp
000c v hn
0003 v gn
002d v kp
0026 v lp
0006 v ln
0009 v dn
000d v kn
000a v rn
001c v hs
002a v rp
0005 v un
0025 v up
002e v vp
000e v vn
002f v xp
000f v xn
0013 v gs
0016 v ls
001a v rs
0015 v us
0040 v ww
0019 v ds
001b v bs
0017 v cs
001e v vs
001d v ks
001f v xs
e000 a map
949e a cls
9413 a num1
9415 a num2
9436 a absa
8888 v seed
8100 v pacx
8101 v pacy
945d a wall
949c a void
91fa a move
942a a num1h
942e a num2h
9456 a delay
0007 v sfbit
920e a moved
8900 v score
9214 a movel
0000 v upbit
921a a mover
9208 a moveu
944b a print
9065 a input
90ed a checkh
9491 a pacman
90fb a checkv
929c a pmchar
93fa a disphl
9473 a pellet
910b a movepm
9288 a pmloop
92b7 a printp
8102 v paccdir
8103 v pacndir
943b a randoma
93f2 a hltodec
907f a clearpm
0002 v leftbit
0006 v wallbit
93d2 a newline
90c7 a getmove
0001 v downbit
92c7 a printsf
908b a printpm
92af a printpp
9032 a gameloop
0003 v rightbit
9489 a scorehud
000e v initpacx
000e v initpacy
91ce a redghost
8113 v ghostdis
93ab a pmpfskip
9281 a printmap
938f a pmpfloop
941d a numtohex
9454 a printret
90b2 a eatpellet
0005 v pelletbit
92d7 a pmcharret
91e4 a blueghost
91ef a pinkghost
8110 v redghostx
8111 v redghosty
0004 v powerpbit
92bf a printwall
92cf a printvoid
944c a printloop
92ea a pfnextrow
89f2 v originalbc
9231 a movedvalid
90ba a eatspellet
9234 a movelvalid
91d9 a greenghost
9237 a movervalid
922e a moveuvalid
907b a validinput
926a a printmapat
937b a printpfmap
9296 a pmnextline
93b4 a printscore
93db a movecursor
947e a superfruit
d000 a pathfindmap
8112 v redghostdir
9220 a ismovevalid
9468 a powerpellet
92e0 a initppfloop
0014 v initoghostx
0001 v initoghosty
90a5 a getpmmapdata
9252 a getaddresspf
92d9 a initpathfind
90e3 a calcnextmove
914a a moveredghost
93a5 a pmpfnextline
000f v storeoghostx
000f v storeoghosty
934b a calculatemapd
9357 a calculatemapl
9363 a calculatemapr
933f a calculatemapu
0030 v pathfinddepth
923a a getmapaddress
9117 a clearredghost
9398 a pmpfafterskip
90dc a nextmovevalid
0014 v initredghostx
0001 v initredghosty
9123 a printredghost
918e a redghostcheckd
919c a redghostcheckl
91aa a redghostcheckr
9180 a redghostchecku
000f v storeredghostx
000f v storeredghosty
89f0 v oldstackpointer
936f a calculatemapcell
92f1 a calculatepathmap
91b8 a redghostpathfind
91c5 a redghostsetnewdir
913d a getredghostmapdata
9156 a getredghostnextmove
9303 a calculatepathmaploop
